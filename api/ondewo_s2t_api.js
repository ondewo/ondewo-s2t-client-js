var ondewo_s2t_api;
/******/ (() => {
	// webpackBootstrap
	/******/ var __webpack_modules__ = {
		/***/ './node_modules/google-protobuf/google-protobuf.js':
			/*!*********************************************************!*\
  !*** ./node_modules/google-protobuf/google-protobuf.js ***!
  \*********************************************************/
			/***/ function (__unused_webpack_module, exports, __webpack_require__) {
				/*

 Copyright The Closure Library Authors.
 SPDX-License-Identifier: Apache-2.0
*/
				var aa =
						'function' == typeof Object.defineProperties
							? Object.defineProperty
							: function (a, b, c) {
									a != Array.prototype && a != Object.prototype && (a[b] = c.value);
								},
					e =
						'undefined' != typeof window && window === this
							? this
							: 'undefined' != typeof __webpack_require__.g && null != __webpack_require__.g
								? __webpack_require__.g
								: this;
				function ba(a, b) {
					if (b) {
						var c = e;
						a = a.split('.');
						for (var d = 0; d < a.length - 1; d++) {
							var f = a[d];
							f in c || (c[f] = {});
							c = c[f];
						}
						a = a[a.length - 1];
						d = c[a];
						b = b(d);
						b != d && null != b && aa(c, a, { configurable: !0, writable: !0, value: b });
					}
				}
				function ca(a) {
					var b = 0;
					return function () {
						return b < a.length ? { done: !1, value: a[b++] } : { done: !0 };
					};
				}
				function da() {
					da = function () {};
					e.Symbol || (e.Symbol = ea);
				}
				function fa(a, b) {
					this.a = a;
					aa(this, 'description', { configurable: !0, writable: !0, value: b });
				}
				fa.prototype.toString = function () {
					return this.a;
				};
				var ea = (function () {
					function a(c) {
						if (this instanceof a) throw new TypeError('Symbol is not a constructor');
						return new fa('jscomp_symbol_' + (c || '') + '_' + b++, c);
					}
					var b = 0;
					return a;
				})();
				function ha() {
					da();
					var a = e.Symbol.iterator;
					a || (a = e.Symbol.iterator = e.Symbol('Symbol.iterator'));
					'function' != typeof Array.prototype[a] &&
						aa(Array.prototype, a, {
							configurable: !0,
							writable: !0,
							value: function () {
								return ia(ca(this));
							}
						});
					ha = function () {};
				}
				function ia(a) {
					ha();
					a = { next: a };
					a[e.Symbol.iterator] = function () {
						return this;
					};
					return a;
				}
				function ja(a, b) {
					ha();
					a instanceof String && (a += '');
					var c = 0,
						d = {
							next: function () {
								if (c < a.length) {
									var f = c++;
									return { value: b(f, a[f]), done: !1 };
								}
								d.next = function () {
									return { done: !0, value: void 0 };
								};
								return d.next();
							}
						};
					d[Symbol.iterator] = function () {
						return d;
					};
					return d;
				}
				ba('Array.prototype.entries', function (a) {
					return a
						? a
						: function () {
								return ja(this, function (b, c) {
									return [b, c];
								});
							};
				});
				var ka = this || self;
				function g(a, b, c) {
					a = a.split('.');
					c = c || ka;
					a[0] in c || 'undefined' == typeof c.execScript || c.execScript('var ' + a[0]);
					for (var d; a.length && (d = a.shift()); )
						a.length || void 0 === b
							? c[d] && c[d] !== Object.prototype[d]
								? (c = c[d])
								: (c = c[d] = {})
							: (c[d] = b);
				}
				function k(a) {
					var b = typeof a;
					if ('object' == b)
						if (a) {
							if (a instanceof Array) return 'array';
							if (a instanceof Object) return b;
							var c = Object.prototype.toString.call(a);
							if ('[object Window]' == c) return 'object';
							if (
								'[object Array]' == c ||
								('number' == typeof a.length &&
									'undefined' != typeof a.splice &&
									'undefined' != typeof a.propertyIsEnumerable &&
									!a.propertyIsEnumerable('splice'))
							)
								return 'array';
							if (
								'[object Function]' == c ||
								('undefined' != typeof a.call &&
									'undefined' != typeof a.propertyIsEnumerable &&
									!a.propertyIsEnumerable('call'))
							)
								return 'function';
						} else return 'null';
					else if ('function' == b && 'undefined' == typeof a.call) return 'object';
					return b;
				}
				function la(a) {
					var b = typeof a;
					return ('object' == b && null != a) || 'function' == b;
				}
				function ma(a, b, c) {
					g(a, b, c);
				}
				function na(a, b) {
					function c() {}
					c.prototype = b.prototype;
					a.prototype = new c();
					a.prototype.constructor = a;
				}
				var oa = 'constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf'.split(
					' '
				);
				function pa(a, b) {
					for (var c, d, f = 1; f < arguments.length; f++) {
						d = arguments[f];
						for (c in d) a[c] = d[c];
						for (var h = 0; h < oa.length; h++)
							((c = oa[h]), Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]));
					}
				}
				var qa = Array.prototype.forEach
						? function (a, b) {
								Array.prototype.forEach.call(a, b, void 0);
							}
						: function (a, b) {
								for (var c = a.length, d = 'string' === typeof a ? a.split('') : a, f = 0; f < c; f++)
									f in d && b.call(void 0, d[f], f, a);
							},
					l = Array.prototype.map
						? function (a, b) {
								return Array.prototype.map.call(a, b, void 0);
							}
						: function (a, b) {
								for (var c = a.length, d = Array(c), f = 'string' === typeof a ? a.split('') : a, h = 0; h < c; h++)
									h in f && (d[h] = b.call(void 0, f[h], h, a));
								return d;
							};
				function ra(a, b, c) {
					return 2 >= arguments.length ? Array.prototype.slice.call(a, b) : Array.prototype.slice.call(a, b, c);
				}
				function sa(a, b, c, d) {
					var f = 'Assertion failed';
					if (c) {
						f += ': ' + c;
						var h = d;
					} else a && ((f += ': ' + a), (h = b));
					throw Error(f, h || []);
				}
				function n(a, b, c) {
					for (var d = [], f = 2; f < arguments.length; ++f) d[f - 2] = arguments[f];
					a || sa('', null, b, d);
					return a;
				}
				function ta(a, b, c) {
					for (var d = [], f = 2; f < arguments.length; ++f) d[f - 2] = arguments[f];
					'string' !== typeof a && sa('Expected string but got %s: %s.', [k(a), a], b, d);
				}
				function ua(a, b, c) {
					for (var d = [], f = 2; f < arguments.length; ++f) d[f - 2] = arguments[f];
					Array.isArray(a) || sa('Expected array but got %s: %s.', [k(a), a], b, d);
				}
				function p(a, b) {
					for (var c = [], d = 1; d < arguments.length; ++d) c[d - 1] = arguments[d];
					throw Error('Failure' + (a ? ': ' + a : ''), c);
				}
				function q(a, b, c, d) {
					for (var f = [], h = 3; h < arguments.length; ++h) f[h - 3] = arguments[h];
					a instanceof b || sa('Expected instanceof %s but got %s.', [va(b), va(a)], c, f);
				}
				function va(a) {
					return a instanceof Function
						? a.displayName || a.name || 'unknown type name'
						: a instanceof Object
							? a.constructor.displayName || a.constructor.name || Object.prototype.toString.call(a)
							: null === a
								? 'null'
								: typeof a;
				}
				function r(a, b) {
					this.c = a;
					this.b = b;
					this.a = {};
					this.arrClean = !0;
					if (0 < this.c.length) {
						for (a = 0; a < this.c.length; a++) {
							b = this.c[a];
							var c = b[0];
							this.a[c.toString()] = new wa(c, b[1]);
						}
						this.arrClean = !0;
					}
				}
				g('jspb.Map', r, void 0);
				r.prototype.g = function () {
					if (this.arrClean) {
						if (this.b) {
							var a = this.a,
								b;
							for (b in a)
								if (Object.prototype.hasOwnProperty.call(a, b)) {
									var c = a[b].a;
									c && c.g();
								}
						}
					} else {
						this.c.length = 0;
						a = u(this);
						a.sort();
						for (b = 0; b < a.length; b++) {
							var d = this.a[a[b]];
							(c = d.a) && c.g();
							this.c.push([d.key, d.value]);
						}
						this.arrClean = !0;
					}
					return this.c;
				};
				r.prototype.toArray = r.prototype.g;
				r.prototype.Mc = function (a, b) {
					for (var c = this.g(), d = [], f = 0; f < c.length; f++) {
						var h = this.a[c[f][0].toString()];
						v(this, h);
						var m = h.a;
						m ? (n(b), d.push([h.key, b(a, m)])) : d.push([h.key, h.value]);
					}
					return d;
				};
				r.prototype.toObject = r.prototype.Mc;
				r.fromObject = function (a, b, c) {
					b = new r([], b);
					for (var d = 0; d < a.length; d++) {
						var f = a[d][0],
							h = c(a[d][1]);
						b.set(f, h);
					}
					return b;
				};
				function w(a) {
					this.a = 0;
					this.b = a;
				}
				w.prototype.next = function () {
					return this.a < this.b.length ? { done: !1, value: this.b[this.a++] } : { done: !0, value: void 0 };
				};
				'undefined' != typeof Symbol &&
					(w.prototype[Symbol.iterator] = function () {
						return this;
					});
				r.prototype.Jb = function () {
					return u(this).length;
				};
				r.prototype.getLength = r.prototype.Jb;
				r.prototype.clear = function () {
					this.a = {};
					this.arrClean = !1;
				};
				r.prototype.clear = r.prototype.clear;
				r.prototype.Cb = function (a) {
					a = a.toString();
					var b = this.a.hasOwnProperty(a);
					delete this.a[a];
					this.arrClean = !1;
					return b;
				};
				r.prototype.del = r.prototype.Cb;
				r.prototype.Eb = function () {
					var a = [],
						b = u(this);
					b.sort();
					for (var c = 0; c < b.length; c++) {
						var d = this.a[b[c]];
						a.push([d.key, d.value]);
					}
					return a;
				};
				r.prototype.getEntryList = r.prototype.Eb;
				r.prototype.entries = function () {
					var a = [],
						b = u(this);
					b.sort();
					for (var c = 0; c < b.length; c++) {
						var d = this.a[b[c]];
						a.push([d.key, v(this, d)]);
					}
					return new w(a);
				};
				r.prototype.entries = r.prototype.entries;
				r.prototype.keys = function () {
					var a = [],
						b = u(this);
					b.sort();
					for (var c = 0; c < b.length; c++) a.push(this.a[b[c]].key);
					return new w(a);
				};
				r.prototype.keys = r.prototype.keys;
				r.prototype.values = function () {
					var a = [],
						b = u(this);
					b.sort();
					for (var c = 0; c < b.length; c++) a.push(v(this, this.a[b[c]]));
					return new w(a);
				};
				r.prototype.values = r.prototype.values;
				r.prototype.forEach = function (a, b) {
					var c = u(this);
					c.sort();
					for (var d = 0; d < c.length; d++) {
						var f = this.a[c[d]];
						a.call(b, v(this, f), f.key, this);
					}
				};
				r.prototype.forEach = r.prototype.forEach;
				r.prototype.set = function (a, b) {
					var c = new wa(a);
					this.b ? ((c.a = b), (c.value = b.g())) : (c.value = b);
					this.a[a.toString()] = c;
					this.arrClean = !1;
					return this;
				};
				r.prototype.set = r.prototype.set;
				function v(a, b) {
					return a.b ? (b.a || (b.a = new a.b(b.value)), b.a) : b.value;
				}
				r.prototype.get = function (a) {
					if ((a = this.a[a.toString()])) return v(this, a);
				};
				r.prototype.get = r.prototype.get;
				r.prototype.has = function (a) {
					return a.toString() in this.a;
				};
				r.prototype.has = r.prototype.has;
				r.prototype.Jc = function (a, b, c, d, f) {
					var h = u(this);
					h.sort();
					for (var m = 0; m < h.length; m++) {
						var t = this.a[h[m]];
						b.Va(a);
						c.call(b, 1, t.key);
						this.b ? d.call(b, 2, v(this, t), f) : d.call(b, 2, t.value);
						b.Ya();
					}
				};
				r.prototype.serializeBinary = r.prototype.Jc;
				r.deserializeBinary = function (a, b, c, d, f, h, m) {
					for (; b.oa() && !b.bb(); ) {
						var t = b.c;
						1 == t
							? (h = c.call(b))
							: 2 == t && (a.b ? (n(f), m || (m = new a.b()), d.call(b, m, f)) : (m = d.call(b)));
					}
					n(void 0 != h);
					n(void 0 != m);
					a.set(h, m);
				};
				function u(a) {
					a = a.a;
					var b = [],
						c;
					for (c in a) Object.prototype.hasOwnProperty.call(a, c) && b.push(c);
					return b;
				}
				function wa(a, b) {
					this.key = a;
					this.value = b;
					this.a = void 0;
				}
				function xa(a) {
					if (8192 >= a.length) return String.fromCharCode.apply(null, a);
					for (var b = '', c = 0; c < a.length; c += 8192) b += String.fromCharCode.apply(null, ra(a, c, c + 8192));
					return b;
				}
				var ya = {
						'\x00': '\\0',
						'\b': '\\b',
						'\f': '\\f',
						'\n': '\\n',
						'\r': '\\r',
						'\t': '\\t',
						'\x0B': '\\x0B',
						'"': '\\"',
						'\\': '\\\\',
						'<': '\\u003C'
					},
					za = { "'": "\\'" };
				var Aa = {},
					x = null;
				function Ba(a, b) {
					void 0 === b && (b = 0);
					Ca();
					b = Aa[b];
					for (var c = [], d = 0; d < a.length; d += 3) {
						var f = a[d],
							h = d + 1 < a.length,
							m = h ? a[d + 1] : 0,
							t = d + 2 < a.length,
							B = t ? a[d + 2] : 0,
							M = f >> 2;
						f = ((f & 3) << 4) | (m >> 4);
						m = ((m & 15) << 2) | (B >> 6);
						B &= 63;
						t || ((B = 64), h || (m = 64));
						c.push(b[M], b[f], b[m] || '', b[B] || '');
					}
					return c.join('');
				}
				function Da(a) {
					var b = a.length,
						c = (3 * b) / 4;
					c % 3
						? (c = Math.floor(c))
						: -1 != '=.'.indexOf(a[b - 1]) && (c = -1 != '=.'.indexOf(a[b - 2]) ? c - 2 : c - 1);
					var d = new Uint8Array(c),
						f = 0;
					Ea(a, function (h) {
						d[f++] = h;
					});
					return d.subarray(0, f);
				}
				function Ea(a, b) {
					function c(B) {
						for (; d < a.length; ) {
							var M = a.charAt(d++),
								La = x[M];
							if (null != La) return La;
							if (!/^[\s\xa0]*$/.test(M)) throw Error('Unknown base64 encoding at char: ' + M);
						}
						return B;
					}
					Ca();
					for (var d = 0; ; ) {
						var f = c(-1),
							h = c(0),
							m = c(64),
							t = c(64);
						if (64 === t && -1 === f) break;
						b((f << 2) | (h >> 4));
						64 != m && (b(((h << 4) & 240) | (m >> 2)), 64 != t && b(((m << 6) & 192) | t));
					}
				}
				function Ca() {
					if (!x) {
						x = {};
						for (
							var a = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'.split(''),
								b = ['+/=', '+/', '-_=', '-_.', '-_'],
								c = 0;
							5 > c;
							c++
						) {
							var d = a.concat(b[c].split(''));
							Aa[c] = d;
							for (var f = 0; f < d.length; f++) {
								var h = d[f];
								void 0 === x[h] && (x[h] = f);
							}
						}
					}
				}
				g('jspb.ConstBinaryMessage', function () {}, void 0);
				g('jspb.BinaryMessage', function () {}, void 0);
				g(
					'jspb.BinaryConstants.FieldType',
					{
						yb: -1,
						ee: 1,
						FLOAT: 2,
						ke: 3,
						te: 4,
						je: 5,
						xb: 6,
						wb: 7,
						BOOL: 8,
						re: 9,
						ie: 10,
						le: 11,
						ce: 12,
						se: 13,
						ge: 14,
						me: 15,
						ne: 16,
						oe: 17,
						pe: 18,
						he: 30,
						ve: 31
					},
					void 0
				);
				g('jspb.BinaryConstants.WireType', { yb: -1, ue: 0, xb: 1, de: 2, qe: 3, fe: 4, wb: 5 }, void 0);
				g(
					'jspb.BinaryConstants.FieldTypeToWireType',
					function (a) {
						switch (a) {
							case 5:
							case 3:
							case 13:
							case 4:
							case 17:
							case 18:
							case 8:
							case 14:
							case 31:
								return 0;
							case 1:
							case 6:
							case 16:
							case 30:
								return 1;
							case 9:
							case 11:
							case 12:
								return 2;
							case 2:
							case 7:
							case 15:
								return 5;
							default:
								return -1;
						}
					},
					void 0
				);
				g('jspb.BinaryConstants.INVALID_FIELD_NUMBER', -1, void 0);
				g('jspb.BinaryConstants.FLOAT32_EPS', 1.401298464324817e-45, void 0);
				g('jspb.BinaryConstants.FLOAT32_MIN', 1.1754943508222875e-38, void 0);
				g('jspb.BinaryConstants.FLOAT32_MAX', 3.4028234663852886e38, void 0);
				g('jspb.BinaryConstants.FLOAT64_EPS', 4.9e-324, void 0);
				g('jspb.BinaryConstants.FLOAT64_MIN', 2.2250738585072014e-308, void 0);
				g('jspb.BinaryConstants.FLOAT64_MAX', 1.7976931348623157e308, void 0);
				g('jspb.BinaryConstants.TWO_TO_20', 1048576, void 0);
				g('jspb.BinaryConstants.TWO_TO_23', 8388608, void 0);
				g('jspb.BinaryConstants.TWO_TO_31', 2147483648, void 0);
				g('jspb.BinaryConstants.TWO_TO_32', 4294967296, void 0);
				g('jspb.BinaryConstants.TWO_TO_52', 4503599627370496, void 0);
				g('jspb.BinaryConstants.TWO_TO_63', 0x7fffffffffffffff, void 0);
				g('jspb.BinaryConstants.TWO_TO_64', 1.8446744073709552e19, void 0);
				g('jspb.BinaryConstants.ZERO_HASH', '\x00\x00\x00\x00\x00\x00\x00\x00', void 0);
				var y = 0,
					z = 0;
				g(
					'jspb.utils.getSplit64Low',
					function () {
						return y;
					},
					void 0
				);
				g(
					'jspb.utils.getSplit64High',
					function () {
						return z;
					},
					void 0
				);
				function Fa(a) {
					var b = a >>> 0;
					a = Math.floor((a - b) / 4294967296) >>> 0;
					y = b;
					z = a;
				}
				g('jspb.utils.splitUint64', Fa, void 0);
				function A(a) {
					var b = 0 > a;
					a = Math.abs(a);
					var c = a >>> 0;
					a = Math.floor((a - c) / 4294967296);
					a >>>= 0;
					b && ((a = ~a >>> 0), (c = (~c >>> 0) + 1), 4294967295 < c && ((c = 0), a++, 4294967295 < a && (a = 0)));
					y = c;
					z = a;
				}
				g('jspb.utils.splitInt64', A, void 0);
				function Ga(a) {
					var b = 0 > a;
					a = 2 * Math.abs(a);
					Fa(a);
					a = y;
					var c = z;
					b && (0 == a ? (0 == c ? (c = a = 4294967295) : (c--, (a = 4294967295))) : a--);
					y = a;
					z = c;
				}
				g('jspb.utils.splitZigzag64', Ga, void 0);
				function Ha(a) {
					var b = 0 > a ? 1 : 0;
					a = b ? -a : a;
					if (0 === a) 0 < 1 / a ? (y = z = 0) : ((z = 0), (y = 2147483648));
					else if (isNaN(a)) ((z = 0), (y = 2147483647));
					else if (3.4028234663852886e38 < a) ((z = 0), (y = ((b << 31) | 2139095040) >>> 0));
					else if (1.1754943508222875e-38 > a)
						((a = Math.round(a / Math.pow(2, -149))), (z = 0), (y = ((b << 31) | a) >>> 0));
					else {
						var c = Math.floor(Math.log(a) / Math.LN2);
						a *= Math.pow(2, -c);
						a = Math.round(8388608 * a);
						16777216 <= a && ++c;
						z = 0;
						y = ((b << 31) | ((c + 127) << 23) | (a & 8388607)) >>> 0;
					}
				}
				g('jspb.utils.splitFloat32', Ha, void 0);
				function Ia(a) {
					var b = 0 > a ? 1 : 0;
					a = b ? -a : a;
					if (0 === a) ((z = 0 < 1 / a ? 0 : 2147483648), (y = 0));
					else if (isNaN(a)) ((z = 2147483647), (y = 4294967295));
					else if (1.7976931348623157e308 < a) ((z = ((b << 31) | 2146435072) >>> 0), (y = 0));
					else if (2.2250738585072014e-308 > a)
						((a /= Math.pow(2, -1074)), (z = ((b << 31) | (a / 4294967296)) >>> 0), (y = a >>> 0));
					else {
						var c = a,
							d = 0;
						if (2 <= c) for (; 2 <= c && 1023 > d; ) (d++, (c /= 2));
						else for (; 1 > c && -1022 < d; ) ((c *= 2), d--);
						a *= Math.pow(2, -d);
						z = ((b << 31) | ((d + 1023) << 20) | ((1048576 * a) & 1048575)) >>> 0;
						y = (4503599627370496 * a) >>> 0;
					}
				}
				g('jspb.utils.splitFloat64', Ia, void 0);
				function C(a) {
					var b = a.charCodeAt(4),
						c = a.charCodeAt(5),
						d = a.charCodeAt(6),
						f = a.charCodeAt(7);
					y = (a.charCodeAt(0) + (a.charCodeAt(1) << 8) + (a.charCodeAt(2) << 16) + (a.charCodeAt(3) << 24)) >>> 0;
					z = (b + (c << 8) + (d << 16) + (f << 24)) >>> 0;
				}
				g('jspb.utils.splitHash64', C, void 0);
				function D(a, b) {
					return 4294967296 * b + (a >>> 0);
				}
				g('jspb.utils.joinUint64', D, void 0);
				function E(a, b) {
					var c = b & 2147483648;
					c && ((a = (~a + 1) >>> 0), (b = ~b >>> 0), 0 == a && (b = (b + 1) >>> 0));
					a = D(a, b);
					return c ? -a : a;
				}
				g('jspb.utils.joinInt64', E, void 0);
				function Ja(a, b, c) {
					var d = b >> 31;
					return c((a << 1) ^ d, ((b << 1) | (a >>> 31)) ^ d);
				}
				g('jspb.utils.toZigzag64', Ja, void 0);
				function Ka(a, b) {
					return Ma(a, b, E);
				}
				g('jspb.utils.joinZigzag64', Ka, void 0);
				function Ma(a, b, c) {
					var d = -(a & 1);
					return c(((a >>> 1) | (b << 31)) ^ d, (b >>> 1) ^ d);
				}
				g('jspb.utils.fromZigzag64', Ma, void 0);
				function Na(a) {
					var b = 2 * (a >> 31) + 1,
						c = (a >>> 23) & 255;
					a &= 8388607;
					return 255 == c
						? a
							? NaN
							: Infinity * b
						: 0 == c
							? b * Math.pow(2, -149) * a
							: b * Math.pow(2, c - 150) * (a + Math.pow(2, 23));
				}
				g('jspb.utils.joinFloat32', Na, void 0);
				function Oa(a, b) {
					var c = 2 * (b >> 31) + 1,
						d = (b >>> 20) & 2047;
					a = 4294967296 * (b & 1048575) + a;
					return 2047 == d
						? a
							? NaN
							: Infinity * c
						: 0 == d
							? c * Math.pow(2, -1074) * a
							: c * Math.pow(2, d - 1075) * (a + 4503599627370496);
				}
				g('jspb.utils.joinFloat64', Oa, void 0);
				function Pa(a, b) {
					return String.fromCharCode(
						(a >>> 0) & 255,
						(a >>> 8) & 255,
						(a >>> 16) & 255,
						(a >>> 24) & 255,
						(b >>> 0) & 255,
						(b >>> 8) & 255,
						(b >>> 16) & 255,
						(b >>> 24) & 255
					);
				}
				g('jspb.utils.joinHash64', Pa, void 0);
				g('jspb.utils.DIGITS', '0123456789abcdef'.split(''), void 0);
				function F(a, b) {
					function c(f, h) {
						f = f ? String(f) : '';
						return h ? '0000000'.slice(f.length) + f : f;
					}
					if (2097151 >= b) return '' + D(a, b);
					var d = (((a >>> 24) | (b << 8)) >>> 0) & 16777215;
					b = (b >> 16) & 65535;
					a = (a & 16777215) + 6777216 * d + 6710656 * b;
					d += 8147497 * b;
					b *= 2;
					1e7 <= a && ((d += Math.floor(a / 1e7)), (a %= 1e7));
					1e7 <= d && ((b += Math.floor(d / 1e7)), (d %= 1e7));
					return c(b, 0) + c(d, b) + c(a, 1);
				}
				g('jspb.utils.joinUnsignedDecimalString', F, void 0);
				function G(a, b) {
					var c = b & 2147483648;
					c && ((a = (~a + 1) >>> 0), (b = (~b + (0 == a ? 1 : 0)) >>> 0));
					a = F(a, b);
					return c ? '-' + a : a;
				}
				g('jspb.utils.joinSignedDecimalString', G, void 0);
				function Qa(a, b) {
					C(a);
					a = y;
					var c = z;
					return b ? G(a, c) : F(a, c);
				}
				g('jspb.utils.hash64ToDecimalString', Qa, void 0);
				g(
					'jspb.utils.hash64ArrayToDecimalStrings',
					function (a, b) {
						for (var c = Array(a.length), d = 0; d < a.length; d++) c[d] = Qa(a[d], b);
						return c;
					},
					void 0
				);
				function H(a) {
					function b(m, t) {
						for (var B = 0; 8 > B && (1 !== m || 0 < t); B++) ((t = m * f[B] + t), (f[B] = t & 255), (t >>>= 8));
					}
					function c() {
						for (var m = 0; 8 > m; m++) f[m] = ~f[m] & 255;
					}
					n(0 < a.length);
					var d = !1;
					'-' === a[0] && ((d = !0), (a = a.slice(1)));
					for (var f = [0, 0, 0, 0, 0, 0, 0, 0], h = 0; h < a.length; h++) b(10, a.charCodeAt(h) - 48);
					d && (c(), b(1, 1));
					return xa(f);
				}
				g('jspb.utils.decimalStringToHash64', H, void 0);
				g(
					'jspb.utils.splitDecimalString',
					function (a) {
						C(H(a));
					},
					void 0
				);
				function Ra(a) {
					return String.fromCharCode(10 > a ? 48 + a : 87 + a);
				}
				function Sa(a) {
					return 97 <= a ? a - 97 + 10 : a - 48;
				}
				g(
					'jspb.utils.hash64ToHexString',
					function (a) {
						var b = Array(18);
						b[0] = '0';
						b[1] = 'x';
						for (var c = 0; 8 > c; c++) {
							var d = a.charCodeAt(7 - c);
							b[2 * c + 2] = Ra(d >> 4);
							b[2 * c + 3] = Ra(d & 15);
						}
						return b.join('');
					},
					void 0
				);
				g(
					'jspb.utils.hexStringToHash64',
					function (a) {
						a = a.toLowerCase();
						n(18 == a.length);
						n('0' == a[0]);
						n('x' == a[1]);
						for (var b = '', c = 0; 8 > c; c++)
							b = String.fromCharCode(16 * Sa(a.charCodeAt(2 * c + 2)) + Sa(a.charCodeAt(2 * c + 3))) + b;
						return b;
					},
					void 0
				);
				g(
					'jspb.utils.hash64ToNumber',
					function (a, b) {
						C(a);
						a = y;
						var c = z;
						return b ? E(a, c) : D(a, c);
					},
					void 0
				);
				g(
					'jspb.utils.numberToHash64',
					function (a) {
						A(a);
						return Pa(y, z);
					},
					void 0
				);
				g(
					'jspb.utils.countVarints',
					function (a, b, c) {
						for (var d = 0, f = b; f < c; f++) d += a[f] >> 7;
						return c - b - d;
					},
					void 0
				);
				g(
					'jspb.utils.countVarintFields',
					function (a, b, c, d) {
						var f = 0;
						d *= 8;
						if (128 > d)
							for (; b < c && a[b++] == d; )
								for (f++; ; ) {
									var h = a[b++];
									if (0 == (h & 128)) break;
								}
						else
							for (; b < c; ) {
								for (h = d; 128 < h; ) {
									if (a[b] != ((h & 127) | 128)) return f;
									b++;
									h >>= 7;
								}
								if (a[b++] != h) break;
								for (f++; (h = a[b++]), 0 != (h & 128); );
							}
						return f;
					},
					void 0
				);
				function Ta(a, b, c, d, f) {
					var h = 0;
					if (128 > d) for (; b < c && a[b++] == d; ) (h++, (b += f));
					else
						for (; b < c; ) {
							for (var m = d; 128 < m; ) {
								if (a[b++] != ((m & 127) | 128)) return h;
								m >>= 7;
							}
							if (a[b++] != m) break;
							h++;
							b += f;
						}
					return h;
				}
				g(
					'jspb.utils.countFixed32Fields',
					function (a, b, c, d) {
						return Ta(a, b, c, 8 * d + 5, 4);
					},
					void 0
				);
				g(
					'jspb.utils.countFixed64Fields',
					function (a, b, c, d) {
						return Ta(a, b, c, 8 * d + 1, 8);
					},
					void 0
				);
				g(
					'jspb.utils.countDelimitedFields',
					function (a, b, c, d) {
						var f = 0;
						for (d = 8 * d + 2; b < c; ) {
							for (var h = d; 128 < h; ) {
								if (a[b++] != ((h & 127) | 128)) return f;
								h >>= 7;
							}
							if (a[b++] != h) break;
							f++;
							for (var m = 0, t = 1; (h = a[b++]), (m += (h & 127) * t), (t *= 128), 0 != (h & 128); );
							b += m;
						}
						return f;
					},
					void 0
				);
				g(
					'jspb.utils.debugBytesToTextFormat',
					function (a) {
						var b = '"';
						if (a) {
							a = Ua(a);
							for (var c = 0; c < a.length; c++) ((b += '\\x'), 16 > a[c] && (b += '0'), (b += a[c].toString(16)));
						}
						return b + '"';
					},
					void 0
				);
				g(
					'jspb.utils.debugScalarToTextFormat',
					function (a) {
						if ('string' === typeof a) {
							a = String(a);
							for (var b = ['"'], c = 0; c < a.length; c++) {
								var d = a.charAt(c),
									f = d.charCodeAt(0),
									h = c + 1,
									m;
								if (!(m = ya[d])) {
									if (!(31 < f && 127 > f))
										if (((f = d), f in za)) d = za[f];
										else if (f in ya) d = za[f] = ya[f];
										else {
											m = f.charCodeAt(0);
											if (31 < m && 127 > m) d = f;
											else {
												if (256 > m) {
													if (((d = '\\x'), 16 > m || 256 < m)) d += '0';
												} else ((d = '\\u'), 4096 > m && (d += '0'));
												d += m.toString(16).toUpperCase();
											}
											d = za[f] = d;
										}
									m = d;
								}
								b[h] = m;
							}
							b.push('"');
							a = b.join('');
						} else a = a.toString();
						return a;
					},
					void 0
				);
				g(
					'jspb.utils.stringToByteArray',
					function (a) {
						for (var b = new Uint8Array(a.length), c = 0; c < a.length; c++) {
							var d = a.charCodeAt(c);
							if (255 < d) throw Error('Conversion error: string contains codepoint outside of byte range');
							b[c] = d;
						}
						return b;
					},
					void 0
				);
				function Ua(a) {
					if (a.constructor === Uint8Array) return a;
					if (a.constructor === ArrayBuffer) return new Uint8Array(a);
					if (a.constructor === Array) return new Uint8Array(a);
					if (a.constructor === String) return Da(a);
					if (a instanceof Uint8Array) return new Uint8Array(a.buffer, a.byteOffset, a.byteLength);
					p('Type not convertible to Uint8Array.');
					return new Uint8Array(0);
				}
				g('jspb.utils.byteSourceToUint8Array', Ua, void 0);
				function I(a, b, c) {
					this.b = null;
					this.a = this.c = this.h = 0;
					this.v = !1;
					a && this.H(a, b, c);
				}
				g('jspb.BinaryDecoder', I, void 0);
				var Va = [];
				I.getInstanceCacheLength = function () {
					return Va.length;
				};
				function Wa(a, b, c) {
					if (Va.length) {
						var d = Va.pop();
						a && d.H(a, b, c);
						return d;
					}
					return new I(a, b, c);
				}
				I.alloc = Wa;
				I.prototype.Ca = function () {
					this.clear();
					100 > Va.length && Va.push(this);
				};
				I.prototype.free = I.prototype.Ca;
				I.prototype.clone = function () {
					return Wa(this.b, this.h, this.c - this.h);
				};
				I.prototype.clone = I.prototype.clone;
				I.prototype.clear = function () {
					this.b = null;
					this.a = this.c = this.h = 0;
					this.v = !1;
				};
				I.prototype.clear = I.prototype.clear;
				I.prototype.Y = function () {
					return this.b;
				};
				I.prototype.getBuffer = I.prototype.Y;
				I.prototype.H = function (a, b, c) {
					this.b = Ua(a);
					this.h = void 0 !== b ? b : 0;
					this.c = void 0 !== c ? this.h + c : this.b.length;
					this.a = this.h;
				};
				I.prototype.setBlock = I.prototype.H;
				I.prototype.Db = function () {
					return this.c;
				};
				I.prototype.getEnd = I.prototype.Db;
				I.prototype.setEnd = function (a) {
					this.c = a;
				};
				I.prototype.setEnd = I.prototype.setEnd;
				I.prototype.reset = function () {
					this.a = this.h;
				};
				I.prototype.reset = I.prototype.reset;
				I.prototype.B = function () {
					return this.a;
				};
				I.prototype.getCursor = I.prototype.B;
				I.prototype.Ma = function (a) {
					this.a = a;
				};
				I.prototype.setCursor = I.prototype.Ma;
				I.prototype.advance = function (a) {
					this.a += a;
					n(this.a <= this.c);
				};
				I.prototype.advance = I.prototype.advance;
				I.prototype.ya = function () {
					return this.a == this.c;
				};
				I.prototype.atEnd = I.prototype.ya;
				I.prototype.Qb = function () {
					return this.a > this.c;
				};
				I.prototype.pastEnd = I.prototype.Qb;
				I.prototype.getError = function () {
					return this.v || 0 > this.a || this.a > this.c;
				};
				I.prototype.getError = I.prototype.getError;
				I.prototype.w = function (a) {
					for (var b = 128, c = 0, d = 0, f = 0; 4 > f && 128 <= b; f++)
						((b = this.b[this.a++]), (c |= (b & 127) << (7 * f)));
					128 <= b && ((b = this.b[this.a++]), (c |= (b & 127) << 28), (d |= (b & 127) >> 4));
					if (128 <= b) for (f = 0; 5 > f && 128 <= b; f++) ((b = this.b[this.a++]), (d |= (b & 127) << (7 * f + 3)));
					if (128 > b) return a(c >>> 0, d >>> 0);
					p('Failed to read varint, encoding is invalid.');
					this.v = !0;
				};
				I.prototype.readSplitVarint64 = I.prototype.w;
				I.prototype.ea = function (a) {
					return this.w(function (b, c) {
						return Ma(b, c, a);
					});
				};
				I.prototype.readSplitZigzagVarint64 = I.prototype.ea;
				I.prototype.ta = function (a) {
					var b = this.b,
						c = this.a;
					this.a += 8;
					for (var d = 0, f = 0, h = c + 7; h >= c; h--) ((d = (d << 8) | b[h]), (f = (f << 8) | b[h + 4]));
					return a(d, f);
				};
				I.prototype.readSplitFixed64 = I.prototype.ta;
				I.prototype.kb = function () {
					for (; this.b[this.a] & 128; ) this.a++;
					this.a++;
				};
				I.prototype.skipVarint = I.prototype.kb;
				I.prototype.mb = function (a) {
					for (; 128 < a; ) (this.a--, (a >>>= 7));
					this.a--;
				};
				I.prototype.unskipVarint = I.prototype.mb;
				I.prototype.o = function () {
					var a = this.b;
					var b = a[this.a];
					var c = b & 127;
					if (128 > b) return ((this.a += 1), n(this.a <= this.c), c);
					b = a[this.a + 1];
					c |= (b & 127) << 7;
					if (128 > b) return ((this.a += 2), n(this.a <= this.c), c);
					b = a[this.a + 2];
					c |= (b & 127) << 14;
					if (128 > b) return ((this.a += 3), n(this.a <= this.c), c);
					b = a[this.a + 3];
					c |= (b & 127) << 21;
					if (128 > b) return ((this.a += 4), n(this.a <= this.c), c);
					b = a[this.a + 4];
					c |= (b & 15) << 28;
					if (128 > b) return ((this.a += 5), n(this.a <= this.c), c >>> 0);
					this.a += 5;
					128 <= a[this.a++] &&
						128 <= a[this.a++] &&
						128 <= a[this.a++] &&
						128 <= a[this.a++] &&
						128 <= a[this.a++] &&
						n(!1);
					n(this.a <= this.c);
					return c;
				};
				I.prototype.readUnsignedVarint32 = I.prototype.o;
				I.prototype.da = function () {
					return ~~this.o();
				};
				I.prototype.readSignedVarint32 = I.prototype.da;
				I.prototype.O = function () {
					return this.o().toString();
				};
				I.prototype.Ea = function () {
					return this.da().toString();
				};
				I.prototype.readSignedVarint32String = I.prototype.Ea;
				I.prototype.Ia = function () {
					var a = this.o();
					return (a >>> 1) ^ -(a & 1);
				};
				I.prototype.readZigzagVarint32 = I.prototype.Ia;
				I.prototype.Ga = function () {
					return this.w(D);
				};
				I.prototype.readUnsignedVarint64 = I.prototype.Ga;
				I.prototype.Ha = function () {
					return this.w(F);
				};
				I.prototype.readUnsignedVarint64String = I.prototype.Ha;
				I.prototype.sa = function () {
					return this.w(E);
				};
				I.prototype.readSignedVarint64 = I.prototype.sa;
				I.prototype.Fa = function () {
					return this.w(G);
				};
				I.prototype.readSignedVarint64String = I.prototype.Fa;
				I.prototype.Ja = function () {
					return this.w(Ka);
				};
				I.prototype.readZigzagVarint64 = I.prototype.Ja;
				I.prototype.fb = function () {
					return this.ea(Pa);
				};
				I.prototype.readZigzagVarintHash64 = I.prototype.fb;
				I.prototype.Ka = function () {
					return this.ea(G);
				};
				I.prototype.readZigzagVarint64String = I.prototype.Ka;
				I.prototype.Gc = function () {
					var a = this.b[this.a];
					this.a += 1;
					n(this.a <= this.c);
					return a;
				};
				I.prototype.readUint8 = I.prototype.Gc;
				I.prototype.Ec = function () {
					var a = this.b[this.a],
						b = this.b[this.a + 1];
					this.a += 2;
					n(this.a <= this.c);
					return (a << 0) | (b << 8);
				};
				I.prototype.readUint16 = I.prototype.Ec;
				I.prototype.m = function () {
					var a = this.b[this.a],
						b = this.b[this.a + 1],
						c = this.b[this.a + 2],
						d = this.b[this.a + 3];
					this.a += 4;
					n(this.a <= this.c);
					return ((a << 0) | (b << 8) | (c << 16) | (d << 24)) >>> 0;
				};
				I.prototype.readUint32 = I.prototype.m;
				I.prototype.ga = function () {
					var a = this.m(),
						b = this.m();
					return D(a, b);
				};
				I.prototype.readUint64 = I.prototype.ga;
				I.prototype.ha = function () {
					var a = this.m(),
						b = this.m();
					return F(a, b);
				};
				I.prototype.readUint64String = I.prototype.ha;
				I.prototype.Xb = function () {
					var a = this.b[this.a];
					this.a += 1;
					n(this.a <= this.c);
					return (a << 24) >> 24;
				};
				I.prototype.readInt8 = I.prototype.Xb;
				I.prototype.Vb = function () {
					var a = this.b[this.a],
						b = this.b[this.a + 1];
					this.a += 2;
					n(this.a <= this.c);
					return (((a << 0) | (b << 8)) << 16) >> 16;
				};
				I.prototype.readInt16 = I.prototype.Vb;
				I.prototype.P = function () {
					var a = this.b[this.a],
						b = this.b[this.a + 1],
						c = this.b[this.a + 2],
						d = this.b[this.a + 3];
					this.a += 4;
					n(this.a <= this.c);
					return (a << 0) | (b << 8) | (c << 16) | (d << 24);
				};
				I.prototype.readInt32 = I.prototype.P;
				I.prototype.ba = function () {
					var a = this.m(),
						b = this.m();
					return E(a, b);
				};
				I.prototype.readInt64 = I.prototype.ba;
				I.prototype.ca = function () {
					var a = this.m(),
						b = this.m();
					return G(a, b);
				};
				I.prototype.readInt64String = I.prototype.ca;
				I.prototype.aa = function () {
					var a = this.m();
					return Na(a, 0);
				};
				I.prototype.readFloat = I.prototype.aa;
				I.prototype.Z = function () {
					var a = this.m(),
						b = this.m();
					return Oa(a, b);
				};
				I.prototype.readDouble = I.prototype.Z;
				I.prototype.pa = function () {
					return !!this.b[this.a++];
				};
				I.prototype.readBool = I.prototype.pa;
				I.prototype.ra = function () {
					return this.da();
				};
				I.prototype.readEnum = I.prototype.ra;
				I.prototype.fa = function (a) {
					var b = this.b,
						c = this.a;
					a = c + a;
					for (var d = [], f = ''; c < a; ) {
						var h = b[c++];
						if (128 > h) d.push(h);
						else if (192 > h) continue;
						else if (224 > h) {
							var m = b[c++];
							d.push(((h & 31) << 6) | (m & 63));
						} else if (240 > h) {
							m = b[c++];
							var t = b[c++];
							d.push(((h & 15) << 12) | ((m & 63) << 6) | (t & 63));
						} else if (248 > h) {
							m = b[c++];
							t = b[c++];
							var B = b[c++];
							h = ((h & 7) << 18) | ((m & 63) << 12) | ((t & 63) << 6) | (B & 63);
							h -= 65536;
							d.push(((h >> 10) & 1023) + 55296, (h & 1023) + 56320);
						}
						8192 <= d.length && ((f += String.fromCharCode.apply(null, d)), (d.length = 0));
					}
					f += xa(d);
					this.a = c;
					return f;
				};
				I.prototype.readString = I.prototype.fa;
				I.prototype.Dc = function () {
					var a = this.o();
					return this.fa(a);
				};
				I.prototype.readStringWithLength = I.prototype.Dc;
				I.prototype.qa = function (a) {
					if (0 > a || this.a + a > this.b.length) return ((this.v = !0), p('Invalid byte length!'), new Uint8Array(0));
					var b = this.b.subarray(this.a, this.a + a);
					this.a += a;
					n(this.a <= this.c);
					return b;
				};
				I.prototype.readBytes = I.prototype.qa;
				I.prototype.ia = function () {
					return this.w(Pa);
				};
				I.prototype.readVarintHash64 = I.prototype.ia;
				I.prototype.$ = function () {
					var a = this.b,
						b = this.a,
						c = a[b],
						d = a[b + 1],
						f = a[b + 2],
						h = a[b + 3],
						m = a[b + 4],
						t = a[b + 5],
						B = a[b + 6];
					a = a[b + 7];
					this.a += 8;
					return String.fromCharCode(c, d, f, h, m, t, B, a);
				};
				I.prototype.readFixedHash64 = I.prototype.$;
				function J(a, b, c) {
					this.a = Wa(a, b, c);
					this.O = this.a.B();
					this.b = this.c = -1;
					this.h = !1;
					this.v = null;
				}
				g('jspb.BinaryReader', J, void 0);
				var K = [];
				J.clearInstanceCache = function () {
					K = [];
				};
				J.getInstanceCacheLength = function () {
					return K.length;
				};
				function Xa(a, b, c) {
					if (K.length) {
						var d = K.pop();
						a && d.a.H(a, b, c);
						return d;
					}
					return new J(a, b, c);
				}
				J.alloc = Xa;
				J.prototype.zb = Xa;
				J.prototype.alloc = J.prototype.zb;
				J.prototype.Ca = function () {
					this.a.clear();
					this.b = this.c = -1;
					this.h = !1;
					this.v = null;
					100 > K.length && K.push(this);
				};
				J.prototype.free = J.prototype.Ca;
				J.prototype.Fb = function () {
					return this.O;
				};
				J.prototype.getFieldCursor = J.prototype.Fb;
				J.prototype.B = function () {
					return this.a.B();
				};
				J.prototype.getCursor = J.prototype.B;
				J.prototype.Y = function () {
					return this.a.Y();
				};
				J.prototype.getBuffer = J.prototype.Y;
				J.prototype.Hb = function () {
					return this.c;
				};
				J.prototype.getFieldNumber = J.prototype.Hb;
				J.prototype.Lb = function () {
					return this.b;
				};
				J.prototype.getWireType = J.prototype.Lb;
				J.prototype.Mb = function () {
					return 2 == this.b;
				};
				J.prototype.isDelimited = J.prototype.Mb;
				J.prototype.bb = function () {
					return 4 == this.b;
				};
				J.prototype.isEndGroup = J.prototype.bb;
				J.prototype.getError = function () {
					return this.h || this.a.getError();
				};
				J.prototype.getError = J.prototype.getError;
				J.prototype.H = function (a, b, c) {
					this.a.H(a, b, c);
					this.b = this.c = -1;
				};
				J.prototype.setBlock = J.prototype.H;
				J.prototype.reset = function () {
					this.a.reset();
					this.b = this.c = -1;
				};
				J.prototype.reset = J.prototype.reset;
				J.prototype.advance = function (a) {
					this.a.advance(a);
				};
				J.prototype.advance = J.prototype.advance;
				J.prototype.oa = function () {
					if (this.a.ya()) return !1;
					if (this.getError()) return (p('Decoder hit an error'), !1);
					this.O = this.a.B();
					var a = this.a.o(),
						b = a >>> 3;
					a &= 7;
					if (0 != a && 5 != a && 1 != a && 2 != a && 3 != a && 4 != a)
						return (p('Invalid wire type: %s (at position %s)', a, this.O), (this.h = !0), !1);
					this.c = b;
					this.b = a;
					return !0;
				};
				J.prototype.nextField = J.prototype.oa;
				J.prototype.Oa = function () {
					this.a.mb((this.c << 3) | this.b);
				};
				J.prototype.unskipHeader = J.prototype.Oa;
				J.prototype.Lc = function () {
					var a = this.c;
					for (this.Oa(); this.oa() && this.c == a; ) this.C();
					this.a.ya() || this.Oa();
				};
				J.prototype.skipMatchingFields = J.prototype.Lc;
				J.prototype.lb = function () {
					0 != this.b ? (p('Invalid wire type for skipVarintField'), this.C()) : this.a.kb();
				};
				J.prototype.skipVarintField = J.prototype.lb;
				J.prototype.gb = function () {
					if (2 != this.b) (p('Invalid wire type for skipDelimitedField'), this.C());
					else {
						var a = this.a.o();
						this.a.advance(a);
					}
				};
				J.prototype.skipDelimitedField = J.prototype.gb;
				J.prototype.hb = function () {
					5 != this.b ? (p('Invalid wire type for skipFixed32Field'), this.C()) : this.a.advance(4);
				};
				J.prototype.skipFixed32Field = J.prototype.hb;
				J.prototype.ib = function () {
					1 != this.b ? (p('Invalid wire type for skipFixed64Field'), this.C()) : this.a.advance(8);
				};
				J.prototype.skipFixed64Field = J.prototype.ib;
				J.prototype.jb = function () {
					var a = this.c;
					do {
						if (!this.oa()) {
							p('Unmatched start-group tag: stream EOF');
							this.h = !0;
							break;
						}
						if (4 == this.b) {
							this.c != a && (p('Unmatched end-group tag'), (this.h = !0));
							break;
						}
						this.C();
					} while (1);
				};
				J.prototype.skipGroup = J.prototype.jb;
				J.prototype.C = function () {
					switch (this.b) {
						case 0:
							this.lb();
							break;
						case 1:
							this.ib();
							break;
						case 2:
							this.gb();
							break;
						case 5:
							this.hb();
							break;
						case 3:
							this.jb();
							break;
						default:
							p('Invalid wire encoding for field.');
					}
				};
				J.prototype.skipField = J.prototype.C;
				J.prototype.Hc = function (a, b) {
					null === this.v && (this.v = {});
					n(!this.v[a]);
					this.v[a] = b;
				};
				J.prototype.registerReadCallback = J.prototype.Hc;
				J.prototype.Ic = function (a) {
					n(null !== this.v);
					a = this.v[a];
					n(a);
					return a(this);
				};
				J.prototype.runReadCallback = J.prototype.Ic;
				J.prototype.Yb = function (a, b) {
					n(2 == this.b);
					var c = this.a.c,
						d = this.a.o();
					d = this.a.B() + d;
					this.a.setEnd(d);
					b(a, this);
					this.a.Ma(d);
					this.a.setEnd(c);
				};
				J.prototype.readMessage = J.prototype.Yb;
				J.prototype.Ub = function (a, b, c) {
					n(3 == this.b);
					n(this.c == a);
					c(b, this);
					this.h || 4 == this.b || (p('Group submessage did not end with an END_GROUP tag'), (this.h = !0));
				};
				J.prototype.readGroup = J.prototype.Ub;
				J.prototype.Gb = function () {
					n(2 == this.b);
					var a = this.a.o(),
						b = this.a.B(),
						c = b + a;
					a = Wa(this.a.Y(), b, a);
					this.a.Ma(c);
					return a;
				};
				J.prototype.getFieldDecoder = J.prototype.Gb;
				J.prototype.P = function () {
					n(0 == this.b);
					return this.a.da();
				};
				J.prototype.readInt32 = J.prototype.P;
				J.prototype.Wb = function () {
					n(0 == this.b);
					return this.a.Ea();
				};
				J.prototype.readInt32String = J.prototype.Wb;
				J.prototype.ba = function () {
					n(0 == this.b);
					return this.a.sa();
				};
				J.prototype.readInt64 = J.prototype.ba;
				J.prototype.ca = function () {
					n(0 == this.b);
					return this.a.Fa();
				};
				J.prototype.readInt64String = J.prototype.ca;
				J.prototype.m = function () {
					n(0 == this.b);
					return this.a.o();
				};
				J.prototype.readUint32 = J.prototype.m;
				J.prototype.Fc = function () {
					n(0 == this.b);
					return this.a.O();
				};
				J.prototype.readUint32String = J.prototype.Fc;
				J.prototype.ga = function () {
					n(0 == this.b);
					return this.a.Ga();
				};
				J.prototype.readUint64 = J.prototype.ga;
				J.prototype.ha = function () {
					n(0 == this.b);
					return this.a.Ha();
				};
				J.prototype.readUint64String = J.prototype.ha;
				J.prototype.zc = function () {
					n(0 == this.b);
					return this.a.Ia();
				};
				J.prototype.readSint32 = J.prototype.zc;
				J.prototype.Ac = function () {
					n(0 == this.b);
					return this.a.Ja();
				};
				J.prototype.readSint64 = J.prototype.Ac;
				J.prototype.Bc = function () {
					n(0 == this.b);
					return this.a.Ka();
				};
				J.prototype.readSint64String = J.prototype.Bc;
				J.prototype.Rb = function () {
					n(5 == this.b);
					return this.a.m();
				};
				J.prototype.readFixed32 = J.prototype.Rb;
				J.prototype.Sb = function () {
					n(1 == this.b);
					return this.a.ga();
				};
				J.prototype.readFixed64 = J.prototype.Sb;
				J.prototype.Tb = function () {
					n(1 == this.b);
					return this.a.ha();
				};
				J.prototype.readFixed64String = J.prototype.Tb;
				J.prototype.vc = function () {
					n(5 == this.b);
					return this.a.P();
				};
				J.prototype.readSfixed32 = J.prototype.vc;
				J.prototype.wc = function () {
					n(5 == this.b);
					return this.a.P().toString();
				};
				J.prototype.readSfixed32String = J.prototype.wc;
				J.prototype.xc = function () {
					n(1 == this.b);
					return this.a.ba();
				};
				J.prototype.readSfixed64 = J.prototype.xc;
				J.prototype.yc = function () {
					n(1 == this.b);
					return this.a.ca();
				};
				J.prototype.readSfixed64String = J.prototype.yc;
				J.prototype.aa = function () {
					n(5 == this.b);
					return this.a.aa();
				};
				J.prototype.readFloat = J.prototype.aa;
				J.prototype.Z = function () {
					n(1 == this.b);
					return this.a.Z();
				};
				J.prototype.readDouble = J.prototype.Z;
				J.prototype.pa = function () {
					n(0 == this.b);
					return !!this.a.o();
				};
				J.prototype.readBool = J.prototype.pa;
				J.prototype.ra = function () {
					n(0 == this.b);
					return this.a.sa();
				};
				J.prototype.readEnum = J.prototype.ra;
				J.prototype.fa = function () {
					n(2 == this.b);
					var a = this.a.o();
					return this.a.fa(a);
				};
				J.prototype.readString = J.prototype.fa;
				J.prototype.qa = function () {
					n(2 == this.b);
					var a = this.a.o();
					return this.a.qa(a);
				};
				J.prototype.readBytes = J.prototype.qa;
				J.prototype.ia = function () {
					n(0 == this.b);
					return this.a.ia();
				};
				J.prototype.readVarintHash64 = J.prototype.ia;
				J.prototype.Cc = function () {
					n(0 == this.b);
					return this.a.fb();
				};
				J.prototype.readSintHash64 = J.prototype.Cc;
				J.prototype.w = function (a) {
					n(0 == this.b);
					return this.a.w(a);
				};
				J.prototype.readSplitVarint64 = J.prototype.w;
				J.prototype.ea = function (a) {
					n(0 == this.b);
					return this.a.w(function (b, c) {
						return Ma(b, c, a);
					});
				};
				J.prototype.readSplitZigzagVarint64 = J.prototype.ea;
				J.prototype.$ = function () {
					n(1 == this.b);
					return this.a.$();
				};
				J.prototype.readFixedHash64 = J.prototype.$;
				J.prototype.ta = function (a) {
					n(1 == this.b);
					return this.a.ta(a);
				};
				J.prototype.readSplitFixed64 = J.prototype.ta;
				function L(a, b) {
					n(2 == a.b);
					var c = a.a.o();
					c = a.a.B() + c;
					for (var d = []; a.a.B() < c; ) d.push(b.call(a.a));
					return d;
				}
				J.prototype.gc = function () {
					return L(this, this.a.da);
				};
				J.prototype.readPackedInt32 = J.prototype.gc;
				J.prototype.hc = function () {
					return L(this, this.a.Ea);
				};
				J.prototype.readPackedInt32String = J.prototype.hc;
				J.prototype.ic = function () {
					return L(this, this.a.sa);
				};
				J.prototype.readPackedInt64 = J.prototype.ic;
				J.prototype.jc = function () {
					return L(this, this.a.Fa);
				};
				J.prototype.readPackedInt64String = J.prototype.jc;
				J.prototype.qc = function () {
					return L(this, this.a.o);
				};
				J.prototype.readPackedUint32 = J.prototype.qc;
				J.prototype.rc = function () {
					return L(this, this.a.O);
				};
				J.prototype.readPackedUint32String = J.prototype.rc;
				J.prototype.sc = function () {
					return L(this, this.a.Ga);
				};
				J.prototype.readPackedUint64 = J.prototype.sc;
				J.prototype.tc = function () {
					return L(this, this.a.Ha);
				};
				J.prototype.readPackedUint64String = J.prototype.tc;
				J.prototype.nc = function () {
					return L(this, this.a.Ia);
				};
				J.prototype.readPackedSint32 = J.prototype.nc;
				J.prototype.oc = function () {
					return L(this, this.a.Ja);
				};
				J.prototype.readPackedSint64 = J.prototype.oc;
				J.prototype.pc = function () {
					return L(this, this.a.Ka);
				};
				J.prototype.readPackedSint64String = J.prototype.pc;
				J.prototype.bc = function () {
					return L(this, this.a.m);
				};
				J.prototype.readPackedFixed32 = J.prototype.bc;
				J.prototype.cc = function () {
					return L(this, this.a.ga);
				};
				J.prototype.readPackedFixed64 = J.prototype.cc;
				J.prototype.dc = function () {
					return L(this, this.a.ha);
				};
				J.prototype.readPackedFixed64String = J.prototype.dc;
				J.prototype.kc = function () {
					return L(this, this.a.P);
				};
				J.prototype.readPackedSfixed32 = J.prototype.kc;
				J.prototype.lc = function () {
					return L(this, this.a.ba);
				};
				J.prototype.readPackedSfixed64 = J.prototype.lc;
				J.prototype.mc = function () {
					return L(this, this.a.ca);
				};
				J.prototype.readPackedSfixed64String = J.prototype.mc;
				J.prototype.fc = function () {
					return L(this, this.a.aa);
				};
				J.prototype.readPackedFloat = J.prototype.fc;
				J.prototype.$b = function () {
					return L(this, this.a.Z);
				};
				J.prototype.readPackedDouble = J.prototype.$b;
				J.prototype.Zb = function () {
					return L(this, this.a.pa);
				};
				J.prototype.readPackedBool = J.prototype.Zb;
				J.prototype.ac = function () {
					return L(this, this.a.ra);
				};
				J.prototype.readPackedEnum = J.prototype.ac;
				J.prototype.uc = function () {
					return L(this, this.a.ia);
				};
				J.prototype.readPackedVarintHash64 = J.prototype.uc;
				J.prototype.ec = function () {
					return L(this, this.a.$);
				};
				J.prototype.readPackedFixedHash64 = J.prototype.ec;
				function Ya(a, b, c, d, f) {
					this.ma = a;
					this.Ba = b;
					this.la = c;
					this.Na = d;
					this.na = f;
				}
				g('jspb.ExtensionFieldInfo', Ya, void 0);
				function Za(a, b, c, d, f, h) {
					this.Za = a;
					this.za = b;
					this.Aa = c;
					this.Wa = d;
					this.Ab = f;
					this.Nb = h;
				}
				g('jspb.ExtensionFieldBinaryInfo', Za, void 0);
				Ya.prototype.F = function () {
					return !!this.la;
				};
				Ya.prototype.isMessageType = Ya.prototype.F;
				function N() {}
				g('jspb.Message', N, void 0);
				N.GENERATE_TO_OBJECT = !0;
				N.GENERATE_FROM_OBJECT = !0;
				var $a = 'function' == typeof Uint8Array;
				N.prototype.Ib = function () {
					return this.b;
				};
				N.prototype.getJsPbMessageId = N.prototype.Ib;
				N.initialize = function (a, b, c, d, f, h) {
					a.f = null;
					b || (b = c ? [c] : []);
					a.b = c ? String(c) : void 0;
					a.D = 0 === c ? -1 : 0;
					a.u = b;
					a: {
						c = a.u.length;
						b = -1;
						if (
							c &&
							((b = c - 1),
							(c = a.u[b]),
							!(null === c || 'object' != typeof c || Array.isArray(c) || ($a && c instanceof Uint8Array)))
						) {
							a.G = b - a.D;
							a.i = c;
							break a;
						}
						-1 < d ? ((a.G = Math.max(d, b + 1 - a.D)), (a.i = null)) : (a.G = Number.MAX_VALUE);
					}
					a.a = {};
					if (f)
						for (d = 0; d < f.length; d++)
							((b = f[d]), b < a.G ? ((b += a.D), (a.u[b] = a.u[b] || ab)) : (bb(a), (a.i[b] = a.i[b] || ab)));
					if (h && h.length) for (d = 0; d < h.length; d++) cb(a, h[d]);
				};
				var ab = Object.freeze ? Object.freeze([]) : [];
				function bb(a) {
					var b = a.G + a.D;
					a.u[b] || (a.i = a.u[b] = {});
				}
				function db(a, b, c) {
					for (var d = [], f = 0; f < a.length; f++) d[f] = b.call(a[f], c, a[f]);
					return d;
				}
				N.toObjectList = db;
				N.toObjectExtension = function (a, b, c, d, f) {
					for (var h in c) {
						var m = c[h],
							t = d.call(a, m);
						if (null != t) {
							for (var B in m.Ba) if (m.Ba.hasOwnProperty(B)) break;
							b[B] = m.Na ? (m.na ? db(t, m.Na, f) : m.Na(f, t)) : t;
						}
					}
				};
				N.serializeBinaryExtensions = function (a, b, c, d) {
					for (var f in c) {
						var h = c[f],
							m = h.Za;
						if (!h.Aa) throw Error('Message extension present that was generated without binary serialization support');
						var t = d.call(a, m);
						if (null != t)
							if (m.F())
								if (h.Wa) h.Aa.call(b, m.ma, t, h.Wa);
								else
									throw Error(
										'Message extension present holding submessage without binary support enabled, and message is being serialized to binary format'
									);
							else h.Aa.call(b, m.ma, t);
					}
				};
				N.readBinaryExtension = function (a, b, c, d, f) {
					var h = c[b.c];
					if (h) {
						c = h.Za;
						if (!h.za) throw Error('Deserializing extension whose generated code does not support binary format');
						if (c.F()) {
							var m = new c.la();
							h.za.call(b, m, h.Ab);
						} else m = h.za.call(b);
						c.na && !h.Nb ? ((b = d.call(a, c)) ? b.push(m) : f.call(a, c, [m])) : f.call(a, c, m);
					} else b.C();
				};
				function O(a, b) {
					if (b < a.G) {
						b += a.D;
						var c = a.u[b];
						return c === ab ? (a.u[b] = []) : c;
					}
					if (a.i) return ((c = a.i[b]), c === ab ? (a.i[b] = []) : c);
				}
				N.getField = O;
				N.getRepeatedField = function (a, b) {
					return O(a, b);
				};
				function eb(a, b) {
					a = O(a, b);
					return null == a ? a : +a;
				}
				N.getOptionalFloatingPointField = eb;
				function fb(a, b) {
					a = O(a, b);
					return null == a ? a : !!a;
				}
				N.getBooleanField = fb;
				N.getRepeatedFloatingPointField = function (a, b) {
					var c = O(a, b);
					a.a || (a.a = {});
					if (!a.a[b]) {
						for (var d = 0; d < c.length; d++) c[d] = +c[d];
						a.a[b] = !0;
					}
					return c;
				};
				N.getRepeatedBooleanField = function (a, b) {
					var c = O(a, b);
					a.a || (a.a = {});
					if (!a.a[b]) {
						for (var d = 0; d < c.length; d++) c[d] = !!c[d];
						a.a[b] = !0;
					}
					return c;
				};
				function gb(a) {
					if (null == a || 'string' === typeof a) return a;
					if ($a && a instanceof Uint8Array) return Ba(a);
					p('Cannot coerce to b64 string: ' + k(a));
					return null;
				}
				N.bytesAsB64 = gb;
				function hb(a) {
					if (null == a || a instanceof Uint8Array) return a;
					if ('string' === typeof a) return Da(a);
					p('Cannot coerce to Uint8Array: ' + k(a));
					return null;
				}
				N.bytesAsU8 = hb;
				N.bytesListAsB64 = function (a) {
					ib(a);
					return a.length && 'string' !== typeof a[0] ? l(a, gb) : a;
				};
				N.bytesListAsU8 = function (a) {
					ib(a);
					return !a.length || a[0] instanceof Uint8Array ? a : l(a, hb);
				};
				function ib(a) {
					if (a && 1 < a.length) {
						var b = k(a[0]);
						qa(a, function (c) {
							k(c) != b && p('Inconsistent type in JSPB repeated field array. Got ' + k(c) + ' expected ' + b);
						});
					}
				}
				function jb(a, b, c) {
					a = O(a, b);
					return null == a ? c : a;
				}
				N.getFieldWithDefault = jb;
				N.getBooleanFieldWithDefault = function (a, b, c) {
					a = fb(a, b);
					return null == a ? c : a;
				};
				N.getFloatingPointFieldWithDefault = function (a, b, c) {
					a = eb(a, b);
					return null == a ? c : a;
				};
				N.getFieldProto3 = jb;
				N.getMapField = function (a, b, c, d) {
					a.f || (a.f = {});
					if (b in a.f) return a.f[b];
					var f = O(a, b);
					if (!f) {
						if (c) return;
						f = [];
						P(a, b, f);
					}
					return (a.f[b] = new r(f, d));
				};
				function P(a, b, c) {
					q(a, N);
					b < a.G ? (a.u[b + a.D] = c) : (bb(a), (a.i[b] = c));
					return a;
				}
				N.setField = P;
				N.setProto3IntField = function (a, b, c) {
					return Q(a, b, c, 0);
				};
				N.setProto3FloatField = function (a, b, c) {
					return Q(a, b, c, 0);
				};
				N.setProto3BooleanField = function (a, b, c) {
					return Q(a, b, c, !1);
				};
				N.setProto3StringField = function (a, b, c) {
					return Q(a, b, c, '');
				};
				N.setProto3BytesField = function (a, b, c) {
					return Q(a, b, c, '');
				};
				N.setProto3EnumField = function (a, b, c) {
					return Q(a, b, c, 0);
				};
				N.setProto3StringIntField = function (a, b, c) {
					return Q(a, b, c, '0');
				};
				function Q(a, b, c, d) {
					q(a, N);
					c !== d ? P(a, b, c) : b < a.G ? (a.u[b + a.D] = null) : (bb(a), delete a.i[b]);
					return a;
				}
				N.addToRepeatedField = function (a, b, c, d) {
					q(a, N);
					b = O(a, b);
					void 0 != d ? b.splice(d, 0, c) : b.push(c);
					return a;
				};
				function kb(a, b, c, d) {
					q(a, N);
					(c = cb(a, c)) && c !== b && void 0 !== d && (a.f && c in a.f && (a.f[c] = void 0), P(a, c, void 0));
					return P(a, b, d);
				}
				N.setOneofField = kb;
				function cb(a, b) {
					for (var c, d, f = 0; f < b.length; f++) {
						var h = b[f],
							m = O(a, h);
						null != m && ((c = h), (d = m), P(a, h, void 0));
					}
					return c ? (P(a, c, d), c) : 0;
				}
				N.computeOneofCase = cb;
				N.getWrapperField = function (a, b, c, d) {
					a.f || (a.f = {});
					if (!a.f[c]) {
						var f = O(a, c);
						if (d || f) a.f[c] = new b(f);
					}
					return a.f[c];
				};
				N.getRepeatedWrapperField = function (a, b, c) {
					lb(a, b, c);
					b = a.f[c];
					b == ab && (b = a.f[c] = []);
					return b;
				};
				function lb(a, b, c) {
					a.f || (a.f = {});
					if (!a.f[c]) {
						for (var d = O(a, c), f = [], h = 0; h < d.length; h++) f[h] = new b(d[h]);
						a.f[c] = f;
					}
				}
				N.setWrapperField = function (a, b, c) {
					q(a, N);
					a.f || (a.f = {});
					var d = c ? c.g() : c;
					a.f[b] = c;
					return P(a, b, d);
				};
				N.setOneofWrapperField = function (a, b, c, d) {
					q(a, N);
					a.f || (a.f = {});
					var f = d ? d.g() : d;
					a.f[b] = d;
					return kb(a, b, c, f);
				};
				N.setRepeatedWrapperField = function (a, b, c) {
					q(a, N);
					a.f || (a.f = {});
					c = c || [];
					for (var d = [], f = 0; f < c.length; f++) d[f] = c[f].g();
					a.f[b] = c;
					return P(a, b, d);
				};
				N.addToRepeatedWrapperField = function (a, b, c, d, f) {
					lb(a, d, b);
					var h = a.f[b];
					h || (h = a.f[b] = []);
					c = c ? c : new d();
					a = O(a, b);
					void 0 != f ? (h.splice(f, 0, c), a.splice(f, 0, c.g())) : (h.push(c), a.push(c.g()));
					return c;
				};
				N.toMap = function (a, b, c, d) {
					for (var f = {}, h = 0; h < a.length; h++) f[b.call(a[h])] = c ? c.call(a[h], d, a[h]) : a[h];
					return f;
				};
				function mb(a) {
					if (a.f)
						for (var b in a.f) {
							var c = a.f[b];
							if (Array.isArray(c)) for (var d = 0; d < c.length; d++) c[d] && c[d].g();
							else c && c.g();
						}
				}
				N.prototype.g = function () {
					mb(this);
					return this.u;
				};
				N.prototype.toArray = N.prototype.g;
				N.prototype.toString = function () {
					mb(this);
					return this.u.toString();
				};
				N.prototype.getExtension = function (a) {
					if (this.i) {
						this.f || (this.f = {});
						var b = a.ma;
						if (a.na) {
							if (a.F())
								return (
									this.f[b] ||
										(this.f[b] = l(this.i[b] || [], function (c) {
											return new a.la(c);
										})),
									this.f[b]
								);
						} else if (a.F()) return (!this.f[b] && this.i[b] && (this.f[b] = new a.la(this.i[b])), this.f[b]);
						return this.i[b];
					}
				};
				N.prototype.getExtension = N.prototype.getExtension;
				N.prototype.Kc = function (a, b) {
					this.f || (this.f = {});
					bb(this);
					var c = a.ma;
					a.na
						? ((b = b || []),
							a.F()
								? ((this.f[c] = b),
									(this.i[c] = l(b, function (d) {
										return d.g();
									})))
								: (this.i[c] = b))
						: a.F()
							? ((this.f[c] = b), (this.i[c] = b ? b.g() : b))
							: (this.i[c] = b);
					return this;
				};
				N.prototype.setExtension = N.prototype.Kc;
				N.difference = function (a, b) {
					if (!(a instanceof b.constructor)) throw Error('Messages have different types.');
					var c = a.g();
					b = b.g();
					var d = [],
						f = 0,
						h = c.length > b.length ? c.length : b.length;
					a.b && ((d[0] = a.b), (f = 1));
					for (; f < h; f++) nb(c[f], b[f]) || (d[f] = b[f]);
					return new a.constructor(d);
				};
				N.equals = function (a, b) {
					return a == b || (!(!a || !b) && a instanceof b.constructor && nb(a.g(), b.g()));
				};
				function ob(a, b) {
					a = a || {};
					b = b || {};
					var c = {},
						d;
					for (d in a) c[d] = 0;
					for (d in b) c[d] = 0;
					for (d in c) if (!nb(a[d], b[d])) return !1;
					return !0;
				}
				N.compareExtensions = ob;
				function nb(a, b) {
					if (a == b) return !0;
					if (!la(a) || !la(b))
						return ('number' === typeof a && isNaN(a)) || ('number' === typeof b && isNaN(b))
							? String(a) == String(b)
							: !1;
					if (a.constructor != b.constructor) return !1;
					if ($a && a.constructor === Uint8Array) {
						if (a.length != b.length) return !1;
						for (var c = 0; c < a.length; c++) if (a[c] != b[c]) return !1;
						return !0;
					}
					if (a.constructor === Array) {
						var d = void 0,
							f = void 0,
							h = Math.max(a.length, b.length);
						for (c = 0; c < h; c++) {
							var m = a[c],
								t = b[c];
							m && m.constructor == Object && (n(void 0 === d), n(c === a.length - 1), (d = m), (m = void 0));
							t && t.constructor == Object && (n(void 0 === f), n(c === b.length - 1), (f = t), (t = void 0));
							if (!nb(m, t)) return !1;
						}
						return d || f ? ((d = d || {}), (f = f || {}), ob(d, f)) : !0;
					}
					if (a.constructor === Object) return ob(a, b);
					throw Error('Invalid type in JSPB array');
				}
				N.compareFields = nb;
				N.prototype.Bb = function () {
					return pb(this);
				};
				N.prototype.cloneMessage = N.prototype.Bb;
				N.prototype.clone = function () {
					return pb(this);
				};
				N.prototype.clone = N.prototype.clone;
				N.clone = function (a) {
					return pb(a);
				};
				function pb(a) {
					return new a.constructor(qb(a.g()));
				}
				N.copyInto = function (a, b) {
					q(a, N);
					q(b, N);
					n(a.constructor == b.constructor, 'Copy source and target message should have the same type.');
					a = pb(a);
					for (var c = b.g(), d = a.g(), f = (c.length = 0); f < d.length; f++) c[f] = d[f];
					b.f = a.f;
					b.i = a.i;
				};
				function qb(a) {
					if (Array.isArray(a)) {
						for (var b = Array(a.length), c = 0; c < a.length; c++) {
							var d = a[c];
							null != d && (b[c] = 'object' == typeof d ? qb(n(d)) : d);
						}
						return b;
					}
					if ($a && a instanceof Uint8Array) return new Uint8Array(a);
					b = {};
					for (c in a) ((d = a[c]), null != d && (b[c] = 'object' == typeof d ? qb(n(d)) : d));
					return b;
				}
				N.registerMessageType = function (a, b) {
					b.we = a;
				};
				var R = {
					dump: function (a) {
						q(a, N, 'jspb.Message instance expected');
						n(a.getExtension, 'Only unobfuscated and unoptimized compilation modes supported.');
						return R.X(a);
					}
				};
				g('jspb.debug.dump', R.dump, void 0);
				R.X = function (a) {
					var b = k(a);
					if (
						'number' == b ||
						'string' == b ||
						'boolean' == b ||
						'null' == b ||
						'undefined' == b ||
						('undefined' !== typeof Uint8Array && a instanceof Uint8Array)
					)
						return a;
					if ('array' == b) return (ua(a), l(a, R.X));
					if (a instanceof r) {
						var c = {};
						a = a.entries();
						for (var d = a.next(); !d.done; d = a.next()) c[d.value[0]] = R.X(d.value[1]);
						return c;
					}
					q(a, N, 'Only messages expected: ' + a);
					b = a.constructor;
					var f = { $name: b.name || b.displayName };
					for (t in b.prototype) {
						var h = /^get([A-Z]\w*)/.exec(t);
						if (h && 'getExtension' != t && 'getJsPbMessageId' != t) {
							var m = 'has' + h[1];
							if (!a[m] || a[m]()) ((m = a[t]()), (f[R.$a(h[1])] = R.X(m)));
						}
					}
					if (a.extensionObject_)
						return (
							(f.$extensions =
								'Recursive dumping of extensions not supported in compiled code. Switch to uncompiled or dump extension object directly'),
							f
						);
					for (d in b.extensions)
						if (/^\d+$/.test(d)) {
							m = b.extensions[d];
							var t = a.getExtension(m);
							h = void 0;
							m = m.Ba;
							var B = [],
								M = 0;
							for (h in m) B[M++] = h;
							h = B[0];
							null != t && (c || (c = f.$extensions = {}), (c[R.$a(h)] = R.X(t)));
						}
					return f;
				};
				R.$a = function (a) {
					return a.replace(/^[A-Z]/, function (b) {
						return b.toLowerCase();
					});
				};
				function S() {
					this.a = [];
				}
				g('jspb.BinaryEncoder', S, void 0);
				S.prototype.length = function () {
					return this.a.length;
				};
				S.prototype.length = S.prototype.length;
				S.prototype.end = function () {
					var a = this.a;
					this.a = [];
					return a;
				};
				S.prototype.end = S.prototype.end;
				S.prototype.l = function (a, b) {
					n(a == Math.floor(a));
					n(b == Math.floor(b));
					n(0 <= a && 4294967296 > a);
					for (n(0 <= b && 4294967296 > b); 0 < b || 127 < a; )
						(this.a.push((a & 127) | 128), (a = ((a >>> 7) | (b << 25)) >>> 0), (b >>>= 7));
					this.a.push(a);
				};
				S.prototype.writeSplitVarint64 = S.prototype.l;
				S.prototype.A = function (a, b) {
					n(a == Math.floor(a));
					n(b == Math.floor(b));
					n(0 <= a && 4294967296 > a);
					n(0 <= b && 4294967296 > b);
					this.s(a);
					this.s(b);
				};
				S.prototype.writeSplitFixed64 = S.prototype.A;
				S.prototype.j = function (a) {
					n(a == Math.floor(a));
					for (n(0 <= a && 4294967296 > a); 127 < a; ) (this.a.push((a & 127) | 128), (a >>>= 7));
					this.a.push(a);
				};
				S.prototype.writeUnsignedVarint32 = S.prototype.j;
				S.prototype.M = function (a) {
					n(a == Math.floor(a));
					n(-2147483648 <= a && 2147483648 > a);
					if (0 <= a) this.j(a);
					else {
						for (var b = 0; 9 > b; b++) (this.a.push((a & 127) | 128), (a >>= 7));
						this.a.push(1);
					}
				};
				S.prototype.writeSignedVarint32 = S.prototype.M;
				S.prototype.va = function (a) {
					n(a == Math.floor(a));
					n(0 <= a && 1.8446744073709552e19 > a);
					A(a);
					this.l(y, z);
				};
				S.prototype.writeUnsignedVarint64 = S.prototype.va;
				S.prototype.ua = function (a) {
					n(a == Math.floor(a));
					n(-9223372036854775808 <= a && 0x7fffffffffffffff > a);
					A(a);
					this.l(y, z);
				};
				S.prototype.writeSignedVarint64 = S.prototype.ua;
				S.prototype.wa = function (a) {
					n(a == Math.floor(a));
					n(-2147483648 <= a && 2147483648 > a);
					this.j(((a << 1) ^ (a >> 31)) >>> 0);
				};
				S.prototype.writeZigzagVarint32 = S.prototype.wa;
				S.prototype.xa = function (a) {
					n(a == Math.floor(a));
					n(-9223372036854775808 <= a && 0x7fffffffffffffff > a);
					Ga(a);
					this.l(y, z);
				};
				S.prototype.writeZigzagVarint64 = S.prototype.xa;
				S.prototype.Ta = function (a) {
					this.W(H(a));
				};
				S.prototype.writeZigzagVarint64String = S.prototype.Ta;
				S.prototype.W = function (a) {
					var b = this;
					C(a);
					Ja(y, z, function (c, d) {
						b.l(c >>> 0, d >>> 0);
					});
				};
				S.prototype.writeZigzagVarintHash64 = S.prototype.W;
				S.prototype.be = function (a) {
					n(a == Math.floor(a));
					n(0 <= a && 256 > a);
					this.a.push((a >>> 0) & 255);
				};
				S.prototype.writeUint8 = S.prototype.be;
				S.prototype.ae = function (a) {
					n(a == Math.floor(a));
					n(0 <= a && 65536 > a);
					this.a.push((a >>> 0) & 255);
					this.a.push((a >>> 8) & 255);
				};
				S.prototype.writeUint16 = S.prototype.ae;
				S.prototype.s = function (a) {
					n(a == Math.floor(a));
					n(0 <= a && 4294967296 > a);
					this.a.push((a >>> 0) & 255);
					this.a.push((a >>> 8) & 255);
					this.a.push((a >>> 16) & 255);
					this.a.push((a >>> 24) & 255);
				};
				S.prototype.writeUint32 = S.prototype.s;
				S.prototype.V = function (a) {
					n(a == Math.floor(a));
					n(0 <= a && 1.8446744073709552e19 > a);
					Fa(a);
					this.s(y);
					this.s(z);
				};
				S.prototype.writeUint64 = S.prototype.V;
				S.prototype.Qc = function (a) {
					n(a == Math.floor(a));
					n(-128 <= a && 128 > a);
					this.a.push((a >>> 0) & 255);
				};
				S.prototype.writeInt8 = S.prototype.Qc;
				S.prototype.Pc = function (a) {
					n(a == Math.floor(a));
					n(-32768 <= a && 32768 > a);
					this.a.push((a >>> 0) & 255);
					this.a.push((a >>> 8) & 255);
				};
				S.prototype.writeInt16 = S.prototype.Pc;
				S.prototype.S = function (a) {
					n(a == Math.floor(a));
					n(-2147483648 <= a && 2147483648 > a);
					this.a.push((a >>> 0) & 255);
					this.a.push((a >>> 8) & 255);
					this.a.push((a >>> 16) & 255);
					this.a.push((a >>> 24) & 255);
				};
				S.prototype.writeInt32 = S.prototype.S;
				S.prototype.T = function (a) {
					n(a == Math.floor(a));
					n(-9223372036854775808 <= a && 0x7fffffffffffffff > a);
					A(a);
					this.A(y, z);
				};
				S.prototype.writeInt64 = S.prototype.T;
				S.prototype.ka = function (a) {
					n(a == Math.floor(a));
					n(-9223372036854775808 <= +a && 0x7fffffffffffffff > +a);
					C(H(a));
					this.A(y, z);
				};
				S.prototype.writeInt64String = S.prototype.ka;
				S.prototype.L = function (a) {
					n(
						Infinity === a || -Infinity === a || isNaN(a) || (-3.4028234663852886e38 <= a && 3.4028234663852886e38 >= a)
					);
					Ha(a);
					this.s(y);
				};
				S.prototype.writeFloat = S.prototype.L;
				S.prototype.J = function (a) {
					n(
						Infinity === a ||
							-Infinity === a ||
							isNaN(a) ||
							(-1.7976931348623157e308 <= a && 1.7976931348623157e308 >= a)
					);
					Ia(a);
					this.s(y);
					this.s(z);
				};
				S.prototype.writeDouble = S.prototype.J;
				S.prototype.I = function (a) {
					n('boolean' === typeof a || 'number' === typeof a);
					this.a.push(a ? 1 : 0);
				};
				S.prototype.writeBool = S.prototype.I;
				S.prototype.R = function (a) {
					n(a == Math.floor(a));
					n(-2147483648 <= a && 2147483648 > a);
					this.M(a);
				};
				S.prototype.writeEnum = S.prototype.R;
				S.prototype.ja = function (a) {
					this.a.push.apply(this.a, a);
				};
				S.prototype.writeBytes = S.prototype.ja;
				S.prototype.N = function (a) {
					C(a);
					this.l(y, z);
				};
				S.prototype.writeVarintHash64 = S.prototype.N;
				S.prototype.K = function (a) {
					C(a);
					this.s(y);
					this.s(z);
				};
				S.prototype.writeFixedHash64 = S.prototype.K;
				S.prototype.U = function (a) {
					var b = this.a.length;
					ta(a);
					for (var c = 0; c < a.length; c++) {
						var d = a.charCodeAt(c);
						if (128 > d) this.a.push(d);
						else if (2048 > d) (this.a.push((d >> 6) | 192), this.a.push((d & 63) | 128));
						else if (65536 > d)
							if (55296 <= d && 56319 >= d && c + 1 < a.length) {
								var f = a.charCodeAt(c + 1);
								56320 <= f &&
									57343 >= f &&
									((d = 1024 * (d - 55296) + f - 56320 + 65536),
									this.a.push((d >> 18) | 240),
									this.a.push(((d >> 12) & 63) | 128),
									this.a.push(((d >> 6) & 63) | 128),
									this.a.push((d & 63) | 128),
									c++);
							} else (this.a.push((d >> 12) | 224), this.a.push(((d >> 6) & 63) | 128), this.a.push((d & 63) | 128));
					}
					return this.a.length - b;
				};
				S.prototype.writeString = S.prototype.U;
				function T(a, b) {
					this.lo = a;
					this.hi = b;
				}
				g('jspb.arith.UInt64', T, void 0);
				T.prototype.cmp = function (a) {
					return this.hi < a.hi || (this.hi == a.hi && this.lo < a.lo)
						? -1
						: this.hi == a.hi && this.lo == a.lo
							? 0
							: 1;
				};
				T.prototype.cmp = T.prototype.cmp;
				T.prototype.La = function () {
					return new T(((this.lo >>> 1) | ((this.hi & 1) << 31)) >>> 0, (this.hi >>> 1) >>> 0);
				};
				T.prototype.rightShift = T.prototype.La;
				T.prototype.Da = function () {
					return new T((this.lo << 1) >>> 0, ((this.hi << 1) | (this.lo >>> 31)) >>> 0);
				};
				T.prototype.leftShift = T.prototype.Da;
				T.prototype.cb = function () {
					return !!(this.hi & 2147483648);
				};
				T.prototype.msb = T.prototype.cb;
				T.prototype.Ob = function () {
					return !!(this.lo & 1);
				};
				T.prototype.lsb = T.prototype.Ob;
				T.prototype.Ua = function () {
					return 0 == this.lo && 0 == this.hi;
				};
				T.prototype.zero = T.prototype.Ua;
				T.prototype.add = function (a) {
					return new T(
						(((this.lo + a.lo) & 4294967295) >>> 0) >>> 0,
						((((this.hi + a.hi) & 4294967295) >>> 0) + (4294967296 <= this.lo + a.lo ? 1 : 0)) >>> 0
					);
				};
				T.prototype.add = T.prototype.add;
				T.prototype.sub = function (a) {
					return new T(
						(((this.lo - a.lo) & 4294967295) >>> 0) >>> 0,
						((((this.hi - a.hi) & 4294967295) >>> 0) - (0 > this.lo - a.lo ? 1 : 0)) >>> 0
					);
				};
				T.prototype.sub = T.prototype.sub;
				function rb(a, b) {
					var c = a & 65535;
					a >>>= 16;
					var d = b & 65535,
						f = b >>> 16;
					b = c * d + 65536 * ((c * f) & 65535) + 65536 * ((a * d) & 65535);
					for (c = a * f + ((c * f) >>> 16) + ((a * d) >>> 16); 4294967296 <= b; ) ((b -= 4294967296), (c += 1));
					return new T(b >>> 0, c >>> 0);
				}
				T.mul32x32 = rb;
				T.prototype.eb = function (a) {
					var b = rb(this.lo, a);
					a = rb(this.hi, a);
					a.hi = a.lo;
					a.lo = 0;
					return b.add(a);
				};
				T.prototype.mul = T.prototype.eb;
				T.prototype.Xa = function (a) {
					if (0 == a) return [];
					var b = new T(0, 0),
						c = new T(this.lo, this.hi);
					a = new T(a, 0);
					for (var d = new T(1, 0); !a.cb(); ) ((a = a.Da()), (d = d.Da()));
					for (; !d.Ua(); ) (0 >= a.cmp(c) && ((b = b.add(d)), (c = c.sub(a))), (a = a.La()), (d = d.La()));
					return [b, c];
				};
				T.prototype.div = T.prototype.Xa;
				T.prototype.toString = function () {
					for (var a = '', b = this; !b.Ua(); ) {
						b = b.Xa(10);
						var c = b[0];
						a = b[1].lo + a;
						b = c;
					}
					'' == a && (a = '0');
					return a;
				};
				T.prototype.toString = T.prototype.toString;
				function U(a) {
					for (var b = new T(0, 0), c = new T(0, 0), d = 0; d < a.length; d++) {
						if ('0' > a[d] || '9' < a[d]) return null;
						c.lo = parseInt(a[d], 10);
						b = b.eb(10).add(c);
					}
					return b;
				}
				T.fromString = U;
				T.prototype.clone = function () {
					return new T(this.lo, this.hi);
				};
				T.prototype.clone = T.prototype.clone;
				function V(a, b) {
					this.lo = a;
					this.hi = b;
				}
				g('jspb.arith.Int64', V, void 0);
				V.prototype.add = function (a) {
					return new V(
						(((this.lo + a.lo) & 4294967295) >>> 0) >>> 0,
						((((this.hi + a.hi) & 4294967295) >>> 0) + (4294967296 <= this.lo + a.lo ? 1 : 0)) >>> 0
					);
				};
				V.prototype.add = V.prototype.add;
				V.prototype.sub = function (a) {
					return new V(
						(((this.lo - a.lo) & 4294967295) >>> 0) >>> 0,
						((((this.hi - a.hi) & 4294967295) >>> 0) - (0 > this.lo - a.lo ? 1 : 0)) >>> 0
					);
				};
				V.prototype.sub = V.prototype.sub;
				V.prototype.clone = function () {
					return new V(this.lo, this.hi);
				};
				V.prototype.clone = V.prototype.clone;
				V.prototype.toString = function () {
					var a = 0 != (this.hi & 2147483648),
						b = new T(this.lo, this.hi);
					a && (b = new T(0, 0).sub(b));
					return (a ? '-' : '') + b.toString();
				};
				V.prototype.toString = V.prototype.toString;
				function sb(a) {
					var b = 0 < a.length && '-' == a[0];
					b && (a = a.substring(1));
					a = U(a);
					if (null === a) return null;
					b && (a = new T(0, 0).sub(a));
					return new V(a.lo, a.hi);
				}
				V.fromString = sb;
				function W() {
					this.c = [];
					this.b = 0;
					this.a = new S();
					this.h = [];
				}
				g('jspb.BinaryWriter', W, void 0);
				function tb(a, b) {
					var c = a.a.end();
					a.c.push(c);
					a.c.push(b);
					a.b += c.length + b.length;
				}
				function X(a, b) {
					Y(a, b, 2);
					b = a.a.end();
					a.c.push(b);
					a.b += b.length;
					b.push(a.b);
					return b;
				}
				function Z(a, b) {
					var c = b.pop();
					c = a.b + a.a.length() - c;
					for (n(0 <= c); 127 < c; ) (b.push((c & 127) | 128), (c >>>= 7), a.b++);
					b.push(c);
					a.b++;
				}
				W.prototype.pb = function (a, b, c) {
					tb(this, a.subarray(b, c));
				};
				W.prototype.writeSerializedMessage = W.prototype.pb;
				W.prototype.Pb = function (a, b, c) {
					null != a && null != b && null != c && this.pb(a, b, c);
				};
				W.prototype.maybeWriteSerializedMessage = W.prototype.Pb;
				W.prototype.reset = function () {
					this.c = [];
					this.a.end();
					this.b = 0;
					this.h = [];
				};
				W.prototype.reset = W.prototype.reset;
				W.prototype.ab = function () {
					n(0 == this.h.length);
					for (var a = new Uint8Array(this.b + this.a.length()), b = this.c, c = b.length, d = 0, f = 0; f < c; f++) {
						var h = b[f];
						a.set(h, d);
						d += h.length;
					}
					b = this.a.end();
					a.set(b, d);
					d += b.length;
					n(d == a.length);
					this.c = [a];
					return a;
				};
				W.prototype.getResultBuffer = W.prototype.ab;
				W.prototype.Kb = function (a) {
					return Ba(this.ab(), a);
				};
				W.prototype.getResultBase64String = W.prototype.Kb;
				W.prototype.Va = function (a) {
					this.h.push(X(this, a));
				};
				W.prototype.beginSubMessage = W.prototype.Va;
				W.prototype.Ya = function () {
					n(0 <= this.h.length);
					Z(this, this.h.pop());
				};
				W.prototype.endSubMessage = W.prototype.Ya;
				function Y(a, b, c) {
					n(1 <= b && b == Math.floor(b));
					a.a.j(8 * b + c);
				}
				W.prototype.Nc = function (a, b, c) {
					switch (a) {
						case 1:
							this.J(b, c);
							break;
						case 2:
							this.L(b, c);
							break;
						case 3:
							this.T(b, c);
							break;
						case 4:
							this.V(b, c);
							break;
						case 5:
							this.S(b, c);
							break;
						case 6:
							this.Qa(b, c);
							break;
						case 7:
							this.Pa(b, c);
							break;
						case 8:
							this.I(b, c);
							break;
						case 9:
							this.U(b, c);
							break;
						case 10:
							p('Group field type not supported in writeAny()');
							break;
						case 11:
							p('Message field type not supported in writeAny()');
							break;
						case 12:
							this.ja(b, c);
							break;
						case 13:
							this.s(b, c);
							break;
						case 14:
							this.R(b, c);
							break;
						case 15:
							this.Ra(b, c);
							break;
						case 16:
							this.Sa(b, c);
							break;
						case 17:
							this.rb(b, c);
							break;
						case 18:
							this.sb(b, c);
							break;
						case 30:
							this.K(b, c);
							break;
						case 31:
							this.N(b, c);
							break;
						default:
							p('Invalid field type in writeAny()');
					}
				};
				W.prototype.writeAny = W.prototype.Nc;
				function ub(a, b, c) {
					null != c && (Y(a, b, 0), a.a.j(c));
				}
				function vb(a, b, c) {
					null != c && (Y(a, b, 0), a.a.M(c));
				}
				W.prototype.S = function (a, b) {
					null != b && (n(-2147483648 <= b && 2147483648 > b), vb(this, a, b));
				};
				W.prototype.writeInt32 = W.prototype.S;
				W.prototype.ob = function (a, b) {
					null != b && ((b = parseInt(b, 10)), n(-2147483648 <= b && 2147483648 > b), vb(this, a, b));
				};
				W.prototype.writeInt32String = W.prototype.ob;
				W.prototype.T = function (a, b) {
					null != b &&
						(n(-9223372036854775808 <= b && 0x7fffffffffffffff > b), null != b && (Y(this, a, 0), this.a.ua(b)));
				};
				W.prototype.writeInt64 = W.prototype.T;
				W.prototype.ka = function (a, b) {
					null != b && ((b = sb(b)), Y(this, a, 0), this.a.l(b.lo, b.hi));
				};
				W.prototype.writeInt64String = W.prototype.ka;
				W.prototype.s = function (a, b) {
					null != b && (n(0 <= b && 4294967296 > b), ub(this, a, b));
				};
				W.prototype.writeUint32 = W.prototype.s;
				W.prototype.ub = function (a, b) {
					null != b && ((b = parseInt(b, 10)), n(0 <= b && 4294967296 > b), ub(this, a, b));
				};
				W.prototype.writeUint32String = W.prototype.ub;
				W.prototype.V = function (a, b) {
					null != b && (n(0 <= b && 1.8446744073709552e19 > b), null != b && (Y(this, a, 0), this.a.va(b)));
				};
				W.prototype.writeUint64 = W.prototype.V;
				W.prototype.vb = function (a, b) {
					null != b && ((b = U(b)), Y(this, a, 0), this.a.l(b.lo, b.hi));
				};
				W.prototype.writeUint64String = W.prototype.vb;
				W.prototype.rb = function (a, b) {
					null != b && (n(-2147483648 <= b && 2147483648 > b), null != b && (Y(this, a, 0), this.a.wa(b)));
				};
				W.prototype.writeSint32 = W.prototype.rb;
				W.prototype.sb = function (a, b) {
					null != b &&
						(n(-9223372036854775808 <= b && 0x7fffffffffffffff > b), null != b && (Y(this, a, 0), this.a.xa(b)));
				};
				W.prototype.writeSint64 = W.prototype.sb;
				W.prototype.$d = function (a, b) {
					null != b && null != b && (Y(this, a, 0), this.a.W(b));
				};
				W.prototype.writeSintHash64 = W.prototype.$d;
				W.prototype.Zd = function (a, b) {
					null != b && null != b && (Y(this, a, 0), this.a.Ta(b));
				};
				W.prototype.writeSint64String = W.prototype.Zd;
				W.prototype.Pa = function (a, b) {
					null != b && (n(0 <= b && 4294967296 > b), Y(this, a, 5), this.a.s(b));
				};
				W.prototype.writeFixed32 = W.prototype.Pa;
				W.prototype.Qa = function (a, b) {
					null != b && (n(0 <= b && 1.8446744073709552e19 > b), Y(this, a, 1), this.a.V(b));
				};
				W.prototype.writeFixed64 = W.prototype.Qa;
				W.prototype.nb = function (a, b) {
					null != b && ((b = U(b)), Y(this, a, 1), this.a.A(b.lo, b.hi));
				};
				W.prototype.writeFixed64String = W.prototype.nb;
				W.prototype.Ra = function (a, b) {
					null != b && (n(-2147483648 <= b && 2147483648 > b), Y(this, a, 5), this.a.S(b));
				};
				W.prototype.writeSfixed32 = W.prototype.Ra;
				W.prototype.Sa = function (a, b) {
					null != b && (n(-9223372036854775808 <= b && 0x7fffffffffffffff > b), Y(this, a, 1), this.a.T(b));
				};
				W.prototype.writeSfixed64 = W.prototype.Sa;
				W.prototype.qb = function (a, b) {
					null != b && ((b = sb(b)), Y(this, a, 1), this.a.A(b.lo, b.hi));
				};
				W.prototype.writeSfixed64String = W.prototype.qb;
				W.prototype.L = function (a, b) {
					null != b && (Y(this, a, 5), this.a.L(b));
				};
				W.prototype.writeFloat = W.prototype.L;
				W.prototype.J = function (a, b) {
					null != b && (Y(this, a, 1), this.a.J(b));
				};
				W.prototype.writeDouble = W.prototype.J;
				W.prototype.I = function (a, b) {
					null != b && (n('boolean' === typeof b || 'number' === typeof b), Y(this, a, 0), this.a.I(b));
				};
				W.prototype.writeBool = W.prototype.I;
				W.prototype.R = function (a, b) {
					null != b && (n(-2147483648 <= b && 2147483648 > b), Y(this, a, 0), this.a.M(b));
				};
				W.prototype.writeEnum = W.prototype.R;
				W.prototype.U = function (a, b) {
					null != b && ((a = X(this, a)), this.a.U(b), Z(this, a));
				};
				W.prototype.writeString = W.prototype.U;
				W.prototype.ja = function (a, b) {
					null != b && ((b = Ua(b)), Y(this, a, 2), this.a.j(b.length), tb(this, b));
				};
				W.prototype.writeBytes = W.prototype.ja;
				W.prototype.Rc = function (a, b, c) {
					null != b && ((a = X(this, a)), c(b, this), Z(this, a));
				};
				W.prototype.writeMessage = W.prototype.Rc;
				W.prototype.Sc = function (a, b, c) {
					null != b &&
						(Y(this, 1, 3), Y(this, 2, 0), this.a.M(a), (a = X(this, 3)), c(b, this), Z(this, a), Y(this, 1, 4));
				};
				W.prototype.writeMessageSet = W.prototype.Sc;
				W.prototype.Oc = function (a, b, c) {
					null != b && (Y(this, a, 3), c(b, this), Y(this, a, 4));
				};
				W.prototype.writeGroup = W.prototype.Oc;
				W.prototype.K = function (a, b) {
					null != b && (n(8 == b.length), Y(this, a, 1), this.a.K(b));
				};
				W.prototype.writeFixedHash64 = W.prototype.K;
				W.prototype.N = function (a, b) {
					null != b && (n(8 == b.length), Y(this, a, 0), this.a.N(b));
				};
				W.prototype.writeVarintHash64 = W.prototype.N;
				W.prototype.A = function (a, b, c) {
					Y(this, a, 1);
					this.a.A(b, c);
				};
				W.prototype.writeSplitFixed64 = W.prototype.A;
				W.prototype.l = function (a, b, c) {
					Y(this, a, 0);
					this.a.l(b, c);
				};
				W.prototype.writeSplitVarint64 = W.prototype.l;
				W.prototype.tb = function (a, b, c) {
					Y(this, a, 0);
					var d = this.a;
					Ja(b, c, function (f, h) {
						d.l(f >>> 0, h >>> 0);
					});
				};
				W.prototype.writeSplitZigzagVarint64 = W.prototype.tb;
				W.prototype.Ed = function (a, b) {
					if (null != b) for (var c = 0; c < b.length; c++) vb(this, a, b[c]);
				};
				W.prototype.writeRepeatedInt32 = W.prototype.Ed;
				W.prototype.Fd = function (a, b) {
					if (null != b) for (var c = 0; c < b.length; c++) this.ob(a, b[c]);
				};
				W.prototype.writeRepeatedInt32String = W.prototype.Fd;
				W.prototype.Gd = function (a, b) {
					if (null != b)
						for (var c = 0; c < b.length; c++) {
							var d = b[c];
							null != d && (Y(this, a, 0), this.a.ua(d));
						}
				};
				W.prototype.writeRepeatedInt64 = W.prototype.Gd;
				W.prototype.Qd = function (a, b, c, d) {
					if (null != b) for (var f = 0; f < b.length; f++) this.A(a, c(b[f]), d(b[f]));
				};
				W.prototype.writeRepeatedSplitFixed64 = W.prototype.Qd;
				W.prototype.Rd = function (a, b, c, d) {
					if (null != b) for (var f = 0; f < b.length; f++) this.l(a, c(b[f]), d(b[f]));
				};
				W.prototype.writeRepeatedSplitVarint64 = W.prototype.Rd;
				W.prototype.Sd = function (a, b, c, d) {
					if (null != b) for (var f = 0; f < b.length; f++) this.tb(a, c(b[f]), d(b[f]));
				};
				W.prototype.writeRepeatedSplitZigzagVarint64 = W.prototype.Sd;
				W.prototype.Hd = function (a, b) {
					if (null != b) for (var c = 0; c < b.length; c++) this.ka(a, b[c]);
				};
				W.prototype.writeRepeatedInt64String = W.prototype.Hd;
				W.prototype.Ud = function (a, b) {
					if (null != b) for (var c = 0; c < b.length; c++) ub(this, a, b[c]);
				};
				W.prototype.writeRepeatedUint32 = W.prototype.Ud;
				W.prototype.Vd = function (a, b) {
					if (null != b) for (var c = 0; c < b.length; c++) this.ub(a, b[c]);
				};
				W.prototype.writeRepeatedUint32String = W.prototype.Vd;
				W.prototype.Wd = function (a, b) {
					if (null != b)
						for (var c = 0; c < b.length; c++) {
							var d = b[c];
							null != d && (Y(this, a, 0), this.a.va(d));
						}
				};
				W.prototype.writeRepeatedUint64 = W.prototype.Wd;
				W.prototype.Xd = function (a, b) {
					if (null != b) for (var c = 0; c < b.length; c++) this.vb(a, b[c]);
				};
				W.prototype.writeRepeatedUint64String = W.prototype.Xd;
				W.prototype.Md = function (a, b) {
					if (null != b)
						for (var c = 0; c < b.length; c++) {
							var d = b[c];
							null != d && (Y(this, a, 0), this.a.wa(d));
						}
				};
				W.prototype.writeRepeatedSint32 = W.prototype.Md;
				W.prototype.Nd = function (a, b) {
					if (null != b)
						for (var c = 0; c < b.length; c++) {
							var d = b[c];
							null != d && (Y(this, a, 0), this.a.xa(d));
						}
				};
				W.prototype.writeRepeatedSint64 = W.prototype.Nd;
				W.prototype.Od = function (a, b) {
					if (null != b)
						for (var c = 0; c < b.length; c++) {
							var d = b[c];
							null != d && (Y(this, a, 0), this.a.Ta(d));
						}
				};
				W.prototype.writeRepeatedSint64String = W.prototype.Od;
				W.prototype.Pd = function (a, b) {
					if (null != b)
						for (var c = 0; c < b.length; c++) {
							var d = b[c];
							null != d && (Y(this, a, 0), this.a.W(d));
						}
				};
				W.prototype.writeRepeatedSintHash64 = W.prototype.Pd;
				W.prototype.yd = function (a, b) {
					if (null != b) for (var c = 0; c < b.length; c++) this.Pa(a, b[c]);
				};
				W.prototype.writeRepeatedFixed32 = W.prototype.yd;
				W.prototype.zd = function (a, b) {
					if (null != b) for (var c = 0; c < b.length; c++) this.Qa(a, b[c]);
				};
				W.prototype.writeRepeatedFixed64 = W.prototype.zd;
				W.prototype.Ad = function (a, b) {
					if (null != b) for (var c = 0; c < b.length; c++) this.nb(a, b[c]);
				};
				W.prototype.writeRepeatedFixed64String = W.prototype.Ad;
				W.prototype.Jd = function (a, b) {
					if (null != b) for (var c = 0; c < b.length; c++) this.Ra(a, b[c]);
				};
				W.prototype.writeRepeatedSfixed32 = W.prototype.Jd;
				W.prototype.Kd = function (a, b) {
					if (null != b) for (var c = 0; c < b.length; c++) this.Sa(a, b[c]);
				};
				W.prototype.writeRepeatedSfixed64 = W.prototype.Kd;
				W.prototype.Ld = function (a, b) {
					if (null != b) for (var c = 0; c < b.length; c++) this.qb(a, b[c]);
				};
				W.prototype.writeRepeatedSfixed64String = W.prototype.Ld;
				W.prototype.Cd = function (a, b) {
					if (null != b) for (var c = 0; c < b.length; c++) this.L(a, b[c]);
				};
				W.prototype.writeRepeatedFloat = W.prototype.Cd;
				W.prototype.wd = function (a, b) {
					if (null != b) for (var c = 0; c < b.length; c++) this.J(a, b[c]);
				};
				W.prototype.writeRepeatedDouble = W.prototype.wd;
				W.prototype.ud = function (a, b) {
					if (null != b) for (var c = 0; c < b.length; c++) this.I(a, b[c]);
				};
				W.prototype.writeRepeatedBool = W.prototype.ud;
				W.prototype.xd = function (a, b) {
					if (null != b) for (var c = 0; c < b.length; c++) this.R(a, b[c]);
				};
				W.prototype.writeRepeatedEnum = W.prototype.xd;
				W.prototype.Td = function (a, b) {
					if (null != b) for (var c = 0; c < b.length; c++) this.U(a, b[c]);
				};
				W.prototype.writeRepeatedString = W.prototype.Td;
				W.prototype.vd = function (a, b) {
					if (null != b) for (var c = 0; c < b.length; c++) this.ja(a, b[c]);
				};
				W.prototype.writeRepeatedBytes = W.prototype.vd;
				W.prototype.Id = function (a, b, c) {
					if (null != b)
						for (var d = 0; d < b.length; d++) {
							var f = X(this, a);
							c(b[d], this);
							Z(this, f);
						}
				};
				W.prototype.writeRepeatedMessage = W.prototype.Id;
				W.prototype.Dd = function (a, b, c) {
					if (null != b) for (var d = 0; d < b.length; d++) (Y(this, a, 3), c(b[d], this), Y(this, a, 4));
				};
				W.prototype.writeRepeatedGroup = W.prototype.Dd;
				W.prototype.Bd = function (a, b) {
					if (null != b) for (var c = 0; c < b.length; c++) this.K(a, b[c]);
				};
				W.prototype.writeRepeatedFixedHash64 = W.prototype.Bd;
				W.prototype.Yd = function (a, b) {
					if (null != b) for (var c = 0; c < b.length; c++) this.N(a, b[c]);
				};
				W.prototype.writeRepeatedVarintHash64 = W.prototype.Yd;
				W.prototype.ad = function (a, b) {
					if (null != b && b.length) {
						a = X(this, a);
						for (var c = 0; c < b.length; c++) this.a.M(b[c]);
						Z(this, a);
					}
				};
				W.prototype.writePackedInt32 = W.prototype.ad;
				W.prototype.bd = function (a, b) {
					if (null != b && b.length) {
						a = X(this, a);
						for (var c = 0; c < b.length; c++) this.a.M(parseInt(b[c], 10));
						Z(this, a);
					}
				};
				W.prototype.writePackedInt32String = W.prototype.bd;
				W.prototype.cd = function (a, b) {
					if (null != b && b.length) {
						a = X(this, a);
						for (var c = 0; c < b.length; c++) this.a.ua(b[c]);
						Z(this, a);
					}
				};
				W.prototype.writePackedInt64 = W.prototype.cd;
				W.prototype.md = function (a, b, c, d) {
					if (null != b) {
						a = X(this, a);
						for (var f = 0; f < b.length; f++) this.a.A(c(b[f]), d(b[f]));
						Z(this, a);
					}
				};
				W.prototype.writePackedSplitFixed64 = W.prototype.md;
				W.prototype.nd = function (a, b, c, d) {
					if (null != b) {
						a = X(this, a);
						for (var f = 0; f < b.length; f++) this.a.l(c(b[f]), d(b[f]));
						Z(this, a);
					}
				};
				W.prototype.writePackedSplitVarint64 = W.prototype.nd;
				W.prototype.od = function (a, b, c, d) {
					if (null != b) {
						a = X(this, a);
						for (var f = this.a, h = 0; h < b.length; h++)
							Ja(c(b[h]), d(b[h]), function (m, t) {
								f.l(m >>> 0, t >>> 0);
							});
						Z(this, a);
					}
				};
				W.prototype.writePackedSplitZigzagVarint64 = W.prototype.od;
				W.prototype.dd = function (a, b) {
					if (null != b && b.length) {
						a = X(this, a);
						for (var c = 0; c < b.length; c++) {
							var d = sb(b[c]);
							this.a.l(d.lo, d.hi);
						}
						Z(this, a);
					}
				};
				W.prototype.writePackedInt64String = W.prototype.dd;
				W.prototype.pd = function (a, b) {
					if (null != b && b.length) {
						a = X(this, a);
						for (var c = 0; c < b.length; c++) this.a.j(b[c]);
						Z(this, a);
					}
				};
				W.prototype.writePackedUint32 = W.prototype.pd;
				W.prototype.qd = function (a, b) {
					if (null != b && b.length) {
						a = X(this, a);
						for (var c = 0; c < b.length; c++) this.a.j(parseInt(b[c], 10));
						Z(this, a);
					}
				};
				W.prototype.writePackedUint32String = W.prototype.qd;
				W.prototype.rd = function (a, b) {
					if (null != b && b.length) {
						a = X(this, a);
						for (var c = 0; c < b.length; c++) this.a.va(b[c]);
						Z(this, a);
					}
				};
				W.prototype.writePackedUint64 = W.prototype.rd;
				W.prototype.sd = function (a, b) {
					if (null != b && b.length) {
						a = X(this, a);
						for (var c = 0; c < b.length; c++) {
							var d = U(b[c]);
							this.a.l(d.lo, d.hi);
						}
						Z(this, a);
					}
				};
				W.prototype.writePackedUint64String = W.prototype.sd;
				W.prototype.hd = function (a, b) {
					if (null != b && b.length) {
						a = X(this, a);
						for (var c = 0; c < b.length; c++) this.a.wa(b[c]);
						Z(this, a);
					}
				};
				W.prototype.writePackedSint32 = W.prototype.hd;
				W.prototype.jd = function (a, b) {
					if (null != b && b.length) {
						a = X(this, a);
						for (var c = 0; c < b.length; c++) this.a.xa(b[c]);
						Z(this, a);
					}
				};
				W.prototype.writePackedSint64 = W.prototype.jd;
				W.prototype.kd = function (a, b) {
					if (null != b && b.length) {
						a = X(this, a);
						for (var c = 0; c < b.length; c++) this.a.W(H(b[c]));
						Z(this, a);
					}
				};
				W.prototype.writePackedSint64String = W.prototype.kd;
				W.prototype.ld = function (a, b) {
					if (null != b && b.length) {
						a = X(this, a);
						for (var c = 0; c < b.length; c++) this.a.W(b[c]);
						Z(this, a);
					}
				};
				W.prototype.writePackedSintHash64 = W.prototype.ld;
				W.prototype.Wc = function (a, b) {
					if (null != b && b.length)
						for (Y(this, a, 2), this.a.j(4 * b.length), a = 0; a < b.length; a++) this.a.s(b[a]);
				};
				W.prototype.writePackedFixed32 = W.prototype.Wc;
				W.prototype.Xc = function (a, b) {
					if (null != b && b.length)
						for (Y(this, a, 2), this.a.j(8 * b.length), a = 0; a < b.length; a++) this.a.V(b[a]);
				};
				W.prototype.writePackedFixed64 = W.prototype.Xc;
				W.prototype.Yc = function (a, b) {
					if (null != b && b.length)
						for (Y(this, a, 2), this.a.j(8 * b.length), a = 0; a < b.length; a++) {
							var c = U(b[a]);
							this.a.A(c.lo, c.hi);
						}
				};
				W.prototype.writePackedFixed64String = W.prototype.Yc;
				W.prototype.ed = function (a, b) {
					if (null != b && b.length)
						for (Y(this, a, 2), this.a.j(4 * b.length), a = 0; a < b.length; a++) this.a.S(b[a]);
				};
				W.prototype.writePackedSfixed32 = W.prototype.ed;
				W.prototype.fd = function (a, b) {
					if (null != b && b.length)
						for (Y(this, a, 2), this.a.j(8 * b.length), a = 0; a < b.length; a++) this.a.T(b[a]);
				};
				W.prototype.writePackedSfixed64 = W.prototype.fd;
				W.prototype.gd = function (a, b) {
					if (null != b && b.length)
						for (Y(this, a, 2), this.a.j(8 * b.length), a = 0; a < b.length; a++) this.a.ka(b[a]);
				};
				W.prototype.writePackedSfixed64String = W.prototype.gd;
				W.prototype.$c = function (a, b) {
					if (null != b && b.length)
						for (Y(this, a, 2), this.a.j(4 * b.length), a = 0; a < b.length; a++) this.a.L(b[a]);
				};
				W.prototype.writePackedFloat = W.prototype.$c;
				W.prototype.Uc = function (a, b) {
					if (null != b && b.length)
						for (Y(this, a, 2), this.a.j(8 * b.length), a = 0; a < b.length; a++) this.a.J(b[a]);
				};
				W.prototype.writePackedDouble = W.prototype.Uc;
				W.prototype.Tc = function (a, b) {
					if (null != b && b.length) for (Y(this, a, 2), this.a.j(b.length), a = 0; a < b.length; a++) this.a.I(b[a]);
				};
				W.prototype.writePackedBool = W.prototype.Tc;
				W.prototype.Vc = function (a, b) {
					if (null != b && b.length) {
						a = X(this, a);
						for (var c = 0; c < b.length; c++) this.a.R(b[c]);
						Z(this, a);
					}
				};
				W.prototype.writePackedEnum = W.prototype.Vc;
				W.prototype.Zc = function (a, b) {
					if (null != b && b.length)
						for (Y(this, a, 2), this.a.j(8 * b.length), a = 0; a < b.length; a++) this.a.K(b[a]);
				};
				W.prototype.writePackedFixedHash64 = W.prototype.Zc;
				W.prototype.td = function (a, b) {
					if (null != b && b.length) {
						a = X(this, a);
						for (var c = 0; c < b.length; c++) this.a.N(b[c]);
						Z(this, a);
					}
				};
				W.prototype.writePackedVarintHash64 = W.prototype.td;
				true &&
					((exports.debug = R),
					(exports.Map = r),
					(exports.Message = N),
					(exports.BinaryReader = J),
					(exports.BinaryWriter = W),
					(exports.ExtensionFieldInfo = Ya),
					(exports.ExtensionFieldBinaryInfo = Za),
					(exports.exportSymbol = ma),
					(exports.inherits = na),
					(exports.object = { extend: pa }),
					(exports.typeOf = k));

				/***/
			},

		/***/ './node_modules/google-protobuf/google/protobuf/empty_pb.js':
			/*!******************************************************************!*\
  !*** ./node_modules/google-protobuf/google/protobuf/empty_pb.js ***!
  \******************************************************************/
			/***/ (__unused_webpack_module, exports, __webpack_require__) => {
				// source: google/protobuf/empty.proto
				/**
				 * @fileoverview
				 * @enhanceable
				 * @suppress {missingRequire} reports error on implicit type usages.
				 * @suppress {messageConventions} JS Compiler reports an error if a variable or
				 *     field starts with 'MSG_' and isn't a translatable message.
				 * @public
				 */
				// GENERATED CODE -- DO NOT EDIT!
				/* eslint-disable */
				// @ts-nocheck

				var jspb = __webpack_require__(/*! google-protobuf */ './node_modules/google-protobuf/google-protobuf.js');
				var goog = jspb;
				var global =
					(typeof globalThis !== 'undefined' && globalThis) ||
					(typeof window !== 'undefined' && window) ||
					(typeof global !== 'undefined' && global) ||
					(typeof self !== 'undefined' && self) ||
					function () {
						return this;
					}.call(null) ||
					Function('return this')();

				goog.exportSymbol('proto.google.protobuf.Empty', null, global);
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.google.protobuf.Empty = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.google.protobuf.Empty, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.google.protobuf.Empty.displayName = 'proto.google.protobuf.Empty';
				}

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.google.protobuf.Empty.prototype.toObject = function (opt_includeInstance) {
						return proto.google.protobuf.Empty.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.google.protobuf.Empty} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.google.protobuf.Empty.toObject = function (includeInstance, msg) {
						var f,
							obj = {};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.google.protobuf.Empty}
				 */
				proto.google.protobuf.Empty.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.google.protobuf.Empty();
					return proto.google.protobuf.Empty.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.google.protobuf.Empty} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.google.protobuf.Empty}
				 */
				proto.google.protobuf.Empty.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.google.protobuf.Empty.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.google.protobuf.Empty.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.google.protobuf.Empty} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.google.protobuf.Empty.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
				};

				goog.object.extend(exports, proto.google.protobuf);

				/***/
			},

		/***/ './node_modules/google-protobuf/google/protobuf/struct_pb.js':
			/*!*******************************************************************!*\
  !*** ./node_modules/google-protobuf/google/protobuf/struct_pb.js ***!
  \*******************************************************************/
			/***/ (__unused_webpack_module, exports, __webpack_require__) => {
				// source: google/protobuf/struct.proto
				/**
				 * @fileoverview
				 * @enhanceable
				 * @suppress {missingRequire} reports error on implicit type usages.
				 * @suppress {messageConventions} JS Compiler reports an error if a variable or
				 *     field starts with 'MSG_' and isn't a translatable message.
				 * @public
				 */
				// GENERATED CODE -- DO NOT EDIT!
				/* eslint-disable */
				// @ts-nocheck

				var jspb = __webpack_require__(/*! google-protobuf */ './node_modules/google-protobuf/google-protobuf.js');
				var goog = jspb;
				var global =
					(typeof globalThis !== 'undefined' && globalThis) ||
					(typeof window !== 'undefined' && window) ||
					(typeof global !== 'undefined' && global) ||
					(typeof self !== 'undefined' && self) ||
					function () {
						return this;
					}.call(null) ||
					Function('return this')();

				goog.exportSymbol('proto.google.protobuf.ListValue', null, global);
				goog.exportSymbol('proto.google.protobuf.NullValue', null, global);
				goog.exportSymbol('proto.google.protobuf.Struct', null, global);
				goog.exportSymbol('proto.google.protobuf.Value', null, global);
				goog.exportSymbol('proto.google.protobuf.Value.KindCase', null, global);
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.google.protobuf.Struct = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.google.protobuf.Struct, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.google.protobuf.Struct.displayName = 'proto.google.protobuf.Struct';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.google.protobuf.Value = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, proto.google.protobuf.Value.oneofGroups_);
				};
				goog.inherits(proto.google.protobuf.Value, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.google.protobuf.Value.displayName = 'proto.google.protobuf.Value';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.google.protobuf.ListValue = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, proto.google.protobuf.ListValue.repeatedFields_, null);
				};
				goog.inherits(proto.google.protobuf.ListValue, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.google.protobuf.ListValue.displayName = 'proto.google.protobuf.ListValue';
				}

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.google.protobuf.Struct.prototype.toObject = function (opt_includeInstance) {
						return proto.google.protobuf.Struct.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.google.protobuf.Struct} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.google.protobuf.Struct.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								fieldsMap: (f = msg.getFieldsMap())
									? f.toObject(includeInstance, proto.google.protobuf.Value.toObject)
									: []
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.google.protobuf.Struct}
				 */
				proto.google.protobuf.Struct.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.google.protobuf.Struct();
					return proto.google.protobuf.Struct.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.google.protobuf.Struct} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.google.protobuf.Struct}
				 */
				proto.google.protobuf.Struct.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = msg.getFieldsMap();
								reader.readMessage(value, function (message, reader) {
									jspb.Map.deserializeBinary(
										message,
										reader,
										jspb.BinaryReader.prototype.readString,
										jspb.BinaryReader.prototype.readMessage,
										proto.google.protobuf.Value.deserializeBinaryFromReader,
										'',
										new proto.google.protobuf.Value()
									);
								});
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.google.protobuf.Struct.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.google.protobuf.Struct.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.google.protobuf.Struct} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.google.protobuf.Struct.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getFieldsMap(true);
					if (f && f.getLength() > 0) {
						f.serializeBinary(
							1,
							writer,
							jspb.BinaryWriter.prototype.writeString,
							jspb.BinaryWriter.prototype.writeMessage,
							proto.google.protobuf.Value.serializeBinaryToWriter
						);
					}
				};

				/**
				 * map<string, Value> fields = 1;
				 * @param {boolean=} opt_noLazyCreate Do not create the map if
				 * empty, instead returning `undefined`
				 * @return {!jspb.Map<string,!proto.google.protobuf.Value>}
				 */
				proto.google.protobuf.Struct.prototype.getFieldsMap = function (opt_noLazyCreate) {
					return /** @type {!jspb.Map<string,!proto.google.protobuf.Value>} */ (
						jspb.Message.getMapField(this, 1, opt_noLazyCreate, proto.google.protobuf.Value)
					);
				};

				/**
				 * Clears values from the map. The map will be non-null.
				 * @return {!proto.google.protobuf.Struct} returns this
				 */
				proto.google.protobuf.Struct.prototype.clearFieldsMap = function () {
					this.getFieldsMap().clear();
					return this;
				};

				/**
				 * Oneof group definitions for this message. Each group defines the field
				 * numbers belonging to that group. When of these fields' value is set, all
				 * other fields in the group are cleared. During deserialization, if multiple
				 * fields are encountered for a group, only the last value seen will be kept.
				 * @private {!Array<!Array<number>>}
				 * @const
				 */
				proto.google.protobuf.Value.oneofGroups_ = [[1, 2, 3, 4, 5, 6]];

				/**
				 * @enum {number}
				 */
				proto.google.protobuf.Value.KindCase = {
					KIND_NOT_SET: 0,
					NULL_VALUE: 1,
					NUMBER_VALUE: 2,
					STRING_VALUE: 3,
					BOOL_VALUE: 4,
					STRUCT_VALUE: 5,
					LIST_VALUE: 6
				};

				/**
				 * @return {proto.google.protobuf.Value.KindCase}
				 */
				proto.google.protobuf.Value.prototype.getKindCase = function () {
					return /** @type {proto.google.protobuf.Value.KindCase} */ (
						jspb.Message.computeOneofCase(this, proto.google.protobuf.Value.oneofGroups_[0])
					);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.google.protobuf.Value.prototype.toObject = function (opt_includeInstance) {
						return proto.google.protobuf.Value.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.google.protobuf.Value} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.google.protobuf.Value.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								nullValue: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
								numberValue: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
								stringValue: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
								boolValue: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f,
								structValue: (f = msg.getStructValue()) && proto.google.protobuf.Struct.toObject(includeInstance, f),
								listValue: (f = msg.getListValue()) && proto.google.protobuf.ListValue.toObject(includeInstance, f)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.google.protobuf.Value}
				 */
				proto.google.protobuf.Value.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.google.protobuf.Value();
					return proto.google.protobuf.Value.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.google.protobuf.Value} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.google.protobuf.Value}
				 */
				proto.google.protobuf.Value.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {!proto.google.protobuf.NullValue} */ (reader.readEnum());
								msg.setNullValue(value);
								break;
							case 2:
								var value = /** @type {number} */ (reader.readDouble());
								msg.setNumberValue(value);
								break;
							case 3:
								var value = /** @type {string} */ (reader.readString());
								msg.setStringValue(value);
								break;
							case 4:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setBoolValue(value);
								break;
							case 5:
								var value = new proto.google.protobuf.Struct();
								reader.readMessage(value, proto.google.protobuf.Struct.deserializeBinaryFromReader);
								msg.setStructValue(value);
								break;
							case 6:
								var value = new proto.google.protobuf.ListValue();
								reader.readMessage(value, proto.google.protobuf.ListValue.deserializeBinaryFromReader);
								msg.setListValue(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.google.protobuf.Value.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.google.protobuf.Value.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.google.protobuf.Value} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.google.protobuf.Value.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = /** @type {!proto.google.protobuf.NullValue} */ (jspb.Message.getField(message, 1));
					if (f != null) {
						writer.writeEnum(1, f);
					}
					f = /** @type {number} */ (jspb.Message.getField(message, 2));
					if (f != null) {
						writer.writeDouble(2, f);
					}
					f = /** @type {string} */ (jspb.Message.getField(message, 3));
					if (f != null) {
						writer.writeString(3, f);
					}
					f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
					if (f != null) {
						writer.writeBool(4, f);
					}
					f = message.getStructValue();
					if (f != null) {
						writer.writeMessage(5, f, proto.google.protobuf.Struct.serializeBinaryToWriter);
					}
					f = message.getListValue();
					if (f != null) {
						writer.writeMessage(6, f, proto.google.protobuf.ListValue.serializeBinaryToWriter);
					}
				};

				/**
				 * optional NullValue null_value = 1;
				 * @return {!proto.google.protobuf.NullValue}
				 */
				proto.google.protobuf.Value.prototype.getNullValue = function () {
					return /** @type {!proto.google.protobuf.NullValue} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
				};

				/**
				 * @param {!proto.google.protobuf.NullValue} value
				 * @return {!proto.google.protobuf.Value} returns this
				 */
				proto.google.protobuf.Value.prototype.setNullValue = function (value) {
					return jspb.Message.setOneofField(this, 1, proto.google.protobuf.Value.oneofGroups_[0], value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.google.protobuf.Value} returns this
				 */
				proto.google.protobuf.Value.prototype.clearNullValue = function () {
					return jspb.Message.setOneofField(this, 1, proto.google.protobuf.Value.oneofGroups_[0], undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.google.protobuf.Value.prototype.hasNullValue = function () {
					return jspb.Message.getField(this, 1) != null;
				};

				/**
				 * optional double number_value = 2;
				 * @return {number}
				 */
				proto.google.protobuf.Value.prototype.getNumberValue = function () {
					return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.google.protobuf.Value} returns this
				 */
				proto.google.protobuf.Value.prototype.setNumberValue = function (value) {
					return jspb.Message.setOneofField(this, 2, proto.google.protobuf.Value.oneofGroups_[0], value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.google.protobuf.Value} returns this
				 */
				proto.google.protobuf.Value.prototype.clearNumberValue = function () {
					return jspb.Message.setOneofField(this, 2, proto.google.protobuf.Value.oneofGroups_[0], undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.google.protobuf.Value.prototype.hasNumberValue = function () {
					return jspb.Message.getField(this, 2) != null;
				};

				/**
				 * optional string string_value = 3;
				 * @return {string}
				 */
				proto.google.protobuf.Value.prototype.getStringValue = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.google.protobuf.Value} returns this
				 */
				proto.google.protobuf.Value.prototype.setStringValue = function (value) {
					return jspb.Message.setOneofField(this, 3, proto.google.protobuf.Value.oneofGroups_[0], value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.google.protobuf.Value} returns this
				 */
				proto.google.protobuf.Value.prototype.clearStringValue = function () {
					return jspb.Message.setOneofField(this, 3, proto.google.protobuf.Value.oneofGroups_[0], undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.google.protobuf.Value.prototype.hasStringValue = function () {
					return jspb.Message.getField(this, 3) != null;
				};

				/**
				 * optional bool bool_value = 4;
				 * @return {boolean}
				 */
				proto.google.protobuf.Value.prototype.getBoolValue = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.google.protobuf.Value} returns this
				 */
				proto.google.protobuf.Value.prototype.setBoolValue = function (value) {
					return jspb.Message.setOneofField(this, 4, proto.google.protobuf.Value.oneofGroups_[0], value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.google.protobuf.Value} returns this
				 */
				proto.google.protobuf.Value.prototype.clearBoolValue = function () {
					return jspb.Message.setOneofField(this, 4, proto.google.protobuf.Value.oneofGroups_[0], undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.google.protobuf.Value.prototype.hasBoolValue = function () {
					return jspb.Message.getField(this, 4) != null;
				};

				/**
				 * optional Struct struct_value = 5;
				 * @return {?proto.google.protobuf.Struct}
				 */
				proto.google.protobuf.Value.prototype.getStructValue = function () {
					return /** @type{?proto.google.protobuf.Struct} */ (
						jspb.Message.getWrapperField(this, proto.google.protobuf.Struct, 5)
					);
				};

				/**
				 * @param {?proto.google.protobuf.Struct|undefined} value
				 * @return {!proto.google.protobuf.Value} returns this
				 */
				proto.google.protobuf.Value.prototype.setStructValue = function (value) {
					return jspb.Message.setOneofWrapperField(this, 5, proto.google.protobuf.Value.oneofGroups_[0], value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.google.protobuf.Value} returns this
				 */
				proto.google.protobuf.Value.prototype.clearStructValue = function () {
					return this.setStructValue(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.google.protobuf.Value.prototype.hasStructValue = function () {
					return jspb.Message.getField(this, 5) != null;
				};

				/**
				 * optional ListValue list_value = 6;
				 * @return {?proto.google.protobuf.ListValue}
				 */
				proto.google.protobuf.Value.prototype.getListValue = function () {
					return /** @type{?proto.google.protobuf.ListValue} */ (
						jspb.Message.getWrapperField(this, proto.google.protobuf.ListValue, 6)
					);
				};

				/**
				 * @param {?proto.google.protobuf.ListValue|undefined} value
				 * @return {!proto.google.protobuf.Value} returns this
				 */
				proto.google.protobuf.Value.prototype.setListValue = function (value) {
					return jspb.Message.setOneofWrapperField(this, 6, proto.google.protobuf.Value.oneofGroups_[0], value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.google.protobuf.Value} returns this
				 */
				proto.google.protobuf.Value.prototype.clearListValue = function () {
					return this.setListValue(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.google.protobuf.Value.prototype.hasListValue = function () {
					return jspb.Message.getField(this, 6) != null;
				};

				/**
				 * List of repeated fields within this message type.
				 * @private {!Array<number>}
				 * @const
				 */
				proto.google.protobuf.ListValue.repeatedFields_ = [1];

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.google.protobuf.ListValue.prototype.toObject = function (opt_includeInstance) {
						return proto.google.protobuf.ListValue.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.google.protobuf.ListValue} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.google.protobuf.ListValue.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								valuesList: jspb.Message.toObjectList(
									msg.getValuesList(),
									proto.google.protobuf.Value.toObject,
									includeInstance
								)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.google.protobuf.ListValue}
				 */
				proto.google.protobuf.ListValue.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.google.protobuf.ListValue();
					return proto.google.protobuf.ListValue.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.google.protobuf.ListValue} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.google.protobuf.ListValue}
				 */
				proto.google.protobuf.ListValue.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = new proto.google.protobuf.Value();
								reader.readMessage(value, proto.google.protobuf.Value.deserializeBinaryFromReader);
								msg.addValues(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.google.protobuf.ListValue.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.google.protobuf.ListValue.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.google.protobuf.ListValue} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.google.protobuf.ListValue.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getValuesList();
					if (f.length > 0) {
						writer.writeRepeatedMessage(1, f, proto.google.protobuf.Value.serializeBinaryToWriter);
					}
				};

				/**
				 * repeated Value values = 1;
				 * @return {!Array<!proto.google.protobuf.Value>}
				 */
				proto.google.protobuf.ListValue.prototype.getValuesList = function () {
					return /** @type{!Array<!proto.google.protobuf.Value>} */ (
						jspb.Message.getRepeatedWrapperField(this, proto.google.protobuf.Value, 1)
					);
				};

				/**
				 * @param {!Array<!proto.google.protobuf.Value>} value
				 * @return {!proto.google.protobuf.ListValue} returns this
				 */
				proto.google.protobuf.ListValue.prototype.setValuesList = function (value) {
					return jspb.Message.setRepeatedWrapperField(this, 1, value);
				};

				/**
				 * @param {!proto.google.protobuf.Value=} opt_value
				 * @param {number=} opt_index
				 * @return {!proto.google.protobuf.Value}
				 */
				proto.google.protobuf.ListValue.prototype.addValues = function (opt_value, opt_index) {
					return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.google.protobuf.Value, opt_index);
				};

				/**
				 * Clears the list making it empty but non-null.
				 * @return {!proto.google.protobuf.ListValue} returns this
				 */
				proto.google.protobuf.ListValue.prototype.clearValuesList = function () {
					return this.setValuesList([]);
				};

				/**
				 * @enum {number}
				 */
				proto.google.protobuf.NullValue = {
					NULL_VALUE: 0
				};

				goog.object.extend(exports, proto.google.protobuf);
				/* This code will be inserted into generated code for
				 * google/protobuf/struct.proto. */

				/**
				 * Typedef representing plain JavaScript values that can go into a
				 *     Struct.
				 * @typedef {null|number|string|boolean|Array|Object}
				 */
				proto.google.protobuf.JavaScriptValue;

				/**
				 * Converts this Value object to a plain JavaScript value.
				 * @return {?proto.google.protobuf.JavaScriptValue} a plain JavaScript
				 *     value representing this Struct.
				 */
				proto.google.protobuf.Value.prototype.toJavaScript = function () {
					var kindCase = proto.google.protobuf.Value.KindCase;
					switch (this.getKindCase()) {
						case kindCase.NULL_VALUE:
							return null;
						case kindCase.NUMBER_VALUE:
							return this.getNumberValue();
						case kindCase.STRING_VALUE:
							return this.getStringValue();
						case kindCase.BOOL_VALUE:
							return this.getBoolValue();
						case kindCase.STRUCT_VALUE:
							return this.getStructValue().toJavaScript();
						case kindCase.LIST_VALUE:
							return this.getListValue().toJavaScript();
						default:
							throw new Error('Unexpected struct type');
					}
				};

				/**
				 * Converts this JavaScript value to a new Value proto.
				 * @param {!proto.google.protobuf.JavaScriptValue} value The value to
				 *     convert.
				 * @return {!proto.google.protobuf.Value} The newly constructed value.
				 */
				proto.google.protobuf.Value.fromJavaScript = function (value) {
					var ret = new proto.google.protobuf.Value();
					switch (goog.typeOf(value)) {
						case 'string':
							ret.setStringValue(/** @type {string} */ (value));
							break;
						case 'number':
							ret.setNumberValue(/** @type {number} */ (value));
							break;
						case 'boolean':
							ret.setBoolValue(/** @type {boolean} */ (value));
							break;
						case 'null':
							ret.setNullValue(proto.google.protobuf.NullValue.NULL_VALUE);
							break;
						case 'array':
							ret.setListValue(proto.google.protobuf.ListValue.fromJavaScript(/** @type{!Array} */ (value)));
							break;
						case 'object':
							ret.setStructValue(proto.google.protobuf.Struct.fromJavaScript(/** @type{!Object} */ (value)));
							break;
						default:
							throw new Error('Unexpected struct type.');
					}

					return ret;
				};

				/**
				 * Converts this ListValue object to a plain JavaScript array.
				 * @return {!Array} a plain JavaScript array representing this List.
				 */
				proto.google.protobuf.ListValue.prototype.toJavaScript = function () {
					var ret = [];
					var values = this.getValuesList();

					for (var i = 0; i < values.length; i++) {
						ret[i] = values[i].toJavaScript();
					}

					return ret;
				};

				/**
				 * Constructs a ListValue protobuf from this plain JavaScript array.
				 * @param {!Array} array a plain JavaScript array
				 * @return {proto.google.protobuf.ListValue} a new ListValue object
				 */
				proto.google.protobuf.ListValue.fromJavaScript = function (array) {
					var ret = new proto.google.protobuf.ListValue();

					for (var i = 0; i < array.length; i++) {
						ret.addValues(proto.google.protobuf.Value.fromJavaScript(array[i]));
					}

					return ret;
				};

				/**
				 * Converts this Struct object to a plain JavaScript object.
				 * @return {!Object<string, !proto.google.protobuf.JavaScriptValue>} a plain
				 *     JavaScript object representing this Struct.
				 */
				proto.google.protobuf.Struct.prototype.toJavaScript = function () {
					var ret = {};

					this.getFieldsMap().forEach(function (value, key) {
						ret[key] = value.toJavaScript();
					});

					return ret;
				};

				/**
				 * Constructs a Struct protobuf from this plain JavaScript object.
				 * @param {!Object} obj a plain JavaScript object
				 * @return {proto.google.protobuf.Struct} a new Struct object
				 */
				proto.google.protobuf.Struct.fromJavaScript = function (obj) {
					var ret = new proto.google.protobuf.Struct();
					var map = ret.getFieldsMap();

					for (var property in obj) {
						var val = obj[property];
						map.set(property, proto.google.protobuf.Value.fromJavaScript(val));
					}

					return ret;
				};

				/***/
			},

		/***/ './node_modules/grpc-web/index.js':
			/*!****************************************!*\
  !*** ./node_modules/grpc-web/index.js ***!
  \****************************************/
			/***/ function (module, __unused_webpack_exports, __webpack_require__) {
				/*

 Copyright The Closure Library Authors.
 SPDX-License-Identifier: Apache-2.0
*/
				var n;
				function aa(a) {
					var b = 0;
					return function () {
						return b < a.length ? { done: !1, value: a[b++] } : { done: !0 };
					};
				}
				var ba =
					'function' == typeof Object.defineProperties
						? Object.defineProperty
						: function (a, b, c) {
								a != Array.prototype && a != Object.prototype && (a[b] = c.value);
							};
				function ca(a) {
					a = [
						'object' == typeof window && window,
						'object' == typeof self && self,
						'object' == typeof __webpack_require__.g && __webpack_require__.g,
						a
					];
					for (var b = 0; b < a.length; ++b) {
						var c = a[b];
						if (c && c.Math == Math) return c;
					}
					throw Error('Cannot find global object');
				}
				var r = ca(this);
				function t() {
					t = function () {};
					r.Symbol || (r.Symbol = da);
				}
				function ea(a, b) {
					this.a = a;
					ba(this, 'description', { configurable: !0, writable: !0, value: b });
				}
				ea.prototype.toString = function () {
					return this.a;
				};
				var da = (function () {
					function a(c) {
						if (this instanceof a) throw new TypeError('Symbol is not a constructor');
						return new ea('jscomp_symbol_' + (c || '') + '_' + b++, c);
					}
					var b = 0;
					return a;
				})();
				function u() {
					t();
					var a = r.Symbol.iterator;
					a || (a = r.Symbol.iterator = r.Symbol('Symbol.iterator'));
					'function' != typeof Array.prototype[a] &&
						ba(Array.prototype, a, {
							configurable: !0,
							writable: !0,
							value: function () {
								return fa(aa(this));
							}
						});
					u = function () {};
				}
				function fa(a) {
					u();
					a = { next: a };
					a[r.Symbol.iterator] = function () {
						return this;
					};
					return a;
				}
				function ha(a) {
					var b = 'undefined' != typeof Symbol && Symbol.iterator && a[Symbol.iterator];
					return b ? b.call(a) : { next: aa(a) };
				}
				var ia =
						'function' == typeof Object.create
							? Object.create
							: function (a) {
									function b() {}
									b.prototype = a;
									return new b();
								},
					ja;
				if ('function' == typeof Object.setPrototypeOf) ja = Object.setPrototypeOf;
				else {
					var ka;
					a: {
						var la = { V: !0 },
							ma = {};
						try {
							ma.__proto__ = la;
							ka = ma.V;
							break a;
						} catch (a) {}
						ka = !1;
					}
					ja = ka
						? function (a, b) {
								a.__proto__ = b;
								if (a.__proto__ !== b) throw new TypeError(a + ' is not extensible');
								return a;
							}
						: null;
				}
				var na = ja;
				function oa(a, b) {
					a.prototype = ia(b.prototype);
					a.prototype.constructor = a;
					if (na) na(a, b);
					else
						for (var c in b)
							if ('prototype' != c)
								if (Object.defineProperties) {
									var d = Object.getOwnPropertyDescriptor(b, c);
									d && Object.defineProperty(a, c, d);
								} else a[c] = b[c];
					a.O = b.prototype;
				}
				function pa(a, b) {
					u();
					a instanceof String && (a += '');
					var c = 0,
						d = {
							next: function () {
								if (c < a.length) {
									var f = c++;
									return { value: b(f, a[f]), done: !1 };
								}
								d.next = function () {
									return { done: !0, value: void 0 };
								};
								return d.next();
							}
						};
					d[Symbol.iterator] = function () {
						return d;
					};
					return d;
				}
				function v(a, b) {
					if (b) {
						var c = r;
						a = a.split('.');
						for (var d = 0; d < a.length - 1; d++) {
							var f = a[d];
							f in c || (c[f] = {});
							c = c[f];
						}
						a = a[a.length - 1];
						d = c[a];
						b = b(d);
						b != d && null != b && ba(c, a, { configurable: !0, writable: !0, value: b });
					}
				}
				v('Array.prototype.keys', function (a) {
					return a
						? a
						: function () {
								return pa(this, function (b) {
									return b;
								});
							};
				});
				v('Array.prototype.find', function (a) {
					return a
						? a
						: function (b, c) {
								a: {
									var d = this;
									d instanceof String && (d = String(d));
									for (var f = d.length, g = 0; g < f; g++) {
										var e = d[g];
										if (b.call(c, e, g, d)) {
											b = e;
											break a;
										}
									}
									b = void 0;
								}
								return b;
							};
				});
				v('Object.is', function (a) {
					return a
						? a
						: function (b, c) {
								return b === c ? 0 !== b || 1 / b === 1 / c : b !== b && c !== c;
							};
				});
				v('Array.prototype.includes', function (a) {
					return a
						? a
						: function (b, c) {
								var d = this;
								d instanceof String && (d = String(d));
								var f = d.length;
								c = c || 0;
								for (0 > c && (c = Math.max(c + f, 0)); c < f; c++) {
									var g = d[c];
									if (g === b || Object.is(g, b)) return !0;
								}
								return !1;
							};
				});
				v('Promise', function (a) {
					function b(e) {
						this.b = 0;
						this.c = void 0;
						this.a = [];
						var h = this.f();
						try {
							e(h.resolve, h.reject);
						} catch (k) {
							h.reject(k);
						}
					}
					function c() {
						this.a = null;
					}
					function d(e) {
						return e instanceof b
							? e
							: new b(function (h) {
									h(e);
								});
					}
					if (a) return a;
					c.prototype.b = function (e) {
						if (null == this.a) {
							this.a = [];
							var h = this;
							this.c(function () {
								h.g();
							});
						}
						this.a.push(e);
					};
					var f = r.setTimeout;
					c.prototype.c = function (e) {
						f(e, 0);
					};
					c.prototype.g = function () {
						for (; this.a && this.a.length; ) {
							var e = this.a;
							this.a = [];
							for (var h = 0; h < e.length; ++h) {
								var k = e[h];
								e[h] = null;
								try {
									k();
								} catch (l) {
									this.f(l);
								}
							}
						}
						this.a = null;
					};
					c.prototype.f = function (e) {
						this.c(function () {
							throw e;
						});
					};
					b.prototype.f = function () {
						function e(l) {
							return function (m) {
								k || ((k = !0), l.call(h, m));
							};
						}
						var h = this,
							k = !1;
						return { resolve: e(this.s), reject: e(this.g) };
					};
					b.prototype.s = function (e) {
						if (e === this) this.g(new TypeError('A Promise cannot resolve to itself'));
						else if (e instanceof b) this.v(e);
						else {
							a: switch (typeof e) {
								case 'object':
									var h = null != e;
									break a;
								case 'function':
									h = !0;
									break a;
								default:
									h = !1;
							}
							h ? this.m(e) : this.h(e);
						}
					};
					b.prototype.m = function (e) {
						var h = void 0;
						try {
							h = e.then;
						} catch (k) {
							this.g(k);
							return;
						}
						'function' == typeof h ? this.w(h, e) : this.h(e);
					};
					b.prototype.g = function (e) {
						this.i(2, e);
					};
					b.prototype.h = function (e) {
						this.i(1, e);
					};
					b.prototype.i = function (e, h) {
						if (0 != this.b)
							throw Error('Cannot settle(' + e + ', ' + h + '): Promise already settled in state' + this.b);
						this.b = e;
						this.c = h;
						this.l();
					};
					b.prototype.l = function () {
						if (null != this.a) {
							for (var e = 0; e < this.a.length; ++e) g.b(this.a[e]);
							this.a = null;
						}
					};
					var g = new c();
					b.prototype.v = function (e) {
						var h = this.f();
						e.F(h.resolve, h.reject);
					};
					b.prototype.w = function (e, h) {
						var k = this.f();
						try {
							e.call(h, k.resolve, k.reject);
						} catch (l) {
							k.reject(l);
						}
					};
					b.prototype.then = function (e, h) {
						function k(q, w) {
							return 'function' == typeof q
								? function (A) {
										try {
											l(q(A));
										} catch (L) {
											m(L);
										}
									}
								: w;
						}
						var l,
							m,
							p = new b(function (q, w) {
								l = q;
								m = w;
							});
						this.F(k(e, l), k(h, m));
						return p;
					};
					b.prototype.catch = function (e) {
						return this.then(void 0, e);
					};
					b.prototype.F = function (e, h) {
						function k() {
							switch (l.b) {
								case 1:
									e(l.c);
									break;
								case 2:
									h(l.c);
									break;
								default:
									throw Error('Unexpected state: ' + l.b);
							}
						}
						var l = this;
						null == this.a ? g.b(k) : this.a.push(k);
					};
					b.resolve = d;
					b.reject = function (e) {
						return new b(function (h, k) {
							k(e);
						});
					};
					b.race = function (e) {
						return new b(function (h, k) {
							for (var l = ha(e), m = l.next(); !m.done; m = l.next()) d(m.value).F(h, k);
						});
					};
					b.all = function (e) {
						var h = ha(e),
							k = h.next();
						return k.done
							? d([])
							: new b(function (l, m) {
									function p(A) {
										return function (L) {
											q[A] = L;
											w--;
											0 == w && l(q);
										};
									}
									var q = [],
										w = 0;
									do (q.push(void 0), w++, d(k.value).F(p(q.length - 1), m), (k = h.next()));
									while (!k.done);
								});
					};
					return b;
				});
				var qa = qa || {},
					x = this || self;
				function y(a, b) {
					a = a.split('.');
					b = b || x;
					for (var c = 0; c < a.length; c++) if (((b = b[a[c]]), null == b)) return null;
					return b;
				}
				function ra() {}
				function sa(a) {
					var b = typeof a;
					return ('object' == b && null != a) || 'function' == b;
				}
				var ta = 'closure_uid_' + ((1e9 * Math.random()) >>> 0),
					ua = 0;
				function va(a, b, c) {
					return a.call.apply(a.bind, arguments);
				}
				function wa(a, b, c) {
					if (!a) throw Error();
					if (2 < arguments.length) {
						var d = Array.prototype.slice.call(arguments, 2);
						return function () {
							var f = Array.prototype.slice.call(arguments);
							Array.prototype.unshift.apply(f, d);
							return a.apply(b, f);
						};
					}
					return function () {
						return a.apply(b, arguments);
					};
				}
				function z(a, b, c) {
					Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf('native code')
						? (z = va)
						: (z = wa);
					return z.apply(null, arguments);
				}
				function B(a, b) {
					function c() {}
					c.prototype = b.prototype;
					a.O = b.prototype;
					a.prototype = new c();
					a.prototype.constructor = a;
				}
				function xa(a) {
					this.a = a || {};
				}
				xa.prototype.get = function (a) {
					return this.a[a];
				};
				xa.prototype.G = function () {
					return Object.keys(this.a);
				};
				function C(a, b, c, d) {
					this.f = a;
					this.c = b;
					this.b = c;
					this.a = d;
				}
				C.prototype.getRequestMessage = function () {
					return this.f;
				};
				C.prototype.getMethodDescriptor = function () {
					return this.c;
				};
				C.prototype.getMetadata = function () {
					return this.b;
				};
				C.prototype.getCallOptions = function () {
					return this.a;
				};
				function D(a, b, c, d) {
					c = void 0 === c ? {} : c;
					this.c = a;
					this.a = c;
					this.b = b;
					this.f = void 0 === d ? null : d;
				}
				D.prototype.getResponseMessage = function () {
					return this.c;
				};
				D.prototype.getMetadata = function () {
					return this.a;
				};
				D.prototype.getMethodDescriptor = function () {
					return this.b;
				};
				D.prototype.getStatus = function () {
					return this.f;
				};
				function ya(a, b, c, d, f, g) {
					this.name = a;
					this.a = f;
					this.b = g;
				}
				function za(a, b, c) {
					c = void 0 === c ? {} : c;
					var d = void 0 === d ? new xa() : d;
					return new C(b, a, c, d);
				}
				ya.prototype.getName = function () {
					return this.name;
				};
				ya.prototype.getName = ya.prototype.getName;
				function Aa(a) {
					switch (a) {
						case 200:
							return 0;
						case 400:
							return 3;
						case 401:
							return 16;
						case 403:
							return 7;
						case 404:
							return 5;
						case 409:
							return 10;
						case 412:
							return 9;
						case 429:
							return 8;
						case 499:
							return 1;
						case 500:
							return 2;
						case 501:
							return 12;
						case 503:
							return 14;
						case 504:
							return 4;
						default:
							return 2;
					}
				}
				function Ba(a) {
					switch (a) {
						case 0:
							return 'OK';
						case 1:
							return 'CANCELLED';
						case 2:
							return 'UNKNOWN';
						case 3:
							return 'INVALID_ARGUMENT';
						case 4:
							return 'DEADLINE_EXCEEDED';
						case 5:
							return 'NOT_FOUND';
						case 6:
							return 'ALREADY_EXISTS';
						case 7:
							return 'PERMISSION_DENIED';
						case 16:
							return 'UNAUTHENTICATED';
						case 8:
							return 'RESOURCE_EXHAUSTED';
						case 9:
							return 'FAILED_PRECONDITION';
						case 10:
							return 'ABORTED';
						case 11:
							return 'OUT_OF_RANGE';
						case 12:
							return 'UNIMPLEMENTED';
						case 13:
							return 'INTERNAL';
						case 14:
							return 'UNAVAILABLE';
						case 15:
							return 'DATA_LOSS';
						default:
							return '';
					}
				}
				function E(a, b, c) {
					c = void 0 === c ? {} : c;
					b = Error.call(this, b);
					this.message = b.message;
					'stack' in b && (this.stack = b.stack);
					this.code = a;
					this.metadata = c;
				}
				oa(E, Error);
				E.prototype.toString = function () {
					var a = 'RpcError(' + (Ba(this.code) || String(this.code)) + ')';
					this.message && (a += ': ' + this.message);
					return a;
				};
				E.prototype.name = 'RpcError';
				function Ca(a) {
					this.a = a;
				}
				Ca.prototype.on = function (a, b) {
					return 'data' == a || 'error' == a ? this : this.a.on(a, b);
				};
				Ca.prototype.removeListener = function (a, b) {
					return this.a.removeListener(a, b);
				};
				Ca.prototype.cancel = function () {
					this.a.cancel();
				};
				function Da(a) {
					switch (a) {
						case 0:
							return 'No Error';
						case 1:
							return 'Access denied to content document';
						case 2:
							return 'File not found';
						case 3:
							return 'Firefox silently errored';
						case 4:
							return 'Application custom error';
						case 5:
							return 'An exception occurred';
						case 6:
							return 'Http response at 400 or 500 level';
						case 7:
							return 'Request was aborted';
						case 8:
							return 'Request timed out';
						case 9:
							return 'The resource is not available offline';
						default:
							return 'Unrecognized error code';
					}
				}
				function F(a) {
					if (Error.captureStackTrace) Error.captureStackTrace(this, F);
					else {
						var b = Error().stack;
						b && (this.stack = b);
					}
					a && (this.message = String(a));
				}
				B(F, Error);
				F.prototype.name = 'CustomError';
				function Ea(a, b) {
					a = a.split('%s');
					for (var c = '', d = a.length - 1, f = 0; f < d; f++) c += a[f] + (f < b.length ? b[f] : '%s');
					F.call(this, c + a[d]);
				}
				B(Ea, F);
				Ea.prototype.name = 'AssertionError';
				function Fa(a, b) {
					throw new Ea('Failure' + (a ? ': ' + a : ''), Array.prototype.slice.call(arguments, 1));
				}
				function Ga() {
					this.l = null;
					this.i = [];
					this.m = 0;
					this.b = Ha;
					this.f = this.a = this.h = 0;
					this.c = null;
					this.g = 0;
				}
				function Ia(a, b) {
					function c(l) {
						l == Ja ? (e.h = l) : l == G ? (e.h = l) : Ka(e, h, k, 'invalid frame byte');
						e.b = La;
						e.a = 0;
						e.f = 0;
					}
					function d(l) {
						e.f++;
						e.a = (e.a << 8) + l;
						4 == e.f &&
							((e.b = Ma),
							(e.g = 0),
							'undefined' !== typeof Uint8Array ? (e.c = new Uint8Array(e.a)) : (e.c = Array(e.a)),
							0 == e.a && g());
					}
					function f(l) {
						e.c[e.g++] = l;
						e.g == e.a && g();
					}
					function g() {
						var l = {};
						l[e.h] = e.c;
						e.i.push(l);
						e.b = Ha;
					}
					var e = a,
						h,
						k = 0;
					for (b instanceof Uint8Array || b instanceof Array ? (h = b) : (h = new Uint8Array(b)); k < h.length; ) {
						switch (e.b) {
							case Na:
								Ka(e, h, k, 'stream already broken');
								break;
							case Ha:
								c(h[k]);
								break;
							case La:
								d(h[k]);
								break;
							case Ma:
								f(h[k]);
								break;
							default:
								throw Error('unexpected parser state: ' + e.b);
						}
						e.m++;
						k++;
					}
					a = e.i;
					e.i = [];
					return 0 < a.length ? a : null;
				}
				var Ha = 0,
					La = 1,
					Ma = 2,
					Na = 3,
					Ja = 0,
					G = 128;
				function Ka(a, b, c, d) {
					a.b = Na;
					a.l = 'The stream is broken @' + a.m + '/' + c + '. Error: ' + d + '. With input:\n' + b;
					throw Error(a.l);
				}
				var Oa = Array.prototype.indexOf
					? function (a, b) {
							return Array.prototype.indexOf.call(a, b, void 0);
						}
					: function (a, b) {
							if ('string' === typeof a) return 'string' !== typeof b || 1 != b.length ? -1 : a.indexOf(b, 0);
							for (var c = 0; c < a.length; c++) if (c in a && a[c] === b) return c;
							return -1;
						};
				var Pa = String.prototype.trim
					? function (a) {
							return a.trim();
						}
					: function (a) {
							return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1];
						};
				function H(a, b) {
					return -1 != a.indexOf(b);
				}
				function Qa(a, b) {
					return a < b ? -1 : a > b ? 1 : 0;
				}
				var I;
				a: {
					var Ra = x.navigator;
					if (Ra) {
						var Sa = Ra.userAgent;
						if (Sa) {
							I = Sa;
							break a;
						}
					}
					I = '';
				}
				function Ta(a, b) {
					for (var c in a) b.call(void 0, a[c], c, a);
				}
				function Ua(a, b) {
					var c = {},
						d;
					for (d in a) c[d] = b.call(void 0, a[d], d, a);
					return c;
				}
				var Va = 'constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf'.split(
					' '
				);
				function Wa(a, b) {
					for (var c, d, f = 1; f < arguments.length; f++) {
						d = arguments[f];
						for (c in d) a[c] = d[c];
						for (var g = 0; g < Va.length; g++)
							((c = Va[g]), Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]));
					}
				}
				function Xa(a) {
					var b = 1;
					a = a.split(':');
					for (var c = []; 0 < b && a.length; ) (c.push(a.shift()), b--);
					a.length && c.push(a.join(':'));
					return c;
				}
				function Ya(a) {
					Ya[' '](a);
					return a;
				}
				Ya[' '] = ra;
				function Za(a) {
					var b = $a;
					return Object.prototype.hasOwnProperty.call(b, 9) ? b[9] : (b[9] = a(9));
				}
				var ab = H(I, 'Opera'),
					bb = H(I, 'Trident') || H(I, 'MSIE'),
					cb = H(I, 'Edge'),
					db =
						H(I, 'Gecko') &&
						!(H(I.toLowerCase(), 'webkit') && !H(I, 'Edge')) &&
						!(H(I, 'Trident') || H(I, 'MSIE')) &&
						!H(I, 'Edge'),
					eb = H(I.toLowerCase(), 'webkit') && !H(I, 'Edge'),
					fb;
				a: {
					var gb = '',
						hb = (function () {
							var a = I;
							if (db) return /rv:([^\);]+)(\)|;)/.exec(a);
							if (cb) return /Edge\/([\d\.]+)/.exec(a);
							if (bb) return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);
							if (eb) return /WebKit\/(\S+)/.exec(a);
							if (ab) return /(?:Version)[ \/]?(\S+)/.exec(a);
						})();
					hb && (gb = hb ? hb[1] : '');
					if (bb) {
						var ib,
							jb = x.document;
						ib = jb ? jb.documentMode : void 0;
						if (null != ib && ib > parseFloat(gb)) {
							fb = String(ib);
							break a;
						}
					}
					fb = gb;
				}
				var $a = {};
				function kb() {
					return Za(function () {
						for (
							var a = 0, b = Pa(String(fb)).split('.'), c = Pa('9').split('.'), d = Math.max(b.length, c.length), f = 0;
							0 == a && f < d;
							f++
						) {
							var g = b[f] || '',
								e = c[f] || '';
							do {
								g = /(\d*)(\D*)(.*)/.exec(g) || ['', '', '', ''];
								e = /(\d*)(\D*)(.*)/.exec(e) || ['', '', '', ''];
								if (0 == g[0].length && 0 == e[0].length) break;
								a =
									Qa(0 == g[1].length ? 0 : parseInt(g[1], 10), 0 == e[1].length ? 0 : parseInt(e[1], 10)) ||
									Qa(0 == g[2].length, 0 == e[2].length) ||
									Qa(g[2], e[2]);
								g = g[3];
								e = e[3];
							} while (0 == a);
						}
						return 0 <= a;
					});
				}
				function lb() {
					0 != mb && ((Object.prototype.hasOwnProperty.call(this, ta) && this[ta]) || (this[ta] = ++ua));
					this.K = this.K;
				}
				var mb = 0;
				lb.prototype.K = !1;
				var nb =
					Object.freeze ||
					function (a) {
						return a;
					};
				function J(a, b) {
					this.type = a;
					this.a = this.target = b;
					this.defaultPrevented = !1;
				}
				J.prototype.b = function () {
					this.defaultPrevented = !0;
				};
				var ob = (function () {
					if (!x.addEventListener || !Object.defineProperty) return !1;
					var a = !1,
						b = Object.defineProperty({}, 'passive', {
							get: function () {
								a = !0;
							}
						});
					try {
						(x.addEventListener('test', ra, b), x.removeEventListener('test', ra, b));
					} catch (c) {}
					return a;
				})();
				function K(a, b) {
					J.call(this, a ? a.type : '');
					this.relatedTarget = this.a = this.target = null;
					this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
					this.key = '';
					this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;
					this.pointerId = 0;
					this.pointerType = '';
					this.c = null;
					if (a) {
						var c = (this.type = a.type),
							d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
						this.target = a.target || a.srcElement;
						this.a = b;
						if ((b = a.relatedTarget)) {
							if (db) {
								a: {
									try {
										Ya(b.nodeName);
										var f = !0;
										break a;
									} catch (g) {}
									f = !1;
								}
								f || (b = null);
							}
						} else 'mouseover' == c ? (b = a.fromElement) : 'mouseout' == c && (b = a.toElement);
						this.relatedTarget = b;
						d
							? ((this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX),
								(this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY),
								(this.screenX = d.screenX || 0),
								(this.screenY = d.screenY || 0))
							: ((this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX),
								(this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY),
								(this.screenX = a.screenX || 0),
								(this.screenY = a.screenY || 0));
						this.button = a.button;
						this.key = a.key || '';
						this.ctrlKey = a.ctrlKey;
						this.altKey = a.altKey;
						this.shiftKey = a.shiftKey;
						this.metaKey = a.metaKey;
						this.pointerId = a.pointerId || 0;
						this.pointerType = 'string' === typeof a.pointerType ? a.pointerType : pb[a.pointerType] || '';
						this.c = a;
						a.defaultPrevented && K.O.b.call(this);
					}
				}
				B(K, J);
				var pb = nb({ 2: 'touch', 3: 'pen', 4: 'mouse' });
				K.prototype.b = function () {
					K.O.b.call(this);
					var a = this.c;
					a.preventDefault ? a.preventDefault() : (a.returnValue = !1);
				};
				var M = 'closure_listenable_' + ((1e6 * Math.random()) | 0);
				var qb = 0;
				function rb(a, b, c, d, f) {
					this.listener = a;
					this.proxy = null;
					this.src = b;
					this.type = c;
					this.capture = !!d;
					this.H = f;
					this.key = ++qb;
					this.A = this.D = !1;
				}
				function sb(a) {
					a.A = !0;
					a.listener = null;
					a.proxy = null;
					a.src = null;
					a.H = null;
				}
				function tb(a) {
					this.src = a;
					this.a = {};
					this.b = 0;
				}
				tb.prototype.add = function (a, b, c, d, f) {
					var g = a.toString();
					a = this.a[g];
					a || ((a = this.a[g] = []), this.b++);
					var e = ub(a, b, d, f);
					-1 < e ? ((b = a[e]), c || (b.D = !1)) : ((b = new rb(b, this.src, g, !!d, f)), (b.D = c), a.push(b));
					return b;
				};
				tb.prototype.remove = function (a, b, c, d) {
					a = a.toString();
					if (!(a in this.a)) return !1;
					var f = this.a[a];
					b = ub(f, b, c, d);
					return -1 < b
						? (sb(f[b]), Array.prototype.splice.call(f, b, 1), 0 == f.length && (delete this.a[a], this.b--), !0)
						: !1;
				};
				function vb(a, b) {
					var c = b.type;
					if (c in a.a) {
						var d = a.a[c],
							f = Oa(d, b),
							g;
						(g = 0 <= f) && Array.prototype.splice.call(d, f, 1);
						g && (sb(b), 0 == a.a[c].length && (delete a.a[c], a.b--));
					}
				}
				function ub(a, b, c, d) {
					for (var f = 0; f < a.length; ++f) {
						var g = a[f];
						if (!g.A && g.listener == b && g.capture == !!c && g.H == d) return f;
					}
					return -1;
				}
				var wb = 'closure_lm_' + ((1e6 * Math.random()) | 0),
					xb = {},
					yb = 0;
				function zb(a, b, c, d, f) {
					if (d && d.once) Ab(a, b, c, d, f);
					else if (Array.isArray(b)) for (var g = 0; g < b.length; g++) zb(a, b[g], c, d, f);
					else
						((c = Bb(c)), a && a[M] ? a.f.add(String(b), c, !1, sa(d) ? !!d.capture : !!d, f) : Cb(a, b, c, !1, d, f));
				}
				function Cb(a, b, c, d, f, g) {
					if (!b) throw Error('Invalid event type');
					var e = sa(f) ? !!f.capture : !!f,
						h = Db(a);
					h || (a[wb] = h = new tb(a));
					c = h.add(b, c, d, e, g);
					if (!c.proxy) {
						d = Eb();
						c.proxy = d;
						d.src = a;
						d.listener = c;
						if (a.addEventListener) (ob || (f = e), void 0 === f && (f = !1), a.addEventListener(b.toString(), d, f));
						else if (a.attachEvent) a.attachEvent(Fb(b.toString()), d);
						else if (a.addListener && a.removeListener) a.addListener(d);
						else throw Error('addEventListener and attachEvent are unavailable.');
						yb++;
					}
				}
				function Eb() {
					function a(c) {
						return b.call(a.src, a.listener, c);
					}
					var b = Gb;
					return a;
				}
				function Ab(a, b, c, d, f) {
					if (Array.isArray(b)) for (var g = 0; g < b.length; g++) Ab(a, b[g], c, d, f);
					else
						((c = Bb(c)), a && a[M] ? a.f.add(String(b), c, !0, sa(d) ? !!d.capture : !!d, f) : Cb(a, b, c, !0, d, f));
				}
				function Hb(a, b, c, d, f) {
					if (Array.isArray(b)) for (var g = 0; g < b.length; g++) Hb(a, b[g], c, d, f);
					else
						((d = sa(d) ? !!d.capture : !!d), (c = Bb(c)), a && a[M])
							? a.f.remove(String(b), c, d, f)
							: a &&
								(a = Db(a)) &&
								((b = a.a[b.toString()]), (a = -1), b && (a = ub(b, c, d, f)), (c = -1 < a ? b[a] : null) && Ib(c));
				}
				function Ib(a) {
					if ('number' !== typeof a && a && !a.A) {
						var b = a.src;
						if (b && b[M]) vb(b.f, a);
						else {
							var c = a.type,
								d = a.proxy;
							b.removeEventListener
								? b.removeEventListener(c, d, a.capture)
								: b.detachEvent
									? b.detachEvent(Fb(c), d)
									: b.addListener && b.removeListener && b.removeListener(d);
							yb--;
							(c = Db(b)) ? (vb(c, a), 0 == c.b && ((c.src = null), (b[wb] = null))) : sb(a);
						}
					}
				}
				function Fb(a) {
					return a in xb ? xb[a] : (xb[a] = 'on' + a);
				}
				function Gb(a, b) {
					if (a.A) a = !0;
					else {
						b = new K(b, this);
						var c = a.listener,
							d = a.H || a.src;
						a.D && Ib(a);
						a = c.call(d, b);
					}
					return a;
				}
				function Db(a) {
					a = a[wb];
					return a instanceof tb ? a : null;
				}
				var Jb = '__closure_events_fn_' + ((1e9 * Math.random()) >>> 0);
				function Bb(a) {
					if ('function' === typeof a) return a;
					a[Jb] ||
						(a[Jb] = function (b) {
							return a.handleEvent(b);
						});
					return a[Jb];
				}
				function N() {
					lb.call(this);
					this.f = new tb(this);
					this.U = this;
				}
				B(N, lb);
				N.prototype[M] = !0;
				N.prototype.addEventListener = function (a, b, c, d) {
					zb(this, a, b, c, d);
				};
				N.prototype.removeEventListener = function (a, b, c, d) {
					Hb(this, a, b, c, d);
				};
				function O(a, b) {
					a = a.U;
					var c = b.type || b;
					if ('string' === typeof b) b = new J(b, a);
					else if (b instanceof J) b.target = b.target || a;
					else {
						var d = b;
						b = new J(c, a);
						Wa(b, d);
					}
					a = b.a = a;
					Kb(a, c, !0, b);
					Kb(a, c, !1, b);
				}
				function Kb(a, b, c, d) {
					if ((b = a.f.a[String(b)])) {
						b = b.concat();
						for (var f = !0, g = 0; g < b.length; ++g) {
							var e = b[g];
							if (e && !e.A && e.capture == c) {
								var h = e.listener,
									k = e.H || e.src;
								e.D && vb(a.f, e);
								f = !1 !== h.call(k, d) && f;
							}
						}
					}
				}
				var Lb = x;
				function Mb(a, b, c) {
					if ('function' === typeof a) c && (a = z(a, c));
					else if (a && 'function' == typeof a.handleEvent) a = z(a.handleEvent, a);
					else throw Error('Invalid listener argument');
					return 2147483647 < Number(b) ? -1 : Lb.setTimeout(a, b || 0);
				}
				function Nb(a, b) {
					this.name = a;
					this.value = b;
				}
				Nb.prototype.toString = function () {
					return this.name;
				};
				var Ob = new Nb('OFF', Infinity),
					Pb = new Nb('SEVERE', 1e3),
					Qb = new Nb('CONFIG', 700),
					Rb = new Nb('FINE', 500);
				function Tb() {
					this.clear();
				}
				var Ub;
				Tb.prototype.clear = function () {};
				function Vb(a, b, c) {
					this.reset(a || Ob, b, c, void 0, void 0);
				}
				Vb.prototype.reset = function () {};
				function Wb(a, b) {
					this.a = null;
					this.f = [];
					this.b = (void 0 === b ? null : b) || null;
					this.c = [];
					this.g = {
						getName: function () {
							return a;
						}
					};
				}
				function Xb(a) {
					if (a.a) return a.a;
					if (a.b) return Xb(a.b);
					Fa('Root logger has no level set.');
					return Ob;
				}
				function Yb(a, b) {
					for (; a; )
						(a.f.forEach(function (c) {
							c(b);
						}),
							(a = a.b));
				}
				function Zb() {
					this.entries = {};
					var a = new Wb('');
					a.a = Qb;
					this.entries[''] = a;
				}
				var $b;
				function ac(a, b, c) {
					var d = a.entries[b];
					if (d) return (void 0 !== c && (d.a = c), d);
					d = ac(a, b.substr(0, b.lastIndexOf('.')));
					var f = new Wb(b, d);
					a.entries[b] = f;
					d.c.push(f);
					void 0 !== c && (f.a = c);
					return f;
				}
				function bc() {
					$b || ($b = new Zb());
					return $b;
				}
				function cc(a, b, c) {
					var d;
					if ((d = a))
						if ((d = a && b)) {
							d = b.value;
							var f = a ? Xb(ac(bc(), a.getName())) : Ob;
							d = d >= f.value;
						}
					d &&
						((b = b || Ob),
						(d = ac(bc(), a.getName())),
						'function' === typeof c && (c = c()),
						Ub || (Ub = new Tb()),
						(a = a.getName()),
						(a = new Vb(b, c, a)),
						Yb(d, a));
				}
				function P(a, b) {
					a && cc(a, Rb, b);
				}
				function dc() {}
				dc.prototype.a = null;
				function ec(a) {
					var b;
					(b = a.a) || ((b = {}), fc(a) && ((b[0] = !0), (b[1] = !0)), (b = a.a = b));
					return b;
				}
				var gc;
				function hc() {}
				B(hc, dc);
				function ic(a) {
					return (a = fc(a)) ? new ActiveXObject(a) : new XMLHttpRequest();
				}
				function fc(a) {
					if (!a.b && 'undefined' == typeof XMLHttpRequest && 'undefined' != typeof ActiveXObject) {
						for (
							var b = ['MSXML2.XMLHTTP.6.0', 'MSXML2.XMLHTTP.3.0', 'MSXML2.XMLHTTP', 'Microsoft.XMLHTTP'], c = 0;
							c < b.length;
							c++
						) {
							var d = b[c];
							try {
								return (new ActiveXObject(d), (a.b = d));
							} catch (f) {}
						}
						throw Error('Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed');
					}
					return a.b;
				}
				gc = new hc();
				t();
				u();
				function jc(a, b) {
					this.b = a[x.Symbol.iterator]();
					this.c = b;
					this.f = 0;
				}
				jc.prototype[Symbol.iterator] = function () {
					return this;
				};
				jc.prototype.next = function () {
					var a = this.b.next();
					return { value: a.done ? void 0 : this.c.call(void 0, a.value, this.f++), done: a.done };
				};
				function kc(a, b) {
					return new jc(a, b);
				}
				t();
				u();
				t();
				u();
				var lc = 'StopIteration' in x ? x.StopIteration : { message: 'StopIteration', stack: '' };
				function Q() {}
				Q.prototype.next = function () {
					return Q.prototype.a.call(this);
				};
				Q.prototype.a = function () {
					throw lc;
				};
				Q.prototype.u = function () {
					return this;
				};
				function mc(a) {
					if (a instanceof R || a instanceof S || a instanceof T) return a;
					if ('function' == typeof a.next)
						return new R(function () {
							return nc(a);
						});
					t();
					u();
					if ('function' == typeof a[Symbol.iterator])
						return (
							t(),
							u(),
							new R(function () {
								return a[Symbol.iterator]();
							})
						);
					if ('function' == typeof a.u)
						return new R(function () {
							return nc(a.u());
						});
					throw Error('Not an iterator or iterable.');
				}
				function nc(a) {
					if (!(a instanceof Q)) return a;
					var b = !1;
					return {
						next: function () {
							for (var c; !b; )
								try {
									c = a.a();
									break;
								} catch (d) {
									if (d !== lc) throw d;
									b = !0;
								}
							return { value: c, done: b };
						}
					};
				}
				t();
				u();
				function R(a) {
					this.b = a;
				}
				R.prototype.u = function () {
					return new S(this.b());
				};
				R.prototype[Symbol.iterator] = function () {
					return new T(this.b());
				};
				R.prototype.c = function () {
					return new T(this.b());
				};
				t();
				u();
				function S(a) {
					this.b = a;
				}
				oa(S, Q);
				S.prototype.a = function () {
					var a = this.b.next();
					if (a.done) throw lc;
					return a.value;
				};
				S.prototype.next = function () {
					return S.prototype.a.call(this);
				};
				S.prototype[Symbol.iterator] = function () {
					return new T(this.b);
				};
				S.prototype.c = function () {
					return new T(this.b);
				};
				function T(a) {
					R.call(this, function () {
						return a;
					});
					this.f = a;
				}
				oa(T, R);
				T.prototype.next = function () {
					return this.f.next();
				};
				function oc(a, b) {
					this.o = {};
					this.j = [];
					this.B = this.size = 0;
					var c = arguments.length;
					if (1 < c) {
						if (c % 2) throw Error('Uneven number of arguments');
						for (var d = 0; d < c; d += 2) this.set(arguments[d], arguments[d + 1]);
					} else a && this.addAll(a);
				}
				n = oc.prototype;
				n.G = function () {
					pc(this);
					return this.j.concat();
				};
				n.has = function (a) {
					return U(this.o, a);
				};
				n.clear = function () {
					this.o = {};
					this.B = this.size = this.j.length = 0;
				};
				n.remove = function (a) {
					return this.delete(a);
				};
				n.delete = function (a) {
					return U(this.o, a)
						? (delete this.o[a], --this.size, this.B++, this.j.length > 2 * this.size && pc(this), !0)
						: !1;
				};
				function pc(a) {
					if (a.size != a.j.length) {
						for (var b = 0, c = 0; b < a.j.length; ) {
							var d = a.j[b];
							U(a.o, d) && (a.j[c++] = d);
							b++;
						}
						a.j.length = c;
					}
					if (a.size != a.j.length) {
						var f = {};
						for (c = b = 0; b < a.j.length; ) ((d = a.j[b]), U(f, d) || ((a.j[c++] = d), (f[d] = 1)), b++);
						a.j.length = c;
					}
				}
				n.get = function (a, b) {
					return U(this.o, a) ? this.o[a] : b;
				};
				n.set = function (a, b) {
					U(this.o, a) || ((this.size += 1), this.j.push(a), this.B++);
					this.o[a] = b;
				};
				n.addAll = function (a) {
					if (a instanceof oc) for (var b = a.G(), c = 0; c < b.length; c++) this.set(b[c], a.get(b[c]));
					else for (b in a) this.set(b, a[b]);
				};
				n.forEach = function (a, b) {
					for (var c = this.G(), d = 0; d < c.length; d++) {
						var f = c[d],
							g = this.get(f);
						a.call(b, g, f, this);
					}
				};
				n.clone = function () {
					return new oc(this);
				};
				n.keys = function () {
					return mc(this.u(!0)).c();
				};
				n.values = function () {
					return mc(this.u(!1)).c();
				};
				n.entries = function () {
					var a = this;
					return kc(this.keys(), function (b) {
						return [b, a.get(b)];
					});
				};
				n.u = function (a) {
					pc(this);
					var b = 0,
						c = this.B,
						d = this,
						f = new Q();
					f.a = function () {
						if (c != d.B) throw Error('The map has changed since the iterator was created');
						if (b >= d.j.length) throw lc;
						var g = d.j[b++];
						return a ? g : d.o[g];
					};
					f.next = f.a.bind(f);
					return f;
				};
				function U(a, b) {
					return Object.prototype.hasOwnProperty.call(a, b);
				}
				var qc =
					/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;
				function rc(a) {
					N.call(this);
					this.headers = new oc();
					this.C = a || null;
					this.c = !1;
					this.J = this.a = null;
					this.P = this.v = '';
					this.g = 0;
					this.l = '';
					this.i = this.N = this.s = this.L = !1;
					this.h = 0;
					this.w = null;
					this.m = sc;
					this.I = this.M = !1;
				}
				B(rc, N);
				var sc = '';
				rc.prototype.b = ac(bc(), 'goog.net.XhrIo', void 0).g;
				var tc = /^https?$/i,
					uc = ['POST', 'PUT'];
				function vc(a, b, c) {
					if (a.a) throw Error('[goog.net.XhrIo] Object is active with another request=' + a.v + '; newUri=' + b);
					a.v = b;
					a.l = '';
					a.g = 0;
					a.P = 'POST';
					a.L = !1;
					a.c = !0;
					a.a = a.C ? ic(a.C) : ic(gc);
					a.J = a.C ? ec(a.C) : ec(gc);
					a.a.onreadystatechange = z(a.R, a);
					try {
						(P(a.b, V(a, 'Opening Xhr')), (a.N = !0), a.a.open('POST', String(b), !0), (a.N = !1));
					} catch (g) {
						P(a.b, V(a, 'Error opening Xhr: ' + g.message));
						wc(a, g);
						return;
					}
					b = c || '';
					c = a.headers.clone();
					var d = c.G().find(function (g) {
							return 'content-type' == g.toLowerCase();
						}),
						f = x.FormData && b instanceof x.FormData;
					!(0 <= Oa(uc, 'POST')) || d || f || c.set('Content-Type', 'application/x-www-form-urlencoded;charset=utf-8');
					c.forEach(function (g, e) {
						this.a.setRequestHeader(e, g);
					}, a);
					a.m && (a.a.responseType = a.m);
					'withCredentials' in a.a && a.a.withCredentials !== a.M && (a.a.withCredentials = a.M);
					try {
						(xc(a),
							0 < a.h &&
								((a.I = yc(a.a)),
								P(a.b, V(a, 'Will abort after ' + a.h + 'ms if incomplete, xhr2 ' + a.I)),
								a.I ? ((a.a.timeout = a.h), (a.a.ontimeout = z(a.T, a))) : (a.w = Mb(a.T, a.h, a))),
							P(a.b, V(a, 'Sending request')),
							(a.s = !0),
							a.a.send(b),
							(a.s = !1));
					} catch (g) {
						(P(a.b, V(a, 'Send error: ' + g.message)), wc(a, g));
					}
				}
				function yc(a) {
					return bb && kb() && 'number' === typeof a.timeout && void 0 !== a.ontimeout;
				}
				n = rc.prototype;
				n.T = function () {
					'undefined' != typeof qa &&
						this.a &&
						((this.l = 'Timed out after ' + this.h + 'ms, aborting'),
						(this.g = 8),
						P(this.b, V(this, this.l)),
						O(this, 'timeout'),
						this.abort(8));
				};
				function wc(a, b) {
					a.c = !1;
					a.a && ((a.i = !0), a.a.abort(), (a.i = !1));
					a.l = b;
					a.g = 5;
					zc(a);
					Ac(a);
				}
				function zc(a) {
					a.L || ((a.L = !0), O(a, 'complete'), O(a, 'error'));
				}
				n.abort = function (a) {
					this.a &&
						this.c &&
						(P(this.b, V(this, 'Aborting')),
						(this.c = !1),
						(this.i = !0),
						this.a.abort(),
						(this.i = !1),
						(this.g = a || 7),
						O(this, 'complete'),
						O(this, 'abort'),
						Ac(this));
				};
				n.R = function () {
					this.K || (this.N || this.s || this.i ? Bc(this) : this.W());
				};
				n.W = function () {
					Bc(this);
				};
				function Bc(a) {
					if (a.c && 'undefined' != typeof qa)
						if (a.J[1] && 4 == W(a) && 2 == a.getStatus()) P(a.b, V(a, 'Local request error detected and ignored'));
						else if (a.s && 4 == W(a)) Mb(a.R, 0, a);
						else if ((O(a, 'readystatechange'), 4 == W(a))) {
							P(a.b, V(a, 'Request complete'));
							a.c = !1;
							try {
								var b = a.getStatus();
								a: switch (b) {
									case 200:
									case 201:
									case 202:
									case 204:
									case 206:
									case 304:
									case 1223:
										var c = !0;
										break a;
									default:
										c = !1;
								}
								var d;
								if (!(d = c)) {
									var f;
									if ((f = 0 === b)) {
										var g = String(a.v).match(qc)[1] || null;
										if (!g && x.self && x.self.location) {
											var e = x.self.location.protocol;
											g = e.substr(0, e.length - 1);
										}
										f = !tc.test(g ? g.toLowerCase() : '');
									}
									d = f;
								}
								if (d) (O(a, 'complete'), O(a, 'success'));
								else {
									a.g = 6;
									try {
										var h = 2 < W(a) ? a.a.statusText : '';
									} catch (k) {
										(P(a.b, 'Can not get status: ' + k.message), (h = ''));
									}
									a.l = h + ' [' + a.getStatus() + ']';
									zc(a);
								}
							} finally {
								Ac(a);
							}
						}
				}
				function Ac(a) {
					if (a.a) {
						xc(a);
						var b = a.a,
							c = a.J[0] ? ra : null;
						a.a = null;
						a.J = null;
						O(a, 'ready');
						try {
							b.onreadystatechange = c;
						} catch (d) {
							(a = a.b) && cc(a, Pb, 'Problem encountered resetting onreadystatechange: ' + d.message);
						}
					}
				}
				function xc(a) {
					a.a && a.I && (a.a.ontimeout = null);
					a.w && (Lb.clearTimeout(a.w), (a.w = null));
				}
				function W(a) {
					return a.a ? a.a.readyState : 0;
				}
				n.getStatus = function () {
					try {
						return 2 < W(this) ? this.a.status : -1;
					} catch (a) {
						return -1;
					}
				};
				function Cc(a) {
					try {
						if (!a.a) return null;
						if ('response' in a.a) return a.a.response;
						switch (a.m) {
							case sc:
							case 'text':
								return a.a.responseText;
							case 'arraybuffer':
								if ('mozResponseArrayBuffer' in a.a) return a.a.mozResponseArrayBuffer;
						}
						var b = a.b;
						b && cc(b, Pb, 'Response type ' + a.m + ' is not supported on this browser');
						return null;
					} catch (c) {
						return (P(a.b, 'Can not get response: ' + c.message), null);
					}
				}
				function Dc(a) {
					var b = {};
					a = (a.a && 4 == W(a) ? a.a.getAllResponseHeaders() || '' : '').split('\r\n');
					for (var c = 0; c < a.length; c++)
						if (!/^[\s\xa0]*$/.test(a[c])) {
							var d = Xa(a[c]),
								f = d[0];
							d = d[1];
							if ('string' === typeof d) {
								d = d.trim();
								var g = b[f] || [];
								b[f] = g;
								g.push(d);
							}
						}
					return Ua(b, function (e) {
						return e.join(', ');
					});
				}
				function V(a, b) {
					return b + ' [' + a.P + ' ' + a.v + ' ' + a.getStatus() + ']';
				}
				var Ec = {},
					Fc = null;
				function Gc(a) {
					var b = a.length,
						c = (3 * b) / 4;
					c % 3 ? (c = Math.floor(c)) : H('=.', a[b - 1]) && (c = H('=.', a[b - 2]) ? c - 2 : c - 1);
					var d = new Uint8Array(c),
						f = 0;
					Hc(a, function (g) {
						d[f++] = g;
					});
					return d.subarray(0, f);
				}
				function Hc(a, b) {
					function c(k) {
						for (; d < a.length; ) {
							var l = a.charAt(d++),
								m = Fc[l];
							if (null != m) return m;
							if (!/^[\s\xa0]*$/.test(l)) throw Error('Unknown base64 encoding at char: ' + l);
						}
						return k;
					}
					Ic();
					for (var d = 0; ; ) {
						var f = c(-1),
							g = c(0),
							e = c(64),
							h = c(64);
						if (64 === h && -1 === f) break;
						b((f << 2) | (g >> 4));
						64 != e && (b(((g << 4) & 240) | (e >> 2)), 64 != h && b(((e << 6) & 192) | h));
					}
				}
				function Ic() {
					if (!Fc) {
						Fc = {};
						for (
							var a = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'.split(''),
								b = ['+/=', '+/', '-_=', '-_.', '-_'],
								c = 0;
							5 > c;
							c++
						) {
							var d = a.concat(b[c].split(''));
							Ec[c] = d;
							for (var f = 0; f < d.length; f++) {
								var g = d[f];
								void 0 === Fc[g] && (Fc[g] = f);
							}
						}
					}
				}
				var Jc = ['content-type', 'grpc-status', 'grpc-message'];
				function X(a) {
					this.a = a.Z;
					this.m = null;
					this.b = [];
					this.h = [];
					this.g = [];
					this.f = [];
					this.c = [];
					this.l = !1;
					this.i = 0;
					this.s = new Ga();
					var b = this;
					zb(this.a, 'readystatechange', function () {
						var c = b.a;
						if ((c = c.a ? c.a.getResponseHeader('Content-Type') : null)) {
							c = c.toLowerCase();
							if (0 == c.lastIndexOf('application/grpc-web-text', 0)) {
								c = b.a;
								try {
									var d = c.a ? c.a.responseText : '';
								} catch (k) {
									(P(c.b, 'Can not get responseText: ' + k.message), (d = ''));
								}
								c = d || '';
								d = c.length - (c.length % 4);
								c = c.substr(b.i, d - b.i);
								if (0 == c.length) return;
								b.i = d;
								c = Gc(c);
							} else if (0 == c.lastIndexOf('application/grpc', 0)) c = new Uint8Array(Cc(b.a));
							else {
								Y(b, new E(2, 'Unknown Content-type received.'));
								return;
							}
							d = null;
							try {
								d = Ia(b.s, c);
							} catch (k) {
								Y(b, new E(2, 'Error in parsing response body'));
							}
							if (d)
								for (c = 0; c < d.length; c++) {
									if (Ja in d[c]) {
										var f = d[c][Ja];
										if (f) {
											var g = !1,
												e = void 0;
											try {
												((e = b.m(f)), (g = !0));
											} catch (k) {
												Y(b, new E(13, 'Error when deserializing response data; error: ' + k + (', response: ' + e)));
											}
											if (g) for (f = e, g = 0; g < b.b.length; g++) b.b[g](f);
										}
									}
									if (G in d[c] && 0 < d[c][G].length) {
										f = '';
										for (g = 0; g < d[c][G].length; g++) f += String.fromCharCode(d[c][G][g]);
										f = f.trim().split('\r\n');
										g = {};
										for (e = 0; e < f.length; e++) {
											var h = f[e].indexOf(':');
											g[f[e].substring(0, h).trim()] = f[e].substring(h + 1).trim();
										}
										f = g;
										g = 0;
										e = '';
										'grpc-status' in f && ((g = Number(f['grpc-status'])), delete f['grpc-status']);
										'grpc-message' in f && ((e = f['grpc-message']), delete f['grpc-message']);
										Y(b, new E(g, e, f));
									}
								}
						}
					});
					zb(this.a, 'complete', function () {
						var c = b.a.g,
							d = 2,
							f = '',
							g = {};
						d = Dc(b.a);
						var e = {};
						for (h in d) d.hasOwnProperty(h) && (e[h.toLowerCase()] = d[h]);
						Object.keys(e).forEach(function (k) {
							Jc.includes(k) || (g[k] = e[k]);
						});
						Kc(b, g);
						var h = -1;
						if (0 != c) {
							switch (c) {
								case 7:
									d = 10;
									break;
								case 8:
									d = 4;
									break;
								case 6:
									h = b.a.getStatus();
									d = Aa(h);
									break;
								default:
									d = 14;
							}
							(10 == d && b.l) || ((f = Da(c)), -1 != h && (f += ', http status code: ' + h), Y(b, new E(d, f)));
						} else
							((c = !1),
								'grpc-status' in e &&
									((d = Number(e['grpc-status'])),
									'grpc-message' in e && (f = e['grpc-message']),
									0 != d && (Y(b, new E(d, f || '', e)), (c = !0))),
								c || Lc(b));
					});
				}
				X.prototype.on = function (a, b) {
					'data' == a
						? this.b.push(b)
						: 'status' == a
							? this.h.push(b)
							: 'metadata' == a
								? this.g.push(b)
								: 'end' == a
									? this.c.push(b)
									: 'error' == a && this.f.push(b);
					return this;
				};
				function Mc(a, b) {
					b = a.indexOf(b);
					-1 < b && a.splice(b, 1);
				}
				X.prototype.removeListener = function (a, b) {
					'data' == a
						? Mc(this.b, b)
						: 'status' == a
							? Mc(this.h, b)
							: 'metadata' == a
								? Mc(this.g, b)
								: 'end' == a
									? Mc(this.c, b)
									: 'error' == a && Mc(this.f, b);
					return this;
				};
				X.prototype.cancel = function () {
					this.l = !0;
					this.a.abort();
				};
				function Y(a, b) {
					if (0 != b.code)
						for (var c = new E(b.code, decodeURIComponent(b.message || ''), b.metadata), d = 0; d < a.f.length; d++)
							a.f[d](c);
					b = { code: b.code, details: decodeURIComponent(b.message || ''), metadata: b.metadata };
					for (c = 0; c < a.h.length; c++) a.h[c](b);
				}
				function Kc(a, b) {
					for (var c = 0; c < a.g.length; c++) a.g[c](b);
				}
				function Lc(a) {
					for (var b = 0; b < a.c.length; b++) a.c[b]();
				}
				X.prototype.cancel = X.prototype.cancel;
				X.prototype.removeListener = X.prototype.removeListener;
				X.prototype.on = X.prototype.on;
				function Nc(a) {
					var b = '';
					Ta(a, function (c, d) {
						b += d;
						b += ':';
						b += c;
						b += '\r\n';
					});
					return b;
				}
				function Z(a, b) {
					a = void 0 === a ? {} : a;
					this.a = a.format || y('format', a) || 'text';
					this.g = a.aa || y('suppressCorsPreflight', a) || !1;
					this.f = a.withCredentials || y('withCredentials', a) || !1;
					this.b = a.$ || y('streamInterceptors', a) || [];
					this.h = a.ba || y('unaryInterceptors', a) || [];
					this.c = b || null;
				}
				Z.prototype.X = function (a, b, c, d, f) {
					var g = this,
						e = a.substr(0, a.length - d.name.length);
					a = Oc(function (h) {
						return Pc(g, h, e);
					}, this.b).call(this, za(d, b, c));
					Qc(a, f, !1);
					return new Ca(a);
				};
				Z.prototype.S = function (a, b, c, d) {
					var f = this,
						g = a.substr(0, a.length - d.name.length);
					return Oc(function (e) {
						return new Promise(function (h, k) {
							var l = Pc(f, e, g),
								m,
								p,
								q;
							Qc(
								l,
								function (w, A, L, Sb, Rc) {
									w
										? k(w)
										: Rc
											? (q = A)
											: L
												? (p = L)
												: Sb
													? (m = Sb)
													: ((w = e.getMethodDescriptor()),
														(A = m),
														(A = void 0 === A ? {} : A),
														h(new D(q, w, A, void 0 === p ? null : p)));
								},
								!0
							);
						});
					}, this.h)
						.call(this, za(d, b, c))
						.then(function (e) {
							return e.getResponseMessage();
						});
				};
				Z.prototype.unaryCall = function (a, b, c, d) {
					return this.S(a, b, c, d);
				};
				Z.prototype.Y = function (a, b, c, d) {
					var f = this,
						g = a.substr(0, a.length - d.name.length);
					return Oc(function (e) {
						return Pc(f, e, g);
					}, this.b).call(this, za(d, b, c));
				};
				function Pc(a, b, c) {
					var d = b.getMethodDescriptor(),
						f = c + d.getName();
					c = a.c ? a.c : new rc();
					c.M = a.f;
					var g = new X({ Z: c });
					g.m = d.b;
					var e = b.getMetadata();
					for (h in e) c.headers.set(h, e[h]);
					'text' == a.a
						? (c.headers.set('Content-Type', 'application/grpc-web-text'),
							c.headers.set('Accept', 'application/grpc-web-text'))
						: c.headers.set('Content-Type', 'application/grpc-web+proto');
					c.headers.set('X-User-Agent', 'grpc-web-javascript/0.1');
					c.headers.set('X-Grpc-Web', '1');
					if (c.headers.has('deadline')) {
						var h = Number(c.headers.get('deadline'));
						h = Math.ceil(h - new Date().getTime());
						c.headers.delete('deadline');
						Infinity === h && (h = 0);
						0 < h && (c.headers.set('grpc-timeout', h + 'm'), (c.h = Math.max(0, Math.max(1e3, Math.ceil(1.1 * h)))));
					}
					if (a.g) {
						e = c.headers;
						h = {};
						for (var k = ha(e.keys()), l = k.next(); !l.done; l = k.next()) ((l = l.value), (h[l] = e.get(l)));
						c.headers.clear();
						b: {
							for (m in h) {
								var m = !1;
								break b;
							}
							m = !0;
						}
						if (!m)
							if (((h = Nc(h)), 'string' === typeof f)) {
								if (
									((m = encodeURIComponent('$httpHeaders')),
									(h = null != h ? '=' + encodeURIComponent(String(h)) : ''),
									(m += h))
								)
									((h = f.indexOf('#')),
										0 > h && (h = f.length),
										(e = f.indexOf('?')),
										0 > e || e > h ? ((e = h), (k = '')) : (k = f.substring(e + 1, h)),
										(f = [f.substr(0, e), k, f.substr(h)]),
										(h = f[1]),
										(f[1] = m ? (h ? h + '&' + m : m) : h),
										(f = f[0] + (f[1] ? '?' + f[1] : '') + f[2]));
							} else f.a('$httpHeaders', h);
					}
					b = (0, d.a)(b.getRequestMessage());
					d = b.length;
					m = [0, 0, 0, 0];
					h = new Uint8Array(5 + d);
					for (e = 3; 0 <= e; e--) ((m[e] = d % 256), (d >>>= 8));
					h.set(new Uint8Array(m), 1);
					h.set(b, 5);
					b = h;
					if ('text' == a.a) {
						a = b;
						var p;
						void 0 === p && (p = 0);
						Ic();
						p = Ec[p];
						b = Array(Math.floor(a.length / 3));
						d = p[64] || '';
						for (m = h = 0; h < a.length - 2; h += 3) {
							l = a[h];
							var q = a[h + 1];
							k = a[h + 2];
							e = p[l >> 2];
							l = p[((l & 3) << 4) | (q >> 4)];
							q = p[((q & 15) << 2) | (k >> 6)];
							k = p[k & 63];
							b[m++] = e + l + q + k;
						}
						e = 0;
						k = d;
						switch (a.length - h) {
							case 2:
								((e = a[h + 1]), (k = p[(e & 15) << 2] || d));
							case 1:
								((a = a[h]), (b[m] = p[a >> 2] + p[((a & 3) << 4) | (e >> 4)] + k + d));
						}
						b = b.join('');
					} else 'binary' == a.a && (c.m = 'arraybuffer');
					vc(c, f, b);
					return g;
				}
				function Qc(a, b, c) {
					var d = !1,
						f = null,
						g = !1;
					a.on('data', function (e) {
						d = !0;
						f = e;
					});
					a.on('error', function (e) {
						0 == e.code || g || ((g = !0), b(e, null));
					});
					a.on('status', function (e) {
						0 == e.code || g
							? c && b(null, null, e)
							: ((g = !0), b({ code: e.code, message: e.details, metadata: e.metadata }, null));
					});
					if (c)
						a.on('metadata', function (e) {
							b(null, null, null, e);
						});
					a.on('end', function () {
						g || (d ? (c ? b(null, f, null, null, !0) : b(null, f)) : b({ code: 2, message: 'Incomplete response' }));
						c && b(null, null);
					});
				}
				function Oc(a, b) {
					var c = a;
					b.forEach(function (d) {
						var f = c;
						c = function (g) {
							return d.intercept(g, f);
						};
					});
					return c;
				}
				Z.prototype.serverStreaming = Z.prototype.Y;
				Z.prototype.unaryCall = Z.prototype.unaryCall;
				Z.prototype.thenableCall = Z.prototype.S;
				Z.prototype.rpcCall = Z.prototype.X;
				module.exports.CallOptions = xa;
				module.exports.MethodDescriptor = ya;
				module.exports.GrpcWebClientBase = Z;
				module.exports.RpcError = E;
				module.exports.StatusCode = {
					OK: 0,
					CANCELLED: 1,
					UNKNOWN: 2,
					INVALID_ARGUMENT: 3,
					DEADLINE_EXCEEDED: 4,
					NOT_FOUND: 5,
					ALREADY_EXISTS: 6,
					PERMISSION_DENIED: 7,
					UNAUTHENTICATED: 16,
					RESOURCE_EXHAUSTED: 8,
					FAILED_PRECONDITION: 9,
					ABORTED: 10,
					OUT_OF_RANGE: 11,
					UNIMPLEMENTED: 12,
					INTERNAL: 13,
					UNAVAILABLE: 14,
					DATA_LOSS: 15
				};
				module.exports.MethodType = {
					UNARY: 'unary',
					SERVER_STREAMING: 'server_streaming',
					BIDI_STREAMING: 'bidi_streaming'
				};
				Lb = ('undefined' !== typeof globalThis && globalThis) || self;

				/***/
			},

		/***/ './ondewo/s2t/speech-to-text_grpc_web_pb.js':
			/*!**************************************************!*\
  !*** ./ondewo/s2t/speech-to-text_grpc_web_pb.js ***!
  \**************************************************/
			/***/ (module, __unused_webpack_exports, __webpack_require__) => {
				/**
				 * @fileoverview gRPC-Web generated client stub for ondewo.s2t
				 * @enhanceable
				 * @public
				 */

				// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
				// versions:
				// 	protoc-gen-grpc-web v1.5.0
				// 	protoc              v6.32.0
				// source: ondewo/s2t/speech-to-text.proto

				/* eslint-disable */
				// @ts-nocheck

				const grpc = {};
				grpc.web = __webpack_require__(/*! grpc-web */ './node_modules/grpc-web/index.js');

				var google_protobuf_empty_pb = __webpack_require__(
					/*! google-protobuf/google/protobuf/empty_pb.js */ './node_modules/google-protobuf/google/protobuf/empty_pb.js'
				);

				var google_protobuf_struct_pb = __webpack_require__(
					/*! google-protobuf/google/protobuf/struct_pb.js */ './node_modules/google-protobuf/google/protobuf/struct_pb.js'
				);
				const proto = {};
				proto.ondewo = {};
				proto.ondewo.s2t = __webpack_require__(/*! ./speech-to-text_pb.js */ './ondewo/s2t/speech-to-text_pb.js');

				/**
				 * @param {string} hostname
				 * @param {?Object} credentials
				 * @param {?grpc.web.ClientOptions} options
				 * @constructor
				 * @struct
				 * @final
				 */
				proto.ondewo.s2t.Speech2TextClient = function (hostname, credentials, options) {
					if (!options) options = {};
					options.format = 'text';

					/**
					 * @private @const {!grpc.web.GrpcWebClientBase} The client
					 */
					this.client_ = new grpc.web.GrpcWebClientBase(options);

					/**
					 * @private @const {string} The hostname
					 */
					this.hostname_ = hostname.replace(/\/+$/, '');
				};

				/**
				 * @param {string} hostname
				 * @param {?Object} credentials
				 * @param {?grpc.web.ClientOptions} options
				 * @constructor
				 * @struct
				 * @final
				 */
				proto.ondewo.s2t.Speech2TextPromiseClient = function (hostname, credentials, options) {
					if (!options) options = {};
					options.format = 'text';

					/**
					 * @private @const {!grpc.web.GrpcWebClientBase} The client
					 */
					this.client_ = new grpc.web.GrpcWebClientBase(options);

					/**
					 * @private @const {string} The hostname
					 */
					this.hostname_ = hostname.replace(/\/+$/, '');
				};

				/**
				 * @const
				 * @type {!grpc.web.MethodDescriptor<
				 *   !proto.ondewo.s2t.TranscribeFileRequest,
				 *   !proto.ondewo.s2t.TranscribeFileResponse>}
				 */
				const methodDescriptor_Speech2Text_TranscribeFile = new grpc.web.MethodDescriptor(
					'/ondewo.s2t.Speech2Text/TranscribeFile',
					grpc.web.MethodType.UNARY,
					proto.ondewo.s2t.TranscribeFileRequest,
					proto.ondewo.s2t.TranscribeFileResponse,
					/**
					 * @param {!proto.ondewo.s2t.TranscribeFileRequest} request
					 * @return {!Uint8Array}
					 */
					function (request) {
						return request.serializeBinary();
					},
					proto.ondewo.s2t.TranscribeFileResponse.deserializeBinary
				);

				/**
				 * @param {!proto.ondewo.s2t.TranscribeFileRequest} request The
				 *     request proto
				 * @param {?Object<string, string>} metadata User defined
				 *     call metadata
				 * @param {function(?grpc.web.RpcError, ?proto.ondewo.s2t.TranscribeFileResponse)}
				 *     callback The callback function(error, response)
				 * @return {!grpc.web.ClientReadableStream<!proto.ondewo.s2t.TranscribeFileResponse>|undefined}
				 *     The XHR Node Readable Stream
				 */
				proto.ondewo.s2t.Speech2TextClient.prototype.transcribeFile = function (request, metadata, callback) {
					return this.client_.rpcCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/TranscribeFile',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_TranscribeFile,
						callback
					);
				};

				/**
				 * @param {!proto.ondewo.s2t.TranscribeFileRequest} request The
				 *     request proto
				 * @param {?Object<string, string>=} metadata User defined
				 *     call metadata
				 * @return {!Promise<!proto.ondewo.s2t.TranscribeFileResponse>}
				 *     Promise that resolves to the response
				 */
				proto.ondewo.s2t.Speech2TextPromiseClient.prototype.transcribeFile = function (request, metadata) {
					return this.client_.unaryCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/TranscribeFile',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_TranscribeFile
					);
				};

				/**
				 * @const
				 * @type {!grpc.web.MethodDescriptor<
				 *   !proto.ondewo.s2t.S2tPipelineId,
				 *   !proto.ondewo.s2t.Speech2TextConfig>}
				 */
				const methodDescriptor_Speech2Text_GetS2tPipeline = new grpc.web.MethodDescriptor(
					'/ondewo.s2t.Speech2Text/GetS2tPipeline',
					grpc.web.MethodType.UNARY,
					proto.ondewo.s2t.S2tPipelineId,
					proto.ondewo.s2t.Speech2TextConfig,
					/**
					 * @param {!proto.ondewo.s2t.S2tPipelineId} request
					 * @return {!Uint8Array}
					 */
					function (request) {
						return request.serializeBinary();
					},
					proto.ondewo.s2t.Speech2TextConfig.deserializeBinary
				);

				/**
				 * @param {!proto.ondewo.s2t.S2tPipelineId} request The
				 *     request proto
				 * @param {?Object<string, string>} metadata User defined
				 *     call metadata
				 * @param {function(?grpc.web.RpcError, ?proto.ondewo.s2t.Speech2TextConfig)}
				 *     callback The callback function(error, response)
				 * @return {!grpc.web.ClientReadableStream<!proto.ondewo.s2t.Speech2TextConfig>|undefined}
				 *     The XHR Node Readable Stream
				 */
				proto.ondewo.s2t.Speech2TextClient.prototype.getS2tPipeline = function (request, metadata, callback) {
					return this.client_.rpcCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/GetS2tPipeline',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_GetS2tPipeline,
						callback
					);
				};

				/**
				 * @param {!proto.ondewo.s2t.S2tPipelineId} request The
				 *     request proto
				 * @param {?Object<string, string>=} metadata User defined
				 *     call metadata
				 * @return {!Promise<!proto.ondewo.s2t.Speech2TextConfig>}
				 *     Promise that resolves to the response
				 */
				proto.ondewo.s2t.Speech2TextPromiseClient.prototype.getS2tPipeline = function (request, metadata) {
					return this.client_.unaryCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/GetS2tPipeline',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_GetS2tPipeline
					);
				};

				/**
				 * @const
				 * @type {!grpc.web.MethodDescriptor<
				 *   !proto.ondewo.s2t.Speech2TextConfig,
				 *   !proto.ondewo.s2t.S2tPipelineId>}
				 */
				const methodDescriptor_Speech2Text_CreateS2tPipeline = new grpc.web.MethodDescriptor(
					'/ondewo.s2t.Speech2Text/CreateS2tPipeline',
					grpc.web.MethodType.UNARY,
					proto.ondewo.s2t.Speech2TextConfig,
					proto.ondewo.s2t.S2tPipelineId,
					/**
					 * @param {!proto.ondewo.s2t.Speech2TextConfig} request
					 * @return {!Uint8Array}
					 */
					function (request) {
						return request.serializeBinary();
					},
					proto.ondewo.s2t.S2tPipelineId.deserializeBinary
				);

				/**
				 * @param {!proto.ondewo.s2t.Speech2TextConfig} request The
				 *     request proto
				 * @param {?Object<string, string>} metadata User defined
				 *     call metadata
				 * @param {function(?grpc.web.RpcError, ?proto.ondewo.s2t.S2tPipelineId)}
				 *     callback The callback function(error, response)
				 * @return {!grpc.web.ClientReadableStream<!proto.ondewo.s2t.S2tPipelineId>|undefined}
				 *     The XHR Node Readable Stream
				 */
				proto.ondewo.s2t.Speech2TextClient.prototype.createS2tPipeline = function (request, metadata, callback) {
					return this.client_.rpcCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/CreateS2tPipeline',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_CreateS2tPipeline,
						callback
					);
				};

				/**
				 * @param {!proto.ondewo.s2t.Speech2TextConfig} request The
				 *     request proto
				 * @param {?Object<string, string>=} metadata User defined
				 *     call metadata
				 * @return {!Promise<!proto.ondewo.s2t.S2tPipelineId>}
				 *     Promise that resolves to the response
				 */
				proto.ondewo.s2t.Speech2TextPromiseClient.prototype.createS2tPipeline = function (request, metadata) {
					return this.client_.unaryCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/CreateS2tPipeline',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_CreateS2tPipeline
					);
				};

				/**
				 * @const
				 * @type {!grpc.web.MethodDescriptor<
				 *   !proto.ondewo.s2t.S2tPipelineId,
				 *   !proto.google.protobuf.Empty>}
				 */
				const methodDescriptor_Speech2Text_DeleteS2tPipeline = new grpc.web.MethodDescriptor(
					'/ondewo.s2t.Speech2Text/DeleteS2tPipeline',
					grpc.web.MethodType.UNARY,
					proto.ondewo.s2t.S2tPipelineId,
					google_protobuf_empty_pb.Empty,
					/**
					 * @param {!proto.ondewo.s2t.S2tPipelineId} request
					 * @return {!Uint8Array}
					 */
					function (request) {
						return request.serializeBinary();
					},
					google_protobuf_empty_pb.Empty.deserializeBinary
				);

				/**
				 * @param {!proto.ondewo.s2t.S2tPipelineId} request The
				 *     request proto
				 * @param {?Object<string, string>} metadata User defined
				 *     call metadata
				 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
				 *     callback The callback function(error, response)
				 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
				 *     The XHR Node Readable Stream
				 */
				proto.ondewo.s2t.Speech2TextClient.prototype.deleteS2tPipeline = function (request, metadata, callback) {
					return this.client_.rpcCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/DeleteS2tPipeline',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_DeleteS2tPipeline,
						callback
					);
				};

				/**
				 * @param {!proto.ondewo.s2t.S2tPipelineId} request The
				 *     request proto
				 * @param {?Object<string, string>=} metadata User defined
				 *     call metadata
				 * @return {!Promise<!proto.google.protobuf.Empty>}
				 *     Promise that resolves to the response
				 */
				proto.ondewo.s2t.Speech2TextPromiseClient.prototype.deleteS2tPipeline = function (request, metadata) {
					return this.client_.unaryCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/DeleteS2tPipeline',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_DeleteS2tPipeline
					);
				};

				/**
				 * @const
				 * @type {!grpc.web.MethodDescriptor<
				 *   !proto.ondewo.s2t.Speech2TextConfig,
				 *   !proto.google.protobuf.Empty>}
				 */
				const methodDescriptor_Speech2Text_UpdateS2tPipeline = new grpc.web.MethodDescriptor(
					'/ondewo.s2t.Speech2Text/UpdateS2tPipeline',
					grpc.web.MethodType.UNARY,
					proto.ondewo.s2t.Speech2TextConfig,
					google_protobuf_empty_pb.Empty,
					/**
					 * @param {!proto.ondewo.s2t.Speech2TextConfig} request
					 * @return {!Uint8Array}
					 */
					function (request) {
						return request.serializeBinary();
					},
					google_protobuf_empty_pb.Empty.deserializeBinary
				);

				/**
				 * @param {!proto.ondewo.s2t.Speech2TextConfig} request The
				 *     request proto
				 * @param {?Object<string, string>} metadata User defined
				 *     call metadata
				 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
				 *     callback The callback function(error, response)
				 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
				 *     The XHR Node Readable Stream
				 */
				proto.ondewo.s2t.Speech2TextClient.prototype.updateS2tPipeline = function (request, metadata, callback) {
					return this.client_.rpcCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/UpdateS2tPipeline',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_UpdateS2tPipeline,
						callback
					);
				};

				/**
				 * @param {!proto.ondewo.s2t.Speech2TextConfig} request The
				 *     request proto
				 * @param {?Object<string, string>=} metadata User defined
				 *     call metadata
				 * @return {!Promise<!proto.google.protobuf.Empty>}
				 *     Promise that resolves to the response
				 */
				proto.ondewo.s2t.Speech2TextPromiseClient.prototype.updateS2tPipeline = function (request, metadata) {
					return this.client_.unaryCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/UpdateS2tPipeline',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_UpdateS2tPipeline
					);
				};

				/**
				 * @const
				 * @type {!grpc.web.MethodDescriptor<
				 *   !proto.ondewo.s2t.ListS2tPipelinesRequest,
				 *   !proto.ondewo.s2t.ListS2tPipelinesResponse>}
				 */
				const methodDescriptor_Speech2Text_ListS2tPipelines = new grpc.web.MethodDescriptor(
					'/ondewo.s2t.Speech2Text/ListS2tPipelines',
					grpc.web.MethodType.UNARY,
					proto.ondewo.s2t.ListS2tPipelinesRequest,
					proto.ondewo.s2t.ListS2tPipelinesResponse,
					/**
					 * @param {!proto.ondewo.s2t.ListS2tPipelinesRequest} request
					 * @return {!Uint8Array}
					 */
					function (request) {
						return request.serializeBinary();
					},
					proto.ondewo.s2t.ListS2tPipelinesResponse.deserializeBinary
				);

				/**
				 * @param {!proto.ondewo.s2t.ListS2tPipelinesRequest} request The
				 *     request proto
				 * @param {?Object<string, string>} metadata User defined
				 *     call metadata
				 * @param {function(?grpc.web.RpcError, ?proto.ondewo.s2t.ListS2tPipelinesResponse)}
				 *     callback The callback function(error, response)
				 * @return {!grpc.web.ClientReadableStream<!proto.ondewo.s2t.ListS2tPipelinesResponse>|undefined}
				 *     The XHR Node Readable Stream
				 */
				proto.ondewo.s2t.Speech2TextClient.prototype.listS2tPipelines = function (request, metadata, callback) {
					return this.client_.rpcCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/ListS2tPipelines',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_ListS2tPipelines,
						callback
					);
				};

				/**
				 * @param {!proto.ondewo.s2t.ListS2tPipelinesRequest} request The
				 *     request proto
				 * @param {?Object<string, string>=} metadata User defined
				 *     call metadata
				 * @return {!Promise<!proto.ondewo.s2t.ListS2tPipelinesResponse>}
				 *     Promise that resolves to the response
				 */
				proto.ondewo.s2t.Speech2TextPromiseClient.prototype.listS2tPipelines = function (request, metadata) {
					return this.client_.unaryCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/ListS2tPipelines',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_ListS2tPipelines
					);
				};

				/**
				 * @const
				 * @type {!grpc.web.MethodDescriptor<
				 *   !proto.ondewo.s2t.ListS2tLanguagesRequest,
				 *   !proto.ondewo.s2t.ListS2tLanguagesResponse>}
				 */
				const methodDescriptor_Speech2Text_ListS2tLanguages = new grpc.web.MethodDescriptor(
					'/ondewo.s2t.Speech2Text/ListS2tLanguages',
					grpc.web.MethodType.UNARY,
					proto.ondewo.s2t.ListS2tLanguagesRequest,
					proto.ondewo.s2t.ListS2tLanguagesResponse,
					/**
					 * @param {!proto.ondewo.s2t.ListS2tLanguagesRequest} request
					 * @return {!Uint8Array}
					 */
					function (request) {
						return request.serializeBinary();
					},
					proto.ondewo.s2t.ListS2tLanguagesResponse.deserializeBinary
				);

				/**
				 * @param {!proto.ondewo.s2t.ListS2tLanguagesRequest} request The
				 *     request proto
				 * @param {?Object<string, string>} metadata User defined
				 *     call metadata
				 * @param {function(?grpc.web.RpcError, ?proto.ondewo.s2t.ListS2tLanguagesResponse)}
				 *     callback The callback function(error, response)
				 * @return {!grpc.web.ClientReadableStream<!proto.ondewo.s2t.ListS2tLanguagesResponse>|undefined}
				 *     The XHR Node Readable Stream
				 */
				proto.ondewo.s2t.Speech2TextClient.prototype.listS2tLanguages = function (request, metadata, callback) {
					return this.client_.rpcCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/ListS2tLanguages',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_ListS2tLanguages,
						callback
					);
				};

				/**
				 * @param {!proto.ondewo.s2t.ListS2tLanguagesRequest} request The
				 *     request proto
				 * @param {?Object<string, string>=} metadata User defined
				 *     call metadata
				 * @return {!Promise<!proto.ondewo.s2t.ListS2tLanguagesResponse>}
				 *     Promise that resolves to the response
				 */
				proto.ondewo.s2t.Speech2TextPromiseClient.prototype.listS2tLanguages = function (request, metadata) {
					return this.client_.unaryCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/ListS2tLanguages',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_ListS2tLanguages
					);
				};

				/**
				 * @const
				 * @type {!grpc.web.MethodDescriptor<
				 *   !proto.ondewo.s2t.ListS2tDomainsRequest,
				 *   !proto.ondewo.s2t.ListS2tDomainsResponse>}
				 */
				const methodDescriptor_Speech2Text_ListS2tDomains = new grpc.web.MethodDescriptor(
					'/ondewo.s2t.Speech2Text/ListS2tDomains',
					grpc.web.MethodType.UNARY,
					proto.ondewo.s2t.ListS2tDomainsRequest,
					proto.ondewo.s2t.ListS2tDomainsResponse,
					/**
					 * @param {!proto.ondewo.s2t.ListS2tDomainsRequest} request
					 * @return {!Uint8Array}
					 */
					function (request) {
						return request.serializeBinary();
					},
					proto.ondewo.s2t.ListS2tDomainsResponse.deserializeBinary
				);

				/**
				 * @param {!proto.ondewo.s2t.ListS2tDomainsRequest} request The
				 *     request proto
				 * @param {?Object<string, string>} metadata User defined
				 *     call metadata
				 * @param {function(?grpc.web.RpcError, ?proto.ondewo.s2t.ListS2tDomainsResponse)}
				 *     callback The callback function(error, response)
				 * @return {!grpc.web.ClientReadableStream<!proto.ondewo.s2t.ListS2tDomainsResponse>|undefined}
				 *     The XHR Node Readable Stream
				 */
				proto.ondewo.s2t.Speech2TextClient.prototype.listS2tDomains = function (request, metadata, callback) {
					return this.client_.rpcCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/ListS2tDomains',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_ListS2tDomains,
						callback
					);
				};

				/**
				 * @param {!proto.ondewo.s2t.ListS2tDomainsRequest} request The
				 *     request proto
				 * @param {?Object<string, string>=} metadata User defined
				 *     call metadata
				 * @return {!Promise<!proto.ondewo.s2t.ListS2tDomainsResponse>}
				 *     Promise that resolves to the response
				 */
				proto.ondewo.s2t.Speech2TextPromiseClient.prototype.listS2tDomains = function (request, metadata) {
					return this.client_.unaryCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/ListS2tDomains',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_ListS2tDomains
					);
				};

				/**
				 * @const
				 * @type {!grpc.web.MethodDescriptor<
				 *   !proto.google.protobuf.Empty,
				 *   !proto.ondewo.s2t.S2tGetServiceInfoResponse>}
				 */
				const methodDescriptor_Speech2Text_GetServiceInfo = new grpc.web.MethodDescriptor(
					'/ondewo.s2t.Speech2Text/GetServiceInfo',
					grpc.web.MethodType.UNARY,
					google_protobuf_empty_pb.Empty,
					proto.ondewo.s2t.S2tGetServiceInfoResponse,
					/**
					 * @param {!proto.google.protobuf.Empty} request
					 * @return {!Uint8Array}
					 */
					function (request) {
						return request.serializeBinary();
					},
					proto.ondewo.s2t.S2tGetServiceInfoResponse.deserializeBinary
				);

				/**
				 * @param {!proto.google.protobuf.Empty} request The
				 *     request proto
				 * @param {?Object<string, string>} metadata User defined
				 *     call metadata
				 * @param {function(?grpc.web.RpcError, ?proto.ondewo.s2t.S2tGetServiceInfoResponse)}
				 *     callback The callback function(error, response)
				 * @return {!grpc.web.ClientReadableStream<!proto.ondewo.s2t.S2tGetServiceInfoResponse>|undefined}
				 *     The XHR Node Readable Stream
				 */
				proto.ondewo.s2t.Speech2TextClient.prototype.getServiceInfo = function (request, metadata, callback) {
					return this.client_.rpcCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/GetServiceInfo',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_GetServiceInfo,
						callback
					);
				};

				/**
				 * @param {!proto.google.protobuf.Empty} request The
				 *     request proto
				 * @param {?Object<string, string>=} metadata User defined
				 *     call metadata
				 * @return {!Promise<!proto.ondewo.s2t.S2tGetServiceInfoResponse>}
				 *     Promise that resolves to the response
				 */
				proto.ondewo.s2t.Speech2TextPromiseClient.prototype.getServiceInfo = function (request, metadata) {
					return this.client_.unaryCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/GetServiceInfo',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_GetServiceInfo
					);
				};

				/**
				 * @const
				 * @type {!grpc.web.MethodDescriptor<
				 *   !proto.ondewo.s2t.ListS2tLanguageModelsRequest,
				 *   !proto.ondewo.s2t.ListS2tLanguageModelsResponse>}
				 */
				const methodDescriptor_Speech2Text_ListS2tLanguageModels = new grpc.web.MethodDescriptor(
					'/ondewo.s2t.Speech2Text/ListS2tLanguageModels',
					grpc.web.MethodType.UNARY,
					proto.ondewo.s2t.ListS2tLanguageModelsRequest,
					proto.ondewo.s2t.ListS2tLanguageModelsResponse,
					/**
					 * @param {!proto.ondewo.s2t.ListS2tLanguageModelsRequest} request
					 * @return {!Uint8Array}
					 */
					function (request) {
						return request.serializeBinary();
					},
					proto.ondewo.s2t.ListS2tLanguageModelsResponse.deserializeBinary
				);

				/**
				 * @param {!proto.ondewo.s2t.ListS2tLanguageModelsRequest} request The
				 *     request proto
				 * @param {?Object<string, string>} metadata User defined
				 *     call metadata
				 * @param {function(?grpc.web.RpcError, ?proto.ondewo.s2t.ListS2tLanguageModelsResponse)}
				 *     callback The callback function(error, response)
				 * @return {!grpc.web.ClientReadableStream<!proto.ondewo.s2t.ListS2tLanguageModelsResponse>|undefined}
				 *     The XHR Node Readable Stream
				 */
				proto.ondewo.s2t.Speech2TextClient.prototype.listS2tLanguageModels = function (request, metadata, callback) {
					return this.client_.rpcCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/ListS2tLanguageModels',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_ListS2tLanguageModels,
						callback
					);
				};

				/**
				 * @param {!proto.ondewo.s2t.ListS2tLanguageModelsRequest} request The
				 *     request proto
				 * @param {?Object<string, string>=} metadata User defined
				 *     call metadata
				 * @return {!Promise<!proto.ondewo.s2t.ListS2tLanguageModelsResponse>}
				 *     Promise that resolves to the response
				 */
				proto.ondewo.s2t.Speech2TextPromiseClient.prototype.listS2tLanguageModels = function (request, metadata) {
					return this.client_.unaryCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/ListS2tLanguageModels',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_ListS2tLanguageModels
					);
				};

				/**
				 * @const
				 * @type {!grpc.web.MethodDescriptor<
				 *   !proto.ondewo.s2t.CreateUserLanguageModelRequest,
				 *   !proto.google.protobuf.Empty>}
				 */
				const methodDescriptor_Speech2Text_CreateUserLanguageModel = new grpc.web.MethodDescriptor(
					'/ondewo.s2t.Speech2Text/CreateUserLanguageModel',
					grpc.web.MethodType.UNARY,
					proto.ondewo.s2t.CreateUserLanguageModelRequest,
					google_protobuf_empty_pb.Empty,
					/**
					 * @param {!proto.ondewo.s2t.CreateUserLanguageModelRequest} request
					 * @return {!Uint8Array}
					 */
					function (request) {
						return request.serializeBinary();
					},
					google_protobuf_empty_pb.Empty.deserializeBinary
				);

				/**
				 * @param {!proto.ondewo.s2t.CreateUserLanguageModelRequest} request The
				 *     request proto
				 * @param {?Object<string, string>} metadata User defined
				 *     call metadata
				 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
				 *     callback The callback function(error, response)
				 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
				 *     The XHR Node Readable Stream
				 */
				proto.ondewo.s2t.Speech2TextClient.prototype.createUserLanguageModel = function (request, metadata, callback) {
					return this.client_.rpcCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/CreateUserLanguageModel',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_CreateUserLanguageModel,
						callback
					);
				};

				/**
				 * @param {!proto.ondewo.s2t.CreateUserLanguageModelRequest} request The
				 *     request proto
				 * @param {?Object<string, string>=} metadata User defined
				 *     call metadata
				 * @return {!Promise<!proto.google.protobuf.Empty>}
				 *     Promise that resolves to the response
				 */
				proto.ondewo.s2t.Speech2TextPromiseClient.prototype.createUserLanguageModel = function (request, metadata) {
					return this.client_.unaryCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/CreateUserLanguageModel',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_CreateUserLanguageModel
					);
				};

				/**
				 * @const
				 * @type {!grpc.web.MethodDescriptor<
				 *   !proto.ondewo.s2t.DeleteUserLanguageModelRequest,
				 *   !proto.google.protobuf.Empty>}
				 */
				const methodDescriptor_Speech2Text_DeleteUserLanguageModel = new grpc.web.MethodDescriptor(
					'/ondewo.s2t.Speech2Text/DeleteUserLanguageModel',
					grpc.web.MethodType.UNARY,
					proto.ondewo.s2t.DeleteUserLanguageModelRequest,
					google_protobuf_empty_pb.Empty,
					/**
					 * @param {!proto.ondewo.s2t.DeleteUserLanguageModelRequest} request
					 * @return {!Uint8Array}
					 */
					function (request) {
						return request.serializeBinary();
					},
					google_protobuf_empty_pb.Empty.deserializeBinary
				);

				/**
				 * @param {!proto.ondewo.s2t.DeleteUserLanguageModelRequest} request The
				 *     request proto
				 * @param {?Object<string, string>} metadata User defined
				 *     call metadata
				 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
				 *     callback The callback function(error, response)
				 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
				 *     The XHR Node Readable Stream
				 */
				proto.ondewo.s2t.Speech2TextClient.prototype.deleteUserLanguageModel = function (request, metadata, callback) {
					return this.client_.rpcCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/DeleteUserLanguageModel',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_DeleteUserLanguageModel,
						callback
					);
				};

				/**
				 * @param {!proto.ondewo.s2t.DeleteUserLanguageModelRequest} request The
				 *     request proto
				 * @param {?Object<string, string>=} metadata User defined
				 *     call metadata
				 * @return {!Promise<!proto.google.protobuf.Empty>}
				 *     Promise that resolves to the response
				 */
				proto.ondewo.s2t.Speech2TextPromiseClient.prototype.deleteUserLanguageModel = function (request, metadata) {
					return this.client_.unaryCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/DeleteUserLanguageModel',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_DeleteUserLanguageModel
					);
				};

				/**
				 * @const
				 * @type {!grpc.web.MethodDescriptor<
				 *   !proto.ondewo.s2t.AddDataToUserLanguageModelRequest,
				 *   !proto.google.protobuf.Empty>}
				 */
				const methodDescriptor_Speech2Text_AddDataToUserLanguageModel = new grpc.web.MethodDescriptor(
					'/ondewo.s2t.Speech2Text/AddDataToUserLanguageModel',
					grpc.web.MethodType.UNARY,
					proto.ondewo.s2t.AddDataToUserLanguageModelRequest,
					google_protobuf_empty_pb.Empty,
					/**
					 * @param {!proto.ondewo.s2t.AddDataToUserLanguageModelRequest} request
					 * @return {!Uint8Array}
					 */
					function (request) {
						return request.serializeBinary();
					},
					google_protobuf_empty_pb.Empty.deserializeBinary
				);

				/**
				 * @param {!proto.ondewo.s2t.AddDataToUserLanguageModelRequest} request The
				 *     request proto
				 * @param {?Object<string, string>} metadata User defined
				 *     call metadata
				 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
				 *     callback The callback function(error, response)
				 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
				 *     The XHR Node Readable Stream
				 */
				proto.ondewo.s2t.Speech2TextClient.prototype.addDataToUserLanguageModel = function (
					request,
					metadata,
					callback
				) {
					return this.client_.rpcCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/AddDataToUserLanguageModel',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_AddDataToUserLanguageModel,
						callback
					);
				};

				/**
				 * @param {!proto.ondewo.s2t.AddDataToUserLanguageModelRequest} request The
				 *     request proto
				 * @param {?Object<string, string>=} metadata User defined
				 *     call metadata
				 * @return {!Promise<!proto.google.protobuf.Empty>}
				 *     Promise that resolves to the response
				 */
				proto.ondewo.s2t.Speech2TextPromiseClient.prototype.addDataToUserLanguageModel = function (request, metadata) {
					return this.client_.unaryCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/AddDataToUserLanguageModel',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_AddDataToUserLanguageModel
					);
				};

				/**
				 * @const
				 * @type {!grpc.web.MethodDescriptor<
				 *   !proto.ondewo.s2t.TrainUserLanguageModelRequest,
				 *   !proto.google.protobuf.Empty>}
				 */
				const methodDescriptor_Speech2Text_TrainUserLanguageModel = new grpc.web.MethodDescriptor(
					'/ondewo.s2t.Speech2Text/TrainUserLanguageModel',
					grpc.web.MethodType.UNARY,
					proto.ondewo.s2t.TrainUserLanguageModelRequest,
					google_protobuf_empty_pb.Empty,
					/**
					 * @param {!proto.ondewo.s2t.TrainUserLanguageModelRequest} request
					 * @return {!Uint8Array}
					 */
					function (request) {
						return request.serializeBinary();
					},
					google_protobuf_empty_pb.Empty.deserializeBinary
				);

				/**
				 * @param {!proto.ondewo.s2t.TrainUserLanguageModelRequest} request The
				 *     request proto
				 * @param {?Object<string, string>} metadata User defined
				 *     call metadata
				 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
				 *     callback The callback function(error, response)
				 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
				 *     The XHR Node Readable Stream
				 */
				proto.ondewo.s2t.Speech2TextClient.prototype.trainUserLanguageModel = function (request, metadata, callback) {
					return this.client_.rpcCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/TrainUserLanguageModel',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_TrainUserLanguageModel,
						callback
					);
				};

				/**
				 * @param {!proto.ondewo.s2t.TrainUserLanguageModelRequest} request The
				 *     request proto
				 * @param {?Object<string, string>=} metadata User defined
				 *     call metadata
				 * @return {!Promise<!proto.google.protobuf.Empty>}
				 *     Promise that resolves to the response
				 */
				proto.ondewo.s2t.Speech2TextPromiseClient.prototype.trainUserLanguageModel = function (request, metadata) {
					return this.client_.unaryCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/TrainUserLanguageModel',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_TrainUserLanguageModel
					);
				};

				/**
				 * @const
				 * @type {!grpc.web.MethodDescriptor<
				 *   !proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest,
				 *   !proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse>}
				 */
				const methodDescriptor_Speech2Text_ListS2tNormalizationPipelines = new grpc.web.MethodDescriptor(
					'/ondewo.s2t.Speech2Text/ListS2tNormalizationPipelines',
					grpc.web.MethodType.UNARY,
					proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest,
					proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse,
					/**
					 * @param {!proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest} request
					 * @return {!Uint8Array}
					 */
					function (request) {
						return request.serializeBinary();
					},
					proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse.deserializeBinary
				);

				/**
				 * @param {!proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest} request The
				 *     request proto
				 * @param {?Object<string, string>} metadata User defined
				 *     call metadata
				 * @param {function(?grpc.web.RpcError, ?proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse)}
				 *     callback The callback function(error, response)
				 * @return {!grpc.web.ClientReadableStream<!proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse>|undefined}
				 *     The XHR Node Readable Stream
				 */
				proto.ondewo.s2t.Speech2TextClient.prototype.listS2tNormalizationPipelines = function (
					request,
					metadata,
					callback
				) {
					return this.client_.rpcCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/ListS2tNormalizationPipelines',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_ListS2tNormalizationPipelines,
						callback
					);
				};

				/**
				 * @param {!proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest} request The
				 *     request proto
				 * @param {?Object<string, string>=} metadata User defined
				 *     call metadata
				 * @return {!Promise<!proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse>}
				 *     Promise that resolves to the response
				 */
				proto.ondewo.s2t.Speech2TextPromiseClient.prototype.listS2tNormalizationPipelines = function (
					request,
					metadata
				) {
					return this.client_.unaryCall(
						this.hostname_ + '/ondewo.s2t.Speech2Text/ListS2tNormalizationPipelines',
						request,
						metadata || {},
						methodDescriptor_Speech2Text_ListS2tNormalizationPipelines
					);
				};

				proto.ondewo.s2t.Speech2TextClientWrapper = function (config) {
					this.w_host = config['grpc_host'];
					this.w_port = config['grpc_port'];
					this.w_certificate = config['grpc_certificate'];

					this.w_secure = config['grpc_secure'];

					if (this.w_certificate) {
						this.w_credentials['grpc_certificate'] = this.w_certificate;
					}

					//Speech2TextClientOptions:: suppressCorsPreflight: boolean, withCredentials: boolean, this.unaryInterceptors; this.streamInterceptors; this.format; this.workerScope; this.useFetchDownloadStreams;
					if (this.w_credentials && Object.keys(this.w_credentials).length > 0) {
						this.w_options['withCredentials'] = true;
					}
					if (config && config['options']) {
						Object.assign(this.w_options, config['options']);
					}

					this.w_hostport = this.w_host + ':' + this.w_port;
					return proto.ondewo.s2t.Speech2TextClient.call(this, this.w_hostport, this.w_credentials, this.w_options);
				};
				proto.ondewo.s2t.Speech2TextPromiseClientWrapper = function (config) {
					this.w_host = config['grpc_host'];
					this.w_port = config['grpc_port'];
					this.w_certificate = config['grpc_certificate'];

					this.w_secure = config['grpc_secure'];

					if (this.w_certificate) {
						this.w_credentials['grpc_certificate'] = this.w_certificate;
					}

					//Speech2TextPromiseClientOptions:: suppressCorsPreflight: boolean, withCredentials: boolean, this.unaryInterceptors; this.streamInterceptors; this.format; this.workerScope; this.useFetchDownloadStreams;
					if (this.w_credentials && Object.keys(this.w_credentials).length > 0) {
						this.w_options['withCredentials'] = true;
					}
					if (config && config['options']) {
						Object.assign(this.w_options, config['options']);
					}

					this.w_hostport = this.w_host + ':' + this.w_port;
					return proto.ondewo.s2t.Speech2TextPromiseClient.call(
						this,
						this.w_hostport,
						this.w_credentials,
						this.w_options
					);
				};
				module.exports = proto.ondewo.s2t;

				/***/
			},

		/***/ './ondewo/s2t/speech-to-text_pb.js':
			/*!*****************************************!*\
  !*** ./ondewo/s2t/speech-to-text_pb.js ***!
  \*****************************************/
			/***/ (__unused_webpack_module, exports, __webpack_require__) => {
				// source: ondewo/s2t/speech-to-text.proto
				/**
				 * @fileoverview
				 * @enhanceable
				 * @suppress {missingRequire} reports error on implicit type usages.
				 * @suppress {messageConventions} JS Compiler reports an error if a variable or
				 *     field starts with 'MSG_' and isn't a translatable message.
				 * @public
				 */
				// GENERATED CODE -- DO NOT EDIT!
				/* eslint-disable */
				// @ts-nocheck

				var jspb = __webpack_require__(/*! google-protobuf */ './node_modules/google-protobuf/google-protobuf.js');
				var goog = jspb;
				var global =
					(typeof globalThis !== 'undefined' && globalThis) ||
					(typeof window !== 'undefined' && window) ||
					(typeof global !== 'undefined' && global) ||
					(typeof self !== 'undefined' && self) ||
					function () {
						return this;
					}.call(null) ||
					Function('return this')();

				var google_protobuf_empty_pb = __webpack_require__(
					/*! google-protobuf/google/protobuf/empty_pb.js */ './node_modules/google-protobuf/google/protobuf/empty_pb.js'
				);
				goog.object.extend(proto, google_protobuf_empty_pb);
				var google_protobuf_struct_pb = __webpack_require__(
					/*! google-protobuf/google/protobuf/struct_pb.js */ './node_modules/google-protobuf/google/protobuf/struct_pb.js'
				);
				goog.object.extend(proto, google_protobuf_struct_pb);
				goog.exportSymbol('proto.ondewo.s2t.AcousticModels', null, global);
				goog.exportSymbol('proto.ondewo.s2t.AddDataToUserLanguageModelRequest', null, global);
				goog.exportSymbol('proto.ondewo.s2t.CkptFile', null, global);
				goog.exportSymbol('proto.ondewo.s2t.CreateUserLanguageModelRequest', null, global);
				goog.exportSymbol('proto.ondewo.s2t.Decoding', null, global);
				goog.exportSymbol('proto.ondewo.s2t.DeleteUserLanguageModelRequest', null, global);
				goog.exportSymbol('proto.ondewo.s2t.InferenceBackend', null, global);
				goog.exportSymbol('proto.ondewo.s2t.LanguageModelPipelineId', null, global);
				goog.exportSymbol('proto.ondewo.s2t.LanguageModels', null, global);
				goog.exportSymbol('proto.ondewo.s2t.ListS2tDomainsRequest', null, global);
				goog.exportSymbol('proto.ondewo.s2t.ListS2tDomainsResponse', null, global);
				goog.exportSymbol('proto.ondewo.s2t.ListS2tLanguageModelsRequest', null, global);
				goog.exportSymbol('proto.ondewo.s2t.ListS2tLanguageModelsResponse', null, global);
				goog.exportSymbol('proto.ondewo.s2t.ListS2tLanguagesRequest', null, global);
				goog.exportSymbol('proto.ondewo.s2t.ListS2tLanguagesResponse', null, global);
				goog.exportSymbol('proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest', null, global);
				goog.exportSymbol('proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse', null, global);
				goog.exportSymbol('proto.ondewo.s2t.ListS2tPipelinesRequest', null, global);
				goog.exportSymbol('proto.ondewo.s2t.ListS2tPipelinesResponse', null, global);
				goog.exportSymbol('proto.ondewo.s2t.Logging', null, global);
				goog.exportSymbol('proto.ondewo.s2t.PostProcessing', null, global);
				goog.exportSymbol('proto.ondewo.s2t.PostProcessingOptions', null, global);
				goog.exportSymbol('proto.ondewo.s2t.PostProcessors', null, global);
				goog.exportSymbol('proto.ondewo.s2t.PtFiles', null, global);
				goog.exportSymbol('proto.ondewo.s2t.Pyannote', null, global);
				goog.exportSymbol('proto.ondewo.s2t.S2tCloudProviderConfig', null, global);
				goog.exportSymbol('proto.ondewo.s2t.S2tCloudProviderConfigAmazon', null, global);
				goog.exportSymbol('proto.ondewo.s2t.S2tCloudProviderConfigDeepgram', null, global);
				goog.exportSymbol('proto.ondewo.s2t.S2tCloudProviderConfigGoogle', null, global);
				goog.exportSymbol('proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft', null, global);
				goog.exportSymbol('proto.ondewo.s2t.S2tCloudServiceAmazon', null, global);
				goog.exportSymbol('proto.ondewo.s2t.S2tCloudServiceDeepgram', null, global);
				goog.exportSymbol('proto.ondewo.s2t.S2tCloudServiceGoogle', null, global);
				goog.exportSymbol('proto.ondewo.s2t.S2tCloudServiceMicrosoft', null, global);
				goog.exportSymbol('proto.ondewo.s2t.S2tDescription', null, global);
				goog.exportSymbol('proto.ondewo.s2t.S2tGetServiceInfoResponse', null, global);
				goog.exportSymbol('proto.ondewo.s2t.S2tInference', null, global);
				goog.exportSymbol('proto.ondewo.s2t.S2tLlmPostProcessing', null, global);
				goog.exportSymbol('proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions', null, global);
				goog.exportSymbol('proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions', null, global);
				goog.exportSymbol('proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions', null, global);
				goog.exportSymbol('proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions', null, global);
				goog.exportSymbol('proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions', null, global);
				goog.exportSymbol('proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions', null, global);
				goog.exportSymbol('proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions', null, global);
				goog.exportSymbol('proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions', null, global);
				goog.exportSymbol('proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions', null, global);
				goog.exportSymbol('proto.ondewo.s2t.S2tNormalization', null, global);
				goog.exportSymbol('proto.ondewo.s2t.S2tPipelineId', null, global);
				goog.exportSymbol('proto.ondewo.s2t.Speech2TextConfig', null, global);
				goog.exportSymbol('proto.ondewo.s2t.StreamingServer', null, global);
				goog.exportSymbol('proto.ondewo.s2t.StreamingSpeechRecognition', null, global);
				goog.exportSymbol('proto.ondewo.s2t.SymSpell', null, global);
				goog.exportSymbol('proto.ondewo.s2t.TrainUserLanguageModelRequest', null, global);
				goog.exportSymbol('proto.ondewo.s2t.TranscribeFileRequest', null, global);
				goog.exportSymbol('proto.ondewo.s2t.TranscribeFileResponse', null, global);
				goog.exportSymbol('proto.ondewo.s2t.TranscribeRequestConfig', null, global);
				goog.exportSymbol('proto.ondewo.s2t.TranscribeRequestConfig.OneofLanguageModelNameCase', null, global);
				goog.exportSymbol('proto.ondewo.s2t.TranscribeRequestConfig.OneofPostProcessingCase', null, global);
				goog.exportSymbol('proto.ondewo.s2t.TranscribeRequestConfig.OneofReturnOptionsCase', null, global);
				goog.exportSymbol('proto.ondewo.s2t.TranscribeRequestConfig.OneofUtteranceDetectionCase', null, global);
				goog.exportSymbol('proto.ondewo.s2t.TranscribeRequestConfig.VoiceActivityDetectionCase', null, global);
				goog.exportSymbol('proto.ondewo.s2t.TranscribeStreamRequest', null, global);
				goog.exportSymbol('proto.ondewo.s2t.TranscribeStreamResponse', null, global);
				goog.exportSymbol('proto.ondewo.s2t.TranscribeStreamResponse.OneofConfigCase', null, global);
				goog.exportSymbol('proto.ondewo.s2t.Transcription', null, global);
				goog.exportSymbol('proto.ondewo.s2t.TranscriptionAlternative', null, global);
				goog.exportSymbol('proto.ondewo.s2t.TranscriptionReturnOptions', null, global);
				goog.exportSymbol('proto.ondewo.s2t.TurnDetectionOptions', null, global);
				goog.exportSymbol('proto.ondewo.s2t.UtteranceDetectionOptions', null, global);
				goog.exportSymbol('proto.ondewo.s2t.UtteranceDetectionOptions.OneofTranscribeNotFinalCase', null, global);
				goog.exportSymbol('proto.ondewo.s2t.UtteranceDetectionOptions.OneofTurnDetectionCase', null, global);
				goog.exportSymbol('proto.ondewo.s2t.VoiceActivityDetection', null, global);
				goog.exportSymbol('proto.ondewo.s2t.Wav2Vec', null, global);
				goog.exportSymbol('proto.ondewo.s2t.Wav2VecTriton', null, global);
				goog.exportSymbol('proto.ondewo.s2t.Whisper', null, global);
				goog.exportSymbol('proto.ondewo.s2t.WhisperTriton', null, global);
				goog.exportSymbol('proto.ondewo.s2t.WordAlternative', null, global);
				goog.exportSymbol('proto.ondewo.s2t.WordDetail', null, global);
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.TranscribeRequestConfig = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ondewo.s2t.TranscribeRequestConfig.oneofGroups_);
				};
				goog.inherits(proto.ondewo.s2t.TranscribeRequestConfig, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.TranscribeRequestConfig.displayName = 'proto.ondewo.s2t.TranscribeRequestConfig';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.S2tCloudProviderConfig = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.S2tCloudProviderConfig, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.S2tCloudProviderConfig.displayName = 'proto.ondewo.s2t.S2tCloudProviderConfig';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigAmazon = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.S2tCloudProviderConfigAmazon, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.S2tCloudProviderConfigAmazon.displayName = 'proto.ondewo.s2t.S2tCloudProviderConfigAmazon';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigDeepgram = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.S2tCloudProviderConfigDeepgram, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.displayName =
						'proto.ondewo.s2t.S2tCloudProviderConfigDeepgram';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigGoogle = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.S2tCloudProviderConfigGoogle, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.S2tCloudProviderConfigGoogle.displayName = 'proto.ondewo.s2t.S2tCloudProviderConfigGoogle';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft.displayName =
						'proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.TranscriptionReturnOptions = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.TranscriptionReturnOptions, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.TranscriptionReturnOptions.displayName = 'proto.ondewo.s2t.TranscriptionReturnOptions';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.UtteranceDetectionOptions = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ondewo.s2t.UtteranceDetectionOptions.oneofGroups_);
				};
				goog.inherits(proto.ondewo.s2t.UtteranceDetectionOptions, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.UtteranceDetectionOptions.displayName = 'proto.ondewo.s2t.UtteranceDetectionOptions';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.PostProcessingOptions = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.PostProcessingOptions, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.PostProcessingOptions.displayName = 'proto.ondewo.s2t.PostProcessingOptions';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.Transcription = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, proto.ondewo.s2t.Transcription.repeatedFields_, null);
				};
				goog.inherits(proto.ondewo.s2t.Transcription, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.Transcription.displayName = 'proto.ondewo.s2t.Transcription';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.TranscriptionAlternative = function (opt_data) {
					jspb.Message.initialize(
						this,
						opt_data,
						0,
						-1,
						proto.ondewo.s2t.TranscriptionAlternative.repeatedFields_,
						null
					);
				};
				goog.inherits(proto.ondewo.s2t.TranscriptionAlternative, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.TranscriptionAlternative.displayName = 'proto.ondewo.s2t.TranscriptionAlternative';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.WordDetail = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, proto.ondewo.s2t.WordDetail.repeatedFields_, null);
				};
				goog.inherits(proto.ondewo.s2t.WordDetail, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.WordDetail.displayName = 'proto.ondewo.s2t.WordDetail';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.WordAlternative = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.WordAlternative, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.WordAlternative.displayName = 'proto.ondewo.s2t.WordAlternative';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.TranscribeStreamRequest = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.TranscribeStreamRequest, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.TranscribeStreamRequest.displayName = 'proto.ondewo.s2t.TranscribeStreamRequest';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.TranscribeStreamResponse = function (opt_data) {
					jspb.Message.initialize(
						this,
						opt_data,
						0,
						-1,
						proto.ondewo.s2t.TranscribeStreamResponse.repeatedFields_,
						proto.ondewo.s2t.TranscribeStreamResponse.oneofGroups_
					);
				};
				goog.inherits(proto.ondewo.s2t.TranscribeStreamResponse, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.TranscribeStreamResponse.displayName = 'proto.ondewo.s2t.TranscribeStreamResponse';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.TranscribeFileRequest = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.TranscribeFileRequest, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.TranscribeFileRequest.displayName = 'proto.ondewo.s2t.TranscribeFileRequest';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.TranscribeFileResponse = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, proto.ondewo.s2t.TranscribeFileResponse.repeatedFields_, null);
				};
				goog.inherits(proto.ondewo.s2t.TranscribeFileResponse, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.TranscribeFileResponse.displayName = 'proto.ondewo.s2t.TranscribeFileResponse';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.S2tPipelineId = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.S2tPipelineId, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.S2tPipelineId.displayName = 'proto.ondewo.s2t.S2tPipelineId';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.ListS2tPipelinesRequest = function (opt_data) {
					jspb.Message.initialize(
						this,
						opt_data,
						0,
						-1,
						proto.ondewo.s2t.ListS2tPipelinesRequest.repeatedFields_,
						null
					);
				};
				goog.inherits(proto.ondewo.s2t.ListS2tPipelinesRequest, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.ListS2tPipelinesRequest.displayName = 'proto.ondewo.s2t.ListS2tPipelinesRequest';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.ListS2tPipelinesResponse = function (opt_data) {
					jspb.Message.initialize(
						this,
						opt_data,
						0,
						-1,
						proto.ondewo.s2t.ListS2tPipelinesResponse.repeatedFields_,
						null
					);
				};
				goog.inherits(proto.ondewo.s2t.ListS2tPipelinesResponse, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.ListS2tPipelinesResponse.displayName = 'proto.ondewo.s2t.ListS2tPipelinesResponse';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.ListS2tLanguagesRequest = function (opt_data) {
					jspb.Message.initialize(
						this,
						opt_data,
						0,
						-1,
						proto.ondewo.s2t.ListS2tLanguagesRequest.repeatedFields_,
						null
					);
				};
				goog.inherits(proto.ondewo.s2t.ListS2tLanguagesRequest, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.ListS2tLanguagesRequest.displayName = 'proto.ondewo.s2t.ListS2tLanguagesRequest';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.ListS2tLanguagesResponse = function (opt_data) {
					jspb.Message.initialize(
						this,
						opt_data,
						0,
						-1,
						proto.ondewo.s2t.ListS2tLanguagesResponse.repeatedFields_,
						null
					);
				};
				goog.inherits(proto.ondewo.s2t.ListS2tLanguagesResponse, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.ListS2tLanguagesResponse.displayName = 'proto.ondewo.s2t.ListS2tLanguagesResponse';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.ListS2tDomainsRequest = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, proto.ondewo.s2t.ListS2tDomainsRequest.repeatedFields_, null);
				};
				goog.inherits(proto.ondewo.s2t.ListS2tDomainsRequest, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.ListS2tDomainsRequest.displayName = 'proto.ondewo.s2t.ListS2tDomainsRequest';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.ListS2tDomainsResponse = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, proto.ondewo.s2t.ListS2tDomainsResponse.repeatedFields_, null);
				};
				goog.inherits(proto.ondewo.s2t.ListS2tDomainsResponse, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.ListS2tDomainsResponse.displayName = 'proto.ondewo.s2t.ListS2tDomainsResponse';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.S2tGetServiceInfoResponse = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.S2tGetServiceInfoResponse, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.S2tGetServiceInfoResponse.displayName = 'proto.ondewo.s2t.S2tGetServiceInfoResponse';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.Speech2TextConfig = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.Speech2TextConfig, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.Speech2TextConfig.displayName = 'proto.ondewo.s2t.Speech2TextConfig';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.S2tDescription = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.S2tDescription, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.S2tDescription.displayName = 'proto.ondewo.s2t.S2tDescription';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.S2tInference = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.S2tInference, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.S2tInference.displayName = 'proto.ondewo.s2t.S2tInference';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.AcousticModels = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.AcousticModels, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.AcousticModels.displayName = 'proto.ondewo.s2t.AcousticModels';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.S2tCloudServiceAmazon = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.S2tCloudServiceAmazon, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.S2tCloudServiceAmazon.displayName = 'proto.ondewo.s2t.S2tCloudServiceAmazon';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.S2tCloudServiceDeepgram = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.S2tCloudServiceDeepgram, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.S2tCloudServiceDeepgram.displayName = 'proto.ondewo.s2t.S2tCloudServiceDeepgram';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.S2tCloudServiceGoogle = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.S2tCloudServiceGoogle, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.S2tCloudServiceGoogle.displayName = 'proto.ondewo.s2t.S2tCloudServiceGoogle';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.S2tCloudServiceMicrosoft = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.S2tCloudServiceMicrosoft, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.S2tCloudServiceMicrosoft.displayName = 'proto.ondewo.s2t.S2tCloudServiceMicrosoft';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.Whisper = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.Whisper, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.Whisper.displayName = 'proto.ondewo.s2t.Whisper';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.WhisperTriton = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.WhisperTriton, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.WhisperTriton.displayName = 'proto.ondewo.s2t.WhisperTriton';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.Wav2Vec = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.Wav2Vec, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.Wav2Vec.displayName = 'proto.ondewo.s2t.Wav2Vec';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.Wav2VecTriton = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.Wav2VecTriton, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.Wav2VecTriton.displayName = 'proto.ondewo.s2t.Wav2VecTriton';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.PtFiles = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.PtFiles, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.PtFiles.displayName = 'proto.ondewo.s2t.PtFiles';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.CkptFile = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.CkptFile, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.CkptFile.displayName = 'proto.ondewo.s2t.CkptFile';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.LanguageModels = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.LanguageModels, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.LanguageModels.displayName = 'proto.ondewo.s2t.LanguageModels';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.StreamingServer = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.StreamingServer, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.StreamingServer.displayName = 'proto.ondewo.s2t.StreamingServer';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.StreamingSpeechRecognition = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.StreamingSpeechRecognition, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.StreamingSpeechRecognition.displayName = 'proto.ondewo.s2t.StreamingSpeechRecognition';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.TurnDetectionOptions = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.TurnDetectionOptions, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.TurnDetectionOptions.displayName = 'proto.ondewo.s2t.TurnDetectionOptions';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.VoiceActivityDetection = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.VoiceActivityDetection, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.VoiceActivityDetection.displayName = 'proto.ondewo.s2t.VoiceActivityDetection';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.Pyannote = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.Pyannote, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.Pyannote.displayName = 'proto.ondewo.s2t.Pyannote';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.PostProcessing = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, proto.ondewo.s2t.PostProcessing.repeatedFields_, null);
				};
				goog.inherits(proto.ondewo.s2t.PostProcessing, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.PostProcessing.displayName = 'proto.ondewo.s2t.PostProcessing';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.PostProcessors = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.PostProcessors, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.PostProcessors.displayName = 'proto.ondewo.s2t.PostProcessors';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.SymSpell = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.SymSpell, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.SymSpell.displayName = 'proto.ondewo.s2t.SymSpell';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.S2tNormalization = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, proto.ondewo.s2t.S2tNormalization.repeatedFields_, null);
				};
				goog.inherits(proto.ondewo.s2t.S2tNormalization, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.S2tNormalization.displayName = 'proto.ondewo.s2t.S2tNormalization';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.S2tLlmPostProcessing, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.S2tLlmPostProcessing.displayName = 'proto.ondewo.s2t.S2tLlmPostProcessing';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions.displayName =
						'proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions.displayName =
						'proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions.displayName =
						'proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions.displayName =
						'proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions.displayName =
						'proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.displayName =
						'proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.displayName =
						'proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions.displayName =
						'proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions.displayName =
						'proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.Logging = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.Logging, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.Logging.displayName = 'proto.ondewo.s2t.Logging';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.ListS2tLanguageModelsRequest = function (opt_data) {
					jspb.Message.initialize(
						this,
						opt_data,
						0,
						-1,
						proto.ondewo.s2t.ListS2tLanguageModelsRequest.repeatedFields_,
						null
					);
				};
				goog.inherits(proto.ondewo.s2t.ListS2tLanguageModelsRequest, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.ListS2tLanguageModelsRequest.displayName = 'proto.ondewo.s2t.ListS2tLanguageModelsRequest';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.LanguageModelPipelineId = function (opt_data) {
					jspb.Message.initialize(
						this,
						opt_data,
						0,
						-1,
						proto.ondewo.s2t.LanguageModelPipelineId.repeatedFields_,
						null
					);
				};
				goog.inherits(proto.ondewo.s2t.LanguageModelPipelineId, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.LanguageModelPipelineId.displayName = 'proto.ondewo.s2t.LanguageModelPipelineId';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.ListS2tLanguageModelsResponse = function (opt_data) {
					jspb.Message.initialize(
						this,
						opt_data,
						0,
						-1,
						proto.ondewo.s2t.ListS2tLanguageModelsResponse.repeatedFields_,
						null
					);
				};
				goog.inherits(proto.ondewo.s2t.ListS2tLanguageModelsResponse, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.ListS2tLanguageModelsResponse.displayName = 'proto.ondewo.s2t.ListS2tLanguageModelsResponse';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.CreateUserLanguageModelRequest = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.CreateUserLanguageModelRequest, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.CreateUserLanguageModelRequest.displayName =
						'proto.ondewo.s2t.CreateUserLanguageModelRequest';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.DeleteUserLanguageModelRequest = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.DeleteUserLanguageModelRequest, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.DeleteUserLanguageModelRequest.displayName =
						'proto.ondewo.s2t.DeleteUserLanguageModelRequest';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.AddDataToUserLanguageModelRequest = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.AddDataToUserLanguageModelRequest, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.AddDataToUserLanguageModelRequest.displayName =
						'proto.ondewo.s2t.AddDataToUserLanguageModelRequest';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.TrainUserLanguageModelRequest = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.TrainUserLanguageModelRequest, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.TrainUserLanguageModelRequest.displayName = 'proto.ondewo.s2t.TrainUserLanguageModelRequest';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest = function (opt_data) {
					jspb.Message.initialize(this, opt_data, 0, -1, null, null);
				};
				goog.inherits(proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest.displayName =
						'proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest';
				}
				/**
				 * Generated by JsPbCodeGenerator.
				 * @param {Array=} opt_data Optional initial data array, typically from a
				 * server response, or constructed directly in Javascript. The array is used
				 * in place and becomes part of the constructed object. It is not cloned.
				 * If no data is provided, the constructed object will be empty, but still
				 * valid.
				 * @extends {jspb.Message}
				 * @constructor
				 */
				proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse = function (opt_data) {
					jspb.Message.initialize(
						this,
						opt_data,
						0,
						-1,
						proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse.repeatedFields_,
						null
					);
				};
				goog.inherits(proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse, jspb.Message);
				if (goog.DEBUG && !COMPILED) {
					/**
					 * @public
					 * @override
					 */
					proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse.displayName =
						'proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse';
				}

				/**
				 * Oneof group definitions for this message. Each group defines the field
				 * numbers belonging to that group. When of these fields' value is set, all
				 * other fields in the group are cleared. During deserialization, if multiple
				 * fields are encountered for a group, only the last value seen will be kept.
				 * @private {!Array<!Array<number>>}
				 * @const
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.oneofGroups_ = [[3], [4], [5], [6], [8]];

				/**
				 * @enum {number}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.OneofLanguageModelNameCase = {
					ONEOF_LANGUAGE_MODEL_NAME_NOT_SET: 0,
					LANGUAGE_MODEL_NAME: 3
				};

				/**
				 * @return {proto.ondewo.s2t.TranscribeRequestConfig.OneofLanguageModelNameCase}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.getOneofLanguageModelNameCase = function () {
					return /** @type {proto.ondewo.s2t.TranscribeRequestConfig.OneofLanguageModelNameCase} */ (
						jspb.Message.computeOneofCase(this, proto.ondewo.s2t.TranscribeRequestConfig.oneofGroups_[0])
					);
				};

				/**
				 * @enum {number}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.OneofPostProcessingCase = {
					ONEOF_POST_PROCESSING_NOT_SET: 0,
					POST_PROCESSING: 4
				};

				/**
				 * @return {proto.ondewo.s2t.TranscribeRequestConfig.OneofPostProcessingCase}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.getOneofPostProcessingCase = function () {
					return /** @type {proto.ondewo.s2t.TranscribeRequestConfig.OneofPostProcessingCase} */ (
						jspb.Message.computeOneofCase(this, proto.ondewo.s2t.TranscribeRequestConfig.oneofGroups_[1])
					);
				};

				/**
				 * @enum {number}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.OneofUtteranceDetectionCase = {
					ONEOF_UTTERANCE_DETECTION_NOT_SET: 0,
					UTTERANCE_DETECTION: 5
				};

				/**
				 * @return {proto.ondewo.s2t.TranscribeRequestConfig.OneofUtteranceDetectionCase}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.getOneofUtteranceDetectionCase = function () {
					return /** @type {proto.ondewo.s2t.TranscribeRequestConfig.OneofUtteranceDetectionCase} */ (
						jspb.Message.computeOneofCase(this, proto.ondewo.s2t.TranscribeRequestConfig.oneofGroups_[2])
					);
				};

				/**
				 * @enum {number}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.VoiceActivityDetectionCase = {
					VOICE_ACTIVITY_DETECTION_NOT_SET: 0,
					PYANNOTE: 6
				};

				/**
				 * @return {proto.ondewo.s2t.TranscribeRequestConfig.VoiceActivityDetectionCase}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.getVoiceActivityDetectionCase = function () {
					return /** @type {proto.ondewo.s2t.TranscribeRequestConfig.VoiceActivityDetectionCase} */ (
						jspb.Message.computeOneofCase(this, proto.ondewo.s2t.TranscribeRequestConfig.oneofGroups_[3])
					);
				};

				/**
				 * @enum {number}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.OneofReturnOptionsCase = {
					ONEOF_RETURN_OPTIONS_NOT_SET: 0,
					RETURN_OPTIONS: 8
				};

				/**
				 * @return {proto.ondewo.s2t.TranscribeRequestConfig.OneofReturnOptionsCase}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.getOneofReturnOptionsCase = function () {
					return /** @type {proto.ondewo.s2t.TranscribeRequestConfig.OneofReturnOptionsCase} */ (
						jspb.Message.computeOneofCase(this, proto.ondewo.s2t.TranscribeRequestConfig.oneofGroups_[4])
					);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.TranscribeRequestConfig.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.TranscribeRequestConfig.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.TranscribeRequestConfig} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.TranscribeRequestConfig.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								s2tPipelineId: jspb.Message.getFieldWithDefault(msg, 1, ''),
								decoding: jspb.Message.getFieldWithDefault(msg, 2, 0),
								languageModelName: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
								postProcessing:
									(f = msg.getPostProcessing()) && proto.ondewo.s2t.PostProcessingOptions.toObject(includeInstance, f),
								utteranceDetection:
									(f = msg.getUtteranceDetection()) &&
									proto.ondewo.s2t.UtteranceDetectionOptions.toObject(includeInstance, f),
								pyannote: (f = msg.getPyannote()) && proto.ondewo.s2t.Pyannote.toObject(includeInstance, f),
								returnOptions:
									(f = msg.getReturnOptions()) &&
									proto.ondewo.s2t.TranscriptionReturnOptions.toObject(includeInstance, f),
								language: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
								task: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
								s2tServiceConfig:
									(f = msg.getS2tServiceConfig()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f),
								s2tCloudProviderConfig:
									(f = msg.getS2tCloudProviderConfig()) &&
									proto.ondewo.s2t.S2tCloudProviderConfig.toObject(includeInstance, f)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.TranscribeRequestConfig}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.TranscribeRequestConfig();
					return proto.ondewo.s2t.TranscribeRequestConfig.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.TranscribeRequestConfig} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.TranscribeRequestConfig}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setS2tPipelineId(value);
								break;
							case 2:
								var value = /** @type {!proto.ondewo.s2t.Decoding} */ (reader.readEnum());
								msg.setDecoding(value);
								break;
							case 3:
								var value = /** @type {string} */ (reader.readString());
								msg.setLanguageModelName(value);
								break;
							case 4:
								var value = new proto.ondewo.s2t.PostProcessingOptions();
								reader.readMessage(value, proto.ondewo.s2t.PostProcessingOptions.deserializeBinaryFromReader);
								msg.setPostProcessing(value);
								break;
							case 5:
								var value = new proto.ondewo.s2t.UtteranceDetectionOptions();
								reader.readMessage(value, proto.ondewo.s2t.UtteranceDetectionOptions.deserializeBinaryFromReader);
								msg.setUtteranceDetection(value);
								break;
							case 6:
								var value = new proto.ondewo.s2t.Pyannote();
								reader.readMessage(value, proto.ondewo.s2t.Pyannote.deserializeBinaryFromReader);
								msg.setPyannote(value);
								break;
							case 8:
								var value = new proto.ondewo.s2t.TranscriptionReturnOptions();
								reader.readMessage(value, proto.ondewo.s2t.TranscriptionReturnOptions.deserializeBinaryFromReader);
								msg.setReturnOptions(value);
								break;
							case 9:
								var value = /** @type {string} */ (reader.readString());
								msg.setLanguage(value);
								break;
							case 10:
								var value = /** @type {string} */ (reader.readString());
								msg.setTask(value);
								break;
							case 11:
								var value = new google_protobuf_struct_pb.Struct();
								reader.readMessage(value, google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
								msg.setS2tServiceConfig(value);
								break;
							case 12:
								var value = new proto.ondewo.s2t.S2tCloudProviderConfig();
								reader.readMessage(value, proto.ondewo.s2t.S2tCloudProviderConfig.deserializeBinaryFromReader);
								msg.setS2tCloudProviderConfig(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.TranscribeRequestConfig.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.TranscribeRequestConfig} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getS2tPipelineId();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
					f = message.getDecoding();
					if (f !== 0.0) {
						writer.writeEnum(2, f);
					}
					f = /** @type {string} */ (jspb.Message.getField(message, 3));
					if (f != null) {
						writer.writeString(3, f);
					}
					f = message.getPostProcessing();
					if (f != null) {
						writer.writeMessage(4, f, proto.ondewo.s2t.PostProcessingOptions.serializeBinaryToWriter);
					}
					f = message.getUtteranceDetection();
					if (f != null) {
						writer.writeMessage(5, f, proto.ondewo.s2t.UtteranceDetectionOptions.serializeBinaryToWriter);
					}
					f = message.getPyannote();
					if (f != null) {
						writer.writeMessage(6, f, proto.ondewo.s2t.Pyannote.serializeBinaryToWriter);
					}
					f = message.getReturnOptions();
					if (f != null) {
						writer.writeMessage(8, f, proto.ondewo.s2t.TranscriptionReturnOptions.serializeBinaryToWriter);
					}
					f = /** @type {string} */ (jspb.Message.getField(message, 9));
					if (f != null) {
						writer.writeString(9, f);
					}
					f = /** @type {string} */ (jspb.Message.getField(message, 10));
					if (f != null) {
						writer.writeString(10, f);
					}
					f = message.getS2tServiceConfig();
					if (f != null) {
						writer.writeMessage(11, f, google_protobuf_struct_pb.Struct.serializeBinaryToWriter);
					}
					f = message.getS2tCloudProviderConfig();
					if (f != null) {
						writer.writeMessage(12, f, proto.ondewo.s2t.S2tCloudProviderConfig.serializeBinaryToWriter);
					}
				};

				/**
				 * optional string s2t_pipeline_id = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.getS2tPipelineId = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.TranscribeRequestConfig} returns this
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.setS2tPipelineId = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * optional Decoding decoding = 2;
				 * @return {!proto.ondewo.s2t.Decoding}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.getDecoding = function () {
					return /** @type {!proto.ondewo.s2t.Decoding} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
				};

				/**
				 * @param {!proto.ondewo.s2t.Decoding} value
				 * @return {!proto.ondewo.s2t.TranscribeRequestConfig} returns this
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.setDecoding = function (value) {
					return jspb.Message.setProto3EnumField(this, 2, value);
				};

				/**
				 * optional string language_model_name = 3;
				 * @return {string}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.getLanguageModelName = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.TranscribeRequestConfig} returns this
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.setLanguageModelName = function (value) {
					return jspb.Message.setOneofField(this, 3, proto.ondewo.s2t.TranscribeRequestConfig.oneofGroups_[0], value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.TranscribeRequestConfig} returns this
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.clearLanguageModelName = function () {
					return jspb.Message.setOneofField(
						this,
						3,
						proto.ondewo.s2t.TranscribeRequestConfig.oneofGroups_[0],
						undefined
					);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.hasLanguageModelName = function () {
					return jspb.Message.getField(this, 3) != null;
				};

				/**
				 * optional PostProcessingOptions post_processing = 4;
				 * @return {?proto.ondewo.s2t.PostProcessingOptions}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.getPostProcessing = function () {
					return /** @type{?proto.ondewo.s2t.PostProcessingOptions} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.PostProcessingOptions, 4)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.PostProcessingOptions|undefined} value
				 * @return {!proto.ondewo.s2t.TranscribeRequestConfig} returns this
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.setPostProcessing = function (value) {
					return jspb.Message.setOneofWrapperField(
						this,
						4,
						proto.ondewo.s2t.TranscribeRequestConfig.oneofGroups_[1],
						value
					);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.TranscribeRequestConfig} returns this
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.clearPostProcessing = function () {
					return this.setPostProcessing(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.hasPostProcessing = function () {
					return jspb.Message.getField(this, 4) != null;
				};

				/**
				 * optional UtteranceDetectionOptions utterance_detection = 5;
				 * @return {?proto.ondewo.s2t.UtteranceDetectionOptions}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.getUtteranceDetection = function () {
					return /** @type{?proto.ondewo.s2t.UtteranceDetectionOptions} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.UtteranceDetectionOptions, 5)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.UtteranceDetectionOptions|undefined} value
				 * @return {!proto.ondewo.s2t.TranscribeRequestConfig} returns this
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.setUtteranceDetection = function (value) {
					return jspb.Message.setOneofWrapperField(
						this,
						5,
						proto.ondewo.s2t.TranscribeRequestConfig.oneofGroups_[2],
						value
					);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.TranscribeRequestConfig} returns this
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.clearUtteranceDetection = function () {
					return this.setUtteranceDetection(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.hasUtteranceDetection = function () {
					return jspb.Message.getField(this, 5) != null;
				};

				/**
				 * optional Pyannote pyannote = 6;
				 * @return {?proto.ondewo.s2t.Pyannote}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.getPyannote = function () {
					return /** @type{?proto.ondewo.s2t.Pyannote} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.Pyannote, 6)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.Pyannote|undefined} value
				 * @return {!proto.ondewo.s2t.TranscribeRequestConfig} returns this
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.setPyannote = function (value) {
					return jspb.Message.setOneofWrapperField(
						this,
						6,
						proto.ondewo.s2t.TranscribeRequestConfig.oneofGroups_[3],
						value
					);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.TranscribeRequestConfig} returns this
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.clearPyannote = function () {
					return this.setPyannote(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.hasPyannote = function () {
					return jspb.Message.getField(this, 6) != null;
				};

				/**
				 * optional TranscriptionReturnOptions return_options = 8;
				 * @return {?proto.ondewo.s2t.TranscriptionReturnOptions}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.getReturnOptions = function () {
					return /** @type{?proto.ondewo.s2t.TranscriptionReturnOptions} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.TranscriptionReturnOptions, 8)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.TranscriptionReturnOptions|undefined} value
				 * @return {!proto.ondewo.s2t.TranscribeRequestConfig} returns this
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.setReturnOptions = function (value) {
					return jspb.Message.setOneofWrapperField(
						this,
						8,
						proto.ondewo.s2t.TranscribeRequestConfig.oneofGroups_[4],
						value
					);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.TranscribeRequestConfig} returns this
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.clearReturnOptions = function () {
					return this.setReturnOptions(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.hasReturnOptions = function () {
					return jspb.Message.getField(this, 8) != null;
				};

				/**
				 * optional string language = 9;
				 * @return {string}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.getLanguage = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.TranscribeRequestConfig} returns this
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.setLanguage = function (value) {
					return jspb.Message.setField(this, 9, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.TranscribeRequestConfig} returns this
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.clearLanguage = function () {
					return jspb.Message.setField(this, 9, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.hasLanguage = function () {
					return jspb.Message.getField(this, 9) != null;
				};

				/**
				 * optional string task = 10;
				 * @return {string}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.getTask = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.TranscribeRequestConfig} returns this
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.setTask = function (value) {
					return jspb.Message.setField(this, 10, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.TranscribeRequestConfig} returns this
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.clearTask = function () {
					return jspb.Message.setField(this, 10, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.hasTask = function () {
					return jspb.Message.getField(this, 10) != null;
				};

				/**
				 * optional google.protobuf.Struct s2t_service_config = 11;
				 * @return {?proto.google.protobuf.Struct}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.getS2tServiceConfig = function () {
					return /** @type{?proto.google.protobuf.Struct} */ (
						jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 11)
					);
				};

				/**
				 * @param {?proto.google.protobuf.Struct|undefined} value
				 * @return {!proto.ondewo.s2t.TranscribeRequestConfig} returns this
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.setS2tServiceConfig = function (value) {
					return jspb.Message.setWrapperField(this, 11, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.TranscribeRequestConfig} returns this
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.clearS2tServiceConfig = function () {
					return this.setS2tServiceConfig(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.hasS2tServiceConfig = function () {
					return jspb.Message.getField(this, 11) != null;
				};

				/**
				 * optional S2tCloudProviderConfig s2t_cloud_provider_config = 12;
				 * @return {?proto.ondewo.s2t.S2tCloudProviderConfig}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.getS2tCloudProviderConfig = function () {
					return /** @type{?proto.ondewo.s2t.S2tCloudProviderConfig} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.S2tCloudProviderConfig, 12)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.S2tCloudProviderConfig|undefined} value
				 * @return {!proto.ondewo.s2t.TranscribeRequestConfig} returns this
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.setS2tCloudProviderConfig = function (value) {
					return jspb.Message.setWrapperField(this, 12, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.TranscribeRequestConfig} returns this
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.clearS2tCloudProviderConfig = function () {
					return this.setS2tCloudProviderConfig(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TranscribeRequestConfig.prototype.hasS2tCloudProviderConfig = function () {
					return jspb.Message.getField(this, 12) != null;
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.S2tCloudProviderConfig.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.S2tCloudProviderConfig.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.S2tCloudProviderConfig} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.S2tCloudProviderConfig.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								s2tCloudProviderConfigAmazon:
									(f = msg.getS2tCloudProviderConfigAmazon()) &&
									proto.ondewo.s2t.S2tCloudProviderConfigAmazon.toObject(includeInstance, f),
								s2tCloudProviderConfigDeepgram:
									(f = msg.getS2tCloudProviderConfigDeepgram()) &&
									proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.toObject(includeInstance, f),
								s2tCloudProviderConfigGoogle:
									(f = msg.getS2tCloudProviderConfigGoogle()) &&
									proto.ondewo.s2t.S2tCloudProviderConfigGoogle.toObject(includeInstance, f),
								s2tCloudProviderConfigMicrosoft:
									(f = msg.getS2tCloudProviderConfigMicrosoft()) &&
									proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft.toObject(includeInstance, f)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfig}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfig.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.S2tCloudProviderConfig();
					return proto.ondewo.s2t.S2tCloudProviderConfig.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.S2tCloudProviderConfig} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfig}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfig.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = new proto.ondewo.s2t.S2tCloudProviderConfigAmazon();
								reader.readMessage(value, proto.ondewo.s2t.S2tCloudProviderConfigAmazon.deserializeBinaryFromReader);
								msg.setS2tCloudProviderConfigAmazon(value);
								break;
							case 2:
								var value = new proto.ondewo.s2t.S2tCloudProviderConfigDeepgram();
								reader.readMessage(value, proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.deserializeBinaryFromReader);
								msg.setS2tCloudProviderConfigDeepgram(value);
								break;
							case 3:
								var value = new proto.ondewo.s2t.S2tCloudProviderConfigGoogle();
								reader.readMessage(value, proto.ondewo.s2t.S2tCloudProviderConfigGoogle.deserializeBinaryFromReader);
								msg.setS2tCloudProviderConfigGoogle(value);
								break;
							case 4:
								var value = new proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft();
								reader.readMessage(value, proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft.deserializeBinaryFromReader);
								msg.setS2tCloudProviderConfigMicrosoft(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfig.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.S2tCloudProviderConfig.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.S2tCloudProviderConfig} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.S2tCloudProviderConfig.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getS2tCloudProviderConfigAmazon();
					if (f != null) {
						writer.writeMessage(1, f, proto.ondewo.s2t.S2tCloudProviderConfigAmazon.serializeBinaryToWriter);
					}
					f = message.getS2tCloudProviderConfigDeepgram();
					if (f != null) {
						writer.writeMessage(2, f, proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.serializeBinaryToWriter);
					}
					f = message.getS2tCloudProviderConfigGoogle();
					if (f != null) {
						writer.writeMessage(3, f, proto.ondewo.s2t.S2tCloudProviderConfigGoogle.serializeBinaryToWriter);
					}
					f = message.getS2tCloudProviderConfigMicrosoft();
					if (f != null) {
						writer.writeMessage(4, f, proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft.serializeBinaryToWriter);
					}
				};

				/**
				 * optional S2tCloudProviderConfigAmazon s2t_cloud_provider_config_amazon = 1;
				 * @return {?proto.ondewo.s2t.S2tCloudProviderConfigAmazon}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfig.prototype.getS2tCloudProviderConfigAmazon = function () {
					return /** @type{?proto.ondewo.s2t.S2tCloudProviderConfigAmazon} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.S2tCloudProviderConfigAmazon, 1)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.S2tCloudProviderConfigAmazon|undefined} value
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfig} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfig.prototype.setS2tCloudProviderConfigAmazon = function (value) {
					return jspb.Message.setWrapperField(this, 1, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfig} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfig.prototype.clearS2tCloudProviderConfigAmazon = function () {
					return this.setS2tCloudProviderConfigAmazon(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfig.prototype.hasS2tCloudProviderConfigAmazon = function () {
					return jspb.Message.getField(this, 1) != null;
				};

				/**
				 * optional S2tCloudProviderConfigDeepgram s2t_cloud_provider_config_deepgram = 2;
				 * @return {?proto.ondewo.s2t.S2tCloudProviderConfigDeepgram}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfig.prototype.getS2tCloudProviderConfigDeepgram = function () {
					return /** @type{?proto.ondewo.s2t.S2tCloudProviderConfigDeepgram} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.S2tCloudProviderConfigDeepgram, 2)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.S2tCloudProviderConfigDeepgram|undefined} value
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfig} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfig.prototype.setS2tCloudProviderConfigDeepgram = function (value) {
					return jspb.Message.setWrapperField(this, 2, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfig} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfig.prototype.clearS2tCloudProviderConfigDeepgram = function () {
					return this.setS2tCloudProviderConfigDeepgram(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfig.prototype.hasS2tCloudProviderConfigDeepgram = function () {
					return jspb.Message.getField(this, 2) != null;
				};

				/**
				 * optional S2tCloudProviderConfigGoogle s2t_cloud_provider_config_google = 3;
				 * @return {?proto.ondewo.s2t.S2tCloudProviderConfigGoogle}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfig.prototype.getS2tCloudProviderConfigGoogle = function () {
					return /** @type{?proto.ondewo.s2t.S2tCloudProviderConfigGoogle} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.S2tCloudProviderConfigGoogle, 3)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.S2tCloudProviderConfigGoogle|undefined} value
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfig} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfig.prototype.setS2tCloudProviderConfigGoogle = function (value) {
					return jspb.Message.setWrapperField(this, 3, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfig} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfig.prototype.clearS2tCloudProviderConfigGoogle = function () {
					return this.setS2tCloudProviderConfigGoogle(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfig.prototype.hasS2tCloudProviderConfigGoogle = function () {
					return jspb.Message.getField(this, 3) != null;
				};

				/**
				 * optional S2tCloudProviderConfigMicrosoft s2t_cloud_provider_config_microsoft = 4;
				 * @return {?proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfig.prototype.getS2tCloudProviderConfigMicrosoft = function () {
					return /** @type{?proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft, 4)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft|undefined} value
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfig} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfig.prototype.setS2tCloudProviderConfigMicrosoft = function (value) {
					return jspb.Message.setWrapperField(this, 4, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfig} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfig.prototype.clearS2tCloudProviderConfigMicrosoft = function () {
					return this.setS2tCloudProviderConfigMicrosoft(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfig.prototype.hasS2tCloudProviderConfigMicrosoft = function () {
					return jspb.Message.getField(this, 4) != null;
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.S2tCloudProviderConfigAmazon.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.S2tCloudProviderConfigAmazon.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.S2tCloudProviderConfigAmazon} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.S2tCloudProviderConfigAmazon.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								enablePartialResultsStabilization: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
								partialResultsStability: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
								languageModelName: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
								vocabularyName: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigAmazon}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigAmazon.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.S2tCloudProviderConfigAmazon();
					return proto.ondewo.s2t.S2tCloudProviderConfigAmazon.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.S2tCloudProviderConfigAmazon} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigAmazon}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigAmazon.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setEnablePartialResultsStabilization(value);
								break;
							case 2:
								var value = /** @type {string} */ (reader.readString());
								msg.setPartialResultsStability(value);
								break;
							case 3:
								var value = /** @type {string} */ (reader.readString());
								msg.setLanguageModelName(value);
								break;
							case 4:
								var value = /** @type {string} */ (reader.readString());
								msg.setVocabularyName(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigAmazon.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.S2tCloudProviderConfigAmazon.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.S2tCloudProviderConfigAmazon} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigAmazon.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
					if (f != null) {
						writer.writeBool(1, f);
					}
					f = /** @type {string} */ (jspb.Message.getField(message, 2));
					if (f != null) {
						writer.writeString(2, f);
					}
					f = /** @type {string} */ (jspb.Message.getField(message, 3));
					if (f != null) {
						writer.writeString(3, f);
					}
					f = /** @type {string} */ (jspb.Message.getField(message, 4));
					if (f != null) {
						writer.writeString(4, f);
					}
				};

				/**
				 * optional bool enable_partial_results_stabilization = 1;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigAmazon.prototype.getEnablePartialResultsStabilization = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigAmazon} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigAmazon.prototype.setEnablePartialResultsStabilization = function (
					value
				) {
					return jspb.Message.setField(this, 1, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigAmazon} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigAmazon.prototype.clearEnablePartialResultsStabilization = function () {
					return jspb.Message.setField(this, 1, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigAmazon.prototype.hasEnablePartialResultsStabilization = function () {
					return jspb.Message.getField(this, 1) != null;
				};

				/**
				 * optional string partial_results_stability = 2;
				 * @return {string}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigAmazon.prototype.getPartialResultsStability = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigAmazon} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigAmazon.prototype.setPartialResultsStability = function (value) {
					return jspb.Message.setField(this, 2, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigAmazon} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigAmazon.prototype.clearPartialResultsStability = function () {
					return jspb.Message.setField(this, 2, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigAmazon.prototype.hasPartialResultsStability = function () {
					return jspb.Message.getField(this, 2) != null;
				};

				/**
				 * optional string language_model_name = 3;
				 * @return {string}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigAmazon.prototype.getLanguageModelName = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigAmazon} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigAmazon.prototype.setLanguageModelName = function (value) {
					return jspb.Message.setField(this, 3, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigAmazon} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigAmazon.prototype.clearLanguageModelName = function () {
					return jspb.Message.setField(this, 3, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigAmazon.prototype.hasLanguageModelName = function () {
					return jspb.Message.getField(this, 3) != null;
				};

				/**
				 * optional string vocabulary_name = 4;
				 * @return {string}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigAmazon.prototype.getVocabularyName = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigAmazon} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigAmazon.prototype.setVocabularyName = function (value) {
					return jspb.Message.setField(this, 4, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigAmazon} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigAmazon.prototype.clearVocabularyName = function () {
					return jspb.Message.setField(this, 4, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigAmazon.prototype.hasVocabularyName = function () {
					return jspb.Message.getField(this, 4) != null;
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.S2tCloudProviderConfigDeepgram} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								punctuate: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
								smartFormat: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
								numerals: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
								measurements: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f,
								dictation: (f = jspb.Message.getBooleanField(msg, 5)) == null ? undefined : f
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigDeepgram}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.S2tCloudProviderConfigDeepgram();
					return proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.S2tCloudProviderConfigDeepgram} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigDeepgram}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setPunctuate(value);
								break;
							case 2:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setSmartFormat(value);
								break;
							case 3:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setNumerals(value);
								break;
							case 4:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setMeasurements(value);
								break;
							case 5:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setDictation(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.S2tCloudProviderConfigDeepgram} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
					if (f != null) {
						writer.writeBool(1, f);
					}
					f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
					if (f != null) {
						writer.writeBool(2, f);
					}
					f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
					if (f != null) {
						writer.writeBool(3, f);
					}
					f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
					if (f != null) {
						writer.writeBool(4, f);
					}
					f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
					if (f != null) {
						writer.writeBool(5, f);
					}
				};

				/**
				 * optional bool punctuate = 1;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.prototype.getPunctuate = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigDeepgram} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.prototype.setPunctuate = function (value) {
					return jspb.Message.setField(this, 1, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigDeepgram} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.prototype.clearPunctuate = function () {
					return jspb.Message.setField(this, 1, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.prototype.hasPunctuate = function () {
					return jspb.Message.getField(this, 1) != null;
				};

				/**
				 * optional bool smart_format = 2;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.prototype.getSmartFormat = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigDeepgram} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.prototype.setSmartFormat = function (value) {
					return jspb.Message.setField(this, 2, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigDeepgram} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.prototype.clearSmartFormat = function () {
					return jspb.Message.setField(this, 2, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.prototype.hasSmartFormat = function () {
					return jspb.Message.getField(this, 2) != null;
				};

				/**
				 * optional bool numerals = 3;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.prototype.getNumerals = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigDeepgram} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.prototype.setNumerals = function (value) {
					return jspb.Message.setField(this, 3, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigDeepgram} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.prototype.clearNumerals = function () {
					return jspb.Message.setField(this, 3, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.prototype.hasNumerals = function () {
					return jspb.Message.getField(this, 3) != null;
				};

				/**
				 * optional bool measurements = 4;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.prototype.getMeasurements = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigDeepgram} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.prototype.setMeasurements = function (value) {
					return jspb.Message.setField(this, 4, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigDeepgram} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.prototype.clearMeasurements = function () {
					return jspb.Message.setField(this, 4, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.prototype.hasMeasurements = function () {
					return jspb.Message.getField(this, 4) != null;
				};

				/**
				 * optional bool dictation = 5;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.prototype.getDictation = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigDeepgram} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.prototype.setDictation = function (value) {
					return jspb.Message.setField(this, 5, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigDeepgram} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.prototype.clearDictation = function () {
					return jspb.Message.setField(this, 5, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigDeepgram.prototype.hasDictation = function () {
					return jspb.Message.getField(this, 5) != null;
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.S2tCloudProviderConfigGoogle.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.S2tCloudProviderConfigGoogle.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.S2tCloudProviderConfigGoogle} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.S2tCloudProviderConfigGoogle.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								enableAutomaticPunctuation: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
								enableWordTimeOffsets: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
								enableWordConfidence: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
								transcriptNormalization: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f,
								maxAlternatives: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigGoogle}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigGoogle.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.S2tCloudProviderConfigGoogle();
					return proto.ondewo.s2t.S2tCloudProviderConfigGoogle.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.S2tCloudProviderConfigGoogle} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigGoogle}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigGoogle.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setEnableAutomaticPunctuation(value);
								break;
							case 2:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setEnableWordTimeOffsets(value);
								break;
							case 3:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setEnableWordConfidence(value);
								break;
							case 4:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setTranscriptNormalization(value);
								break;
							case 5:
								var value = /** @type {number} */ (reader.readInt32());
								msg.setMaxAlternatives(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigGoogle.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.S2tCloudProviderConfigGoogle.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.S2tCloudProviderConfigGoogle} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigGoogle.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
					if (f != null) {
						writer.writeBool(1, f);
					}
					f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
					if (f != null) {
						writer.writeBool(2, f);
					}
					f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
					if (f != null) {
						writer.writeBool(3, f);
					}
					f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
					if (f != null) {
						writer.writeBool(4, f);
					}
					f = /** @type {number} */ (jspb.Message.getField(message, 5));
					if (f != null) {
						writer.writeInt32(5, f);
					}
				};

				/**
				 * optional bool enable_automatic_punctuation = 1;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigGoogle.prototype.getEnableAutomaticPunctuation = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigGoogle} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigGoogle.prototype.setEnableAutomaticPunctuation = function (value) {
					return jspb.Message.setField(this, 1, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigGoogle} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigGoogle.prototype.clearEnableAutomaticPunctuation = function () {
					return jspb.Message.setField(this, 1, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigGoogle.prototype.hasEnableAutomaticPunctuation = function () {
					return jspb.Message.getField(this, 1) != null;
				};

				/**
				 * optional bool enable_word_time_offsets = 2;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigGoogle.prototype.getEnableWordTimeOffsets = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigGoogle} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigGoogle.prototype.setEnableWordTimeOffsets = function (value) {
					return jspb.Message.setField(this, 2, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigGoogle} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigGoogle.prototype.clearEnableWordTimeOffsets = function () {
					return jspb.Message.setField(this, 2, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigGoogle.prototype.hasEnableWordTimeOffsets = function () {
					return jspb.Message.getField(this, 2) != null;
				};

				/**
				 * optional bool enable_word_confidence = 3;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigGoogle.prototype.getEnableWordConfidence = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigGoogle} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigGoogle.prototype.setEnableWordConfidence = function (value) {
					return jspb.Message.setField(this, 3, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigGoogle} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigGoogle.prototype.clearEnableWordConfidence = function () {
					return jspb.Message.setField(this, 3, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigGoogle.prototype.hasEnableWordConfidence = function () {
					return jspb.Message.getField(this, 3) != null;
				};

				/**
				 * optional bool transcript_normalization = 4;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigGoogle.prototype.getTranscriptNormalization = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigGoogle} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigGoogle.prototype.setTranscriptNormalization = function (value) {
					return jspb.Message.setField(this, 4, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigGoogle} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigGoogle.prototype.clearTranscriptNormalization = function () {
					return jspb.Message.setField(this, 4, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigGoogle.prototype.hasTranscriptNormalization = function () {
					return jspb.Message.getField(this, 4) != null;
				};

				/**
				 * optional int32 max_alternatives = 5;
				 * @return {number}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigGoogle.prototype.getMaxAlternatives = function () {
					return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigGoogle} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigGoogle.prototype.setMaxAlternatives = function (value) {
					return jspb.Message.setField(this, 5, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigGoogle} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigGoogle.prototype.clearMaxAlternatives = function () {
					return jspb.Message.setField(this, 5, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigGoogle.prototype.hasMaxAlternatives = function () {
					return jspb.Message.getField(this, 5) != null;
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								useFastTranscriptionApi: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
								useDetailedOutputFormat: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft();
					return proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setUseFastTranscriptionApi(value);
								break;
							case 2:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setUseDetailedOutputFormat(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
					if (f != null) {
						writer.writeBool(1, f);
					}
					f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
					if (f != null) {
						writer.writeBool(2, f);
					}
				};

				/**
				 * optional bool use_fast_transcription_api = 1;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft.prototype.getUseFastTranscriptionApi = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft.prototype.setUseFastTranscriptionApi = function (value) {
					return jspb.Message.setField(this, 1, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft.prototype.clearUseFastTranscriptionApi = function () {
					return jspb.Message.setField(this, 1, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft.prototype.hasUseFastTranscriptionApi = function () {
					return jspb.Message.getField(this, 1) != null;
				};

				/**
				 * optional bool use_detailed_output_format = 2;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft.prototype.getUseDetailedOutputFormat = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft.prototype.setUseDetailedOutputFormat = function (value) {
					return jspb.Message.setField(this, 2, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft} returns this
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft.prototype.clearUseDetailedOutputFormat = function () {
					return jspb.Message.setField(this, 2, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudProviderConfigMicrosoft.prototype.hasUseDetailedOutputFormat = function () {
					return jspb.Message.getField(this, 2) != null;
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.TranscriptionReturnOptions.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.TranscriptionReturnOptions.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.TranscriptionReturnOptions} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.TranscriptionReturnOptions.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								returnStartOfSpeech: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
								returnAudio: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
								returnConfidenceScore: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
								returnAlternativeTranscriptions: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
								returnAlternativeTranscriptionsNr: jspb.Message.getFieldWithDefault(msg, 5, 0),
								returnAlternativeWords: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
								returnAlternativeWordsNr: jspb.Message.getFieldWithDefault(msg, 7, 0),
								returnWordTiming: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.TranscriptionReturnOptions}
				 */
				proto.ondewo.s2t.TranscriptionReturnOptions.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.TranscriptionReturnOptions();
					return proto.ondewo.s2t.TranscriptionReturnOptions.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.TranscriptionReturnOptions} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.TranscriptionReturnOptions}
				 */
				proto.ondewo.s2t.TranscriptionReturnOptions.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setReturnStartOfSpeech(value);
								break;
							case 2:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setReturnAudio(value);
								break;
							case 3:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setReturnConfidenceScore(value);
								break;
							case 4:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setReturnAlternativeTranscriptions(value);
								break;
							case 5:
								var value = /** @type {number} */ (reader.readInt32());
								msg.setReturnAlternativeTranscriptionsNr(value);
								break;
							case 6:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setReturnAlternativeWords(value);
								break;
							case 7:
								var value = /** @type {number} */ (reader.readInt32());
								msg.setReturnAlternativeWordsNr(value);
								break;
							case 8:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setReturnWordTiming(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.TranscriptionReturnOptions.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.TranscriptionReturnOptions.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.TranscriptionReturnOptions} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.TranscriptionReturnOptions.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getReturnStartOfSpeech();
					if (f) {
						writer.writeBool(1, f);
					}
					f = message.getReturnAudio();
					if (f) {
						writer.writeBool(2, f);
					}
					f = message.getReturnConfidenceScore();
					if (f) {
						writer.writeBool(3, f);
					}
					f = message.getReturnAlternativeTranscriptions();
					if (f) {
						writer.writeBool(4, f);
					}
					f = message.getReturnAlternativeTranscriptionsNr();
					if (f !== 0) {
						writer.writeInt32(5, f);
					}
					f = message.getReturnAlternativeWords();
					if (f) {
						writer.writeBool(6, f);
					}
					f = message.getReturnAlternativeWordsNr();
					if (f !== 0) {
						writer.writeInt32(7, f);
					}
					f = message.getReturnWordTiming();
					if (f) {
						writer.writeBool(8, f);
					}
				};

				/**
				 * optional bool return_start_of_speech = 1;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TranscriptionReturnOptions.prototype.getReturnStartOfSpeech = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.TranscriptionReturnOptions} returns this
				 */
				proto.ondewo.s2t.TranscriptionReturnOptions.prototype.setReturnStartOfSpeech = function (value) {
					return jspb.Message.setProto3BooleanField(this, 1, value);
				};

				/**
				 * optional bool return_audio = 2;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TranscriptionReturnOptions.prototype.getReturnAudio = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.TranscriptionReturnOptions} returns this
				 */
				proto.ondewo.s2t.TranscriptionReturnOptions.prototype.setReturnAudio = function (value) {
					return jspb.Message.setProto3BooleanField(this, 2, value);
				};

				/**
				 * optional bool return_confidence_score = 3;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TranscriptionReturnOptions.prototype.getReturnConfidenceScore = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.TranscriptionReturnOptions} returns this
				 */
				proto.ondewo.s2t.TranscriptionReturnOptions.prototype.setReturnConfidenceScore = function (value) {
					return jspb.Message.setProto3BooleanField(this, 3, value);
				};

				/**
				 * optional bool return_alternative_transcriptions = 4;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TranscriptionReturnOptions.prototype.getReturnAlternativeTranscriptions = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.TranscriptionReturnOptions} returns this
				 */
				proto.ondewo.s2t.TranscriptionReturnOptions.prototype.setReturnAlternativeTranscriptions = function (value) {
					return jspb.Message.setProto3BooleanField(this, 4, value);
				};

				/**
				 * optional int32 return_alternative_transcriptions_nr = 5;
				 * @return {number}
				 */
				proto.ondewo.s2t.TranscriptionReturnOptions.prototype.getReturnAlternativeTranscriptionsNr = function () {
					return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.TranscriptionReturnOptions} returns this
				 */
				proto.ondewo.s2t.TranscriptionReturnOptions.prototype.setReturnAlternativeTranscriptionsNr = function (value) {
					return jspb.Message.setProto3IntField(this, 5, value);
				};

				/**
				 * optional bool return_alternative_words = 6;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TranscriptionReturnOptions.prototype.getReturnAlternativeWords = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.TranscriptionReturnOptions} returns this
				 */
				proto.ondewo.s2t.TranscriptionReturnOptions.prototype.setReturnAlternativeWords = function (value) {
					return jspb.Message.setProto3BooleanField(this, 6, value);
				};

				/**
				 * optional int32 return_alternative_words_nr = 7;
				 * @return {number}
				 */
				proto.ondewo.s2t.TranscriptionReturnOptions.prototype.getReturnAlternativeWordsNr = function () {
					return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.TranscriptionReturnOptions} returns this
				 */
				proto.ondewo.s2t.TranscriptionReturnOptions.prototype.setReturnAlternativeWordsNr = function (value) {
					return jspb.Message.setProto3IntField(this, 7, value);
				};

				/**
				 * optional bool return_word_timing = 8;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TranscriptionReturnOptions.prototype.getReturnWordTiming = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.TranscriptionReturnOptions} returns this
				 */
				proto.ondewo.s2t.TranscriptionReturnOptions.prototype.setReturnWordTiming = function (value) {
					return jspb.Message.setProto3BooleanField(this, 8, value);
				};

				/**
				 * Oneof group definitions for this message. Each group defines the field
				 * numbers belonging to that group. When of these fields' value is set, all
				 * other fields in the group are cleared. During deserialization, if multiple
				 * fields are encountered for a group, only the last value seen will be kept.
				 * @private {!Array<!Array<number>>}
				 * @const
				 */
				proto.ondewo.s2t.UtteranceDetectionOptions.oneofGroups_ = [[1], [3]];

				/**
				 * @enum {number}
				 */
				proto.ondewo.s2t.UtteranceDetectionOptions.OneofTranscribeNotFinalCase = {
					ONEOF_TRANSCRIBE_NOT_FINAL_NOT_SET: 0,
					TRANSCRIBE_NOT_FINAL: 1
				};

				/**
				 * @return {proto.ondewo.s2t.UtteranceDetectionOptions.OneofTranscribeNotFinalCase}
				 */
				proto.ondewo.s2t.UtteranceDetectionOptions.prototype.getOneofTranscribeNotFinalCase = function () {
					return /** @type {proto.ondewo.s2t.UtteranceDetectionOptions.OneofTranscribeNotFinalCase} */ (
						jspb.Message.computeOneofCase(this, proto.ondewo.s2t.UtteranceDetectionOptions.oneofGroups_[0])
					);
				};

				/**
				 * @enum {number}
				 */
				proto.ondewo.s2t.UtteranceDetectionOptions.OneofTurnDetectionCase = {
					ONEOF_TURN_DETECTION_NOT_SET: 0,
					TURN_DETECTION: 3
				};

				/**
				 * @return {proto.ondewo.s2t.UtteranceDetectionOptions.OneofTurnDetectionCase}
				 */
				proto.ondewo.s2t.UtteranceDetectionOptions.prototype.getOneofTurnDetectionCase = function () {
					return /** @type {proto.ondewo.s2t.UtteranceDetectionOptions.OneofTurnDetectionCase} */ (
						jspb.Message.computeOneofCase(this, proto.ondewo.s2t.UtteranceDetectionOptions.oneofGroups_[1])
					);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.UtteranceDetectionOptions.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.UtteranceDetectionOptions.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.UtteranceDetectionOptions} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.UtteranceDetectionOptions.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								transcribeNotFinal: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
								nextChunkTimeout: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
								turnDetection:
									(f = msg.getTurnDetection()) && proto.ondewo.s2t.TurnDetectionOptions.toObject(includeInstance, f)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.UtteranceDetectionOptions}
				 */
				proto.ondewo.s2t.UtteranceDetectionOptions.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.UtteranceDetectionOptions();
					return proto.ondewo.s2t.UtteranceDetectionOptions.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.UtteranceDetectionOptions} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.UtteranceDetectionOptions}
				 */
				proto.ondewo.s2t.UtteranceDetectionOptions.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setTranscribeNotFinal(value);
								break;
							case 2:
								var value = /** @type {number} */ (reader.readFloat());
								msg.setNextChunkTimeout(value);
								break;
							case 3:
								var value = new proto.ondewo.s2t.TurnDetectionOptions();
								reader.readMessage(value, proto.ondewo.s2t.TurnDetectionOptions.deserializeBinaryFromReader);
								msg.setTurnDetection(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.UtteranceDetectionOptions.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.UtteranceDetectionOptions.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.UtteranceDetectionOptions} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.UtteranceDetectionOptions.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
					if (f != null) {
						writer.writeBool(1, f);
					}
					f = message.getNextChunkTimeout();
					if (f !== 0.0) {
						writer.writeFloat(2, f);
					}
					f = message.getTurnDetection();
					if (f != null) {
						writer.writeMessage(3, f, proto.ondewo.s2t.TurnDetectionOptions.serializeBinaryToWriter);
					}
				};

				/**
				 * optional bool transcribe_not_final = 1;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.UtteranceDetectionOptions.prototype.getTranscribeNotFinal = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.UtteranceDetectionOptions} returns this
				 */
				proto.ondewo.s2t.UtteranceDetectionOptions.prototype.setTranscribeNotFinal = function (value) {
					return jspb.Message.setOneofField(this, 1, proto.ondewo.s2t.UtteranceDetectionOptions.oneofGroups_[0], value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.UtteranceDetectionOptions} returns this
				 */
				proto.ondewo.s2t.UtteranceDetectionOptions.prototype.clearTranscribeNotFinal = function () {
					return jspb.Message.setOneofField(
						this,
						1,
						proto.ondewo.s2t.UtteranceDetectionOptions.oneofGroups_[0],
						undefined
					);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.UtteranceDetectionOptions.prototype.hasTranscribeNotFinal = function () {
					return jspb.Message.getField(this, 1) != null;
				};

				/**
				 * optional float next_chunk_timeout = 2;
				 * @return {number}
				 */
				proto.ondewo.s2t.UtteranceDetectionOptions.prototype.getNextChunkTimeout = function () {
					return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.UtteranceDetectionOptions} returns this
				 */
				proto.ondewo.s2t.UtteranceDetectionOptions.prototype.setNextChunkTimeout = function (value) {
					return jspb.Message.setProto3FloatField(this, 2, value);
				};

				/**
				 * optional TurnDetectionOptions turn_detection = 3;
				 * @return {?proto.ondewo.s2t.TurnDetectionOptions}
				 */
				proto.ondewo.s2t.UtteranceDetectionOptions.prototype.getTurnDetection = function () {
					return /** @type{?proto.ondewo.s2t.TurnDetectionOptions} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.TurnDetectionOptions, 3)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.TurnDetectionOptions|undefined} value
				 * @return {!proto.ondewo.s2t.UtteranceDetectionOptions} returns this
				 */
				proto.ondewo.s2t.UtteranceDetectionOptions.prototype.setTurnDetection = function (value) {
					return jspb.Message.setOneofWrapperField(
						this,
						3,
						proto.ondewo.s2t.UtteranceDetectionOptions.oneofGroups_[1],
						value
					);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.UtteranceDetectionOptions} returns this
				 */
				proto.ondewo.s2t.UtteranceDetectionOptions.prototype.clearTurnDetection = function () {
					return this.setTurnDetection(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.UtteranceDetectionOptions.prototype.hasTurnDetection = function () {
					return jspb.Message.getField(this, 3) != null;
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.PostProcessingOptions.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.PostProcessingOptions.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.PostProcessingOptions} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.PostProcessingOptions.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								spellingCorrection: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
								normalize: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
								config: (f = msg.getConfig()) && proto.ondewo.s2t.PostProcessing.toObject(includeInstance, f),
								llmPostProcessing: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.PostProcessingOptions}
				 */
				proto.ondewo.s2t.PostProcessingOptions.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.PostProcessingOptions();
					return proto.ondewo.s2t.PostProcessingOptions.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.PostProcessingOptions} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.PostProcessingOptions}
				 */
				proto.ondewo.s2t.PostProcessingOptions.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setSpellingCorrection(value);
								break;
							case 2:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setNormalize(value);
								break;
							case 3:
								var value = new proto.ondewo.s2t.PostProcessing();
								reader.readMessage(value, proto.ondewo.s2t.PostProcessing.deserializeBinaryFromReader);
								msg.setConfig(value);
								break;
							case 4:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setLlmPostProcessing(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.PostProcessingOptions.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.PostProcessingOptions.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.PostProcessingOptions} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.PostProcessingOptions.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getSpellingCorrection();
					if (f) {
						writer.writeBool(1, f);
					}
					f = message.getNormalize();
					if (f) {
						writer.writeBool(2, f);
					}
					f = message.getConfig();
					if (f != null) {
						writer.writeMessage(3, f, proto.ondewo.s2t.PostProcessing.serializeBinaryToWriter);
					}
					f = message.getLlmPostProcessing();
					if (f) {
						writer.writeBool(4, f);
					}
				};

				/**
				 * optional bool spelling_correction = 1;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.PostProcessingOptions.prototype.getSpellingCorrection = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.PostProcessingOptions} returns this
				 */
				proto.ondewo.s2t.PostProcessingOptions.prototype.setSpellingCorrection = function (value) {
					return jspb.Message.setProto3BooleanField(this, 1, value);
				};

				/**
				 * optional bool normalize = 2;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.PostProcessingOptions.prototype.getNormalize = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.PostProcessingOptions} returns this
				 */
				proto.ondewo.s2t.PostProcessingOptions.prototype.setNormalize = function (value) {
					return jspb.Message.setProto3BooleanField(this, 2, value);
				};

				/**
				 * optional PostProcessing config = 3;
				 * @return {?proto.ondewo.s2t.PostProcessing}
				 */
				proto.ondewo.s2t.PostProcessingOptions.prototype.getConfig = function () {
					return /** @type{?proto.ondewo.s2t.PostProcessing} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.PostProcessing, 3)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.PostProcessing|undefined} value
				 * @return {!proto.ondewo.s2t.PostProcessingOptions} returns this
				 */
				proto.ondewo.s2t.PostProcessingOptions.prototype.setConfig = function (value) {
					return jspb.Message.setWrapperField(this, 3, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.PostProcessingOptions} returns this
				 */
				proto.ondewo.s2t.PostProcessingOptions.prototype.clearConfig = function () {
					return this.setConfig(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.PostProcessingOptions.prototype.hasConfig = function () {
					return jspb.Message.getField(this, 3) != null;
				};

				/**
				 * optional bool llm_post_processing = 4;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.PostProcessingOptions.prototype.getLlmPostProcessing = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.PostProcessingOptions} returns this
				 */
				proto.ondewo.s2t.PostProcessingOptions.prototype.setLlmPostProcessing = function (value) {
					return jspb.Message.setProto3BooleanField(this, 4, value);
				};

				/**
				 * List of repeated fields within this message type.
				 * @private {!Array<number>}
				 * @const
				 */
				proto.ondewo.s2t.Transcription.repeatedFields_ = [3, 4];

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.Transcription.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.Transcription.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.Transcription} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.Transcription.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								transcription: jspb.Message.getFieldWithDefault(msg, 1, ''),
								confidenceScore: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
								wordsList: jspb.Message.toObjectList(
									msg.getWordsList(),
									proto.ondewo.s2t.WordDetail.toObject,
									includeInstance
								),
								alternativesList: jspb.Message.toObjectList(
									msg.getAlternativesList(),
									proto.ondewo.s2t.TranscriptionAlternative.toObject,
									includeInstance
								)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.Transcription}
				 */
				proto.ondewo.s2t.Transcription.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.Transcription();
					return proto.ondewo.s2t.Transcription.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.Transcription} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.Transcription}
				 */
				proto.ondewo.s2t.Transcription.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setTranscription(value);
								break;
							case 2:
								var value = /** @type {number} */ (reader.readFloat());
								msg.setConfidenceScore(value);
								break;
							case 3:
								var value = new proto.ondewo.s2t.WordDetail();
								reader.readMessage(value, proto.ondewo.s2t.WordDetail.deserializeBinaryFromReader);
								msg.addWords(value);
								break;
							case 4:
								var value = new proto.ondewo.s2t.TranscriptionAlternative();
								reader.readMessage(value, proto.ondewo.s2t.TranscriptionAlternative.deserializeBinaryFromReader);
								msg.addAlternatives(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.Transcription.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.Transcription.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.Transcription} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.Transcription.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getTranscription();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
					f = message.getConfidenceScore();
					if (f !== 0.0) {
						writer.writeFloat(2, f);
					}
					f = message.getWordsList();
					if (f.length > 0) {
						writer.writeRepeatedMessage(3, f, proto.ondewo.s2t.WordDetail.serializeBinaryToWriter);
					}
					f = message.getAlternativesList();
					if (f.length > 0) {
						writer.writeRepeatedMessage(4, f, proto.ondewo.s2t.TranscriptionAlternative.serializeBinaryToWriter);
					}
				};

				/**
				 * optional string transcription = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.Transcription.prototype.getTranscription = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.Transcription} returns this
				 */
				proto.ondewo.s2t.Transcription.prototype.setTranscription = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * optional float confidence_score = 2;
				 * @return {number}
				 */
				proto.ondewo.s2t.Transcription.prototype.getConfidenceScore = function () {
					return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.Transcription} returns this
				 */
				proto.ondewo.s2t.Transcription.prototype.setConfidenceScore = function (value) {
					return jspb.Message.setProto3FloatField(this, 2, value);
				};

				/**
				 * repeated WordDetail words = 3;
				 * @return {!Array<!proto.ondewo.s2t.WordDetail>}
				 */
				proto.ondewo.s2t.Transcription.prototype.getWordsList = function () {
					return /** @type{!Array<!proto.ondewo.s2t.WordDetail>} */ (
						jspb.Message.getRepeatedWrapperField(this, proto.ondewo.s2t.WordDetail, 3)
					);
				};

				/**
				 * @param {!Array<!proto.ondewo.s2t.WordDetail>} value
				 * @return {!proto.ondewo.s2t.Transcription} returns this
				 */
				proto.ondewo.s2t.Transcription.prototype.setWordsList = function (value) {
					return jspb.Message.setRepeatedWrapperField(this, 3, value);
				};

				/**
				 * @param {!proto.ondewo.s2t.WordDetail=} opt_value
				 * @param {number=} opt_index
				 * @return {!proto.ondewo.s2t.WordDetail}
				 */
				proto.ondewo.s2t.Transcription.prototype.addWords = function (opt_value, opt_index) {
					return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ondewo.s2t.WordDetail, opt_index);
				};

				/**
				 * Clears the list making it empty but non-null.
				 * @return {!proto.ondewo.s2t.Transcription} returns this
				 */
				proto.ondewo.s2t.Transcription.prototype.clearWordsList = function () {
					return this.setWordsList([]);
				};

				/**
				 * repeated TranscriptionAlternative alternatives = 4;
				 * @return {!Array<!proto.ondewo.s2t.TranscriptionAlternative>}
				 */
				proto.ondewo.s2t.Transcription.prototype.getAlternativesList = function () {
					return /** @type{!Array<!proto.ondewo.s2t.TranscriptionAlternative>} */ (
						jspb.Message.getRepeatedWrapperField(this, proto.ondewo.s2t.TranscriptionAlternative, 4)
					);
				};

				/**
				 * @param {!Array<!proto.ondewo.s2t.TranscriptionAlternative>} value
				 * @return {!proto.ondewo.s2t.Transcription} returns this
				 */
				proto.ondewo.s2t.Transcription.prototype.setAlternativesList = function (value) {
					return jspb.Message.setRepeatedWrapperField(this, 4, value);
				};

				/**
				 * @param {!proto.ondewo.s2t.TranscriptionAlternative=} opt_value
				 * @param {number=} opt_index
				 * @return {!proto.ondewo.s2t.TranscriptionAlternative}
				 */
				proto.ondewo.s2t.Transcription.prototype.addAlternatives = function (opt_value, opt_index) {
					return jspb.Message.addToRepeatedWrapperField(
						this,
						4,
						opt_value,
						proto.ondewo.s2t.TranscriptionAlternative,
						opt_index
					);
				};

				/**
				 * Clears the list making it empty but non-null.
				 * @return {!proto.ondewo.s2t.Transcription} returns this
				 */
				proto.ondewo.s2t.Transcription.prototype.clearAlternativesList = function () {
					return this.setAlternativesList([]);
				};

				/**
				 * List of repeated fields within this message type.
				 * @private {!Array<number>}
				 * @const
				 */
				proto.ondewo.s2t.TranscriptionAlternative.repeatedFields_ = [3];

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.TranscriptionAlternative.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.TranscriptionAlternative.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.TranscriptionAlternative} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.TranscriptionAlternative.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								transcript: jspb.Message.getFieldWithDefault(msg, 1, ''),
								confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
								wordsList: jspb.Message.toObjectList(
									msg.getWordsList(),
									proto.ondewo.s2t.WordDetail.toObject,
									includeInstance
								)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.TranscriptionAlternative}
				 */
				proto.ondewo.s2t.TranscriptionAlternative.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.TranscriptionAlternative();
					return proto.ondewo.s2t.TranscriptionAlternative.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.TranscriptionAlternative} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.TranscriptionAlternative}
				 */
				proto.ondewo.s2t.TranscriptionAlternative.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setTranscript(value);
								break;
							case 2:
								var value = /** @type {number} */ (reader.readFloat());
								msg.setConfidence(value);
								break;
							case 3:
								var value = new proto.ondewo.s2t.WordDetail();
								reader.readMessage(value, proto.ondewo.s2t.WordDetail.deserializeBinaryFromReader);
								msg.addWords(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.TranscriptionAlternative.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.TranscriptionAlternative.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.TranscriptionAlternative} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.TranscriptionAlternative.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getTranscript();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
					f = message.getConfidence();
					if (f !== 0.0) {
						writer.writeFloat(2, f);
					}
					f = message.getWordsList();
					if (f.length > 0) {
						writer.writeRepeatedMessage(3, f, proto.ondewo.s2t.WordDetail.serializeBinaryToWriter);
					}
				};

				/**
				 * optional string transcript = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.TranscriptionAlternative.prototype.getTranscript = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.TranscriptionAlternative} returns this
				 */
				proto.ondewo.s2t.TranscriptionAlternative.prototype.setTranscript = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * optional float confidence = 2;
				 * @return {number}
				 */
				proto.ondewo.s2t.TranscriptionAlternative.prototype.getConfidence = function () {
					return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.TranscriptionAlternative} returns this
				 */
				proto.ondewo.s2t.TranscriptionAlternative.prototype.setConfidence = function (value) {
					return jspb.Message.setProto3FloatField(this, 2, value);
				};

				/**
				 * repeated WordDetail words = 3;
				 * @return {!Array<!proto.ondewo.s2t.WordDetail>}
				 */
				proto.ondewo.s2t.TranscriptionAlternative.prototype.getWordsList = function () {
					return /** @type{!Array<!proto.ondewo.s2t.WordDetail>} */ (
						jspb.Message.getRepeatedWrapperField(this, proto.ondewo.s2t.WordDetail, 3)
					);
				};

				/**
				 * @param {!Array<!proto.ondewo.s2t.WordDetail>} value
				 * @return {!proto.ondewo.s2t.TranscriptionAlternative} returns this
				 */
				proto.ondewo.s2t.TranscriptionAlternative.prototype.setWordsList = function (value) {
					return jspb.Message.setRepeatedWrapperField(this, 3, value);
				};

				/**
				 * @param {!proto.ondewo.s2t.WordDetail=} opt_value
				 * @param {number=} opt_index
				 * @return {!proto.ondewo.s2t.WordDetail}
				 */
				proto.ondewo.s2t.TranscriptionAlternative.prototype.addWords = function (opt_value, opt_index) {
					return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ondewo.s2t.WordDetail, opt_index);
				};

				/**
				 * Clears the list making it empty but non-null.
				 * @return {!proto.ondewo.s2t.TranscriptionAlternative} returns this
				 */
				proto.ondewo.s2t.TranscriptionAlternative.prototype.clearWordsList = function () {
					return this.setWordsList([]);
				};

				/**
				 * List of repeated fields within this message type.
				 * @private {!Array<number>}
				 * @const
				 */
				proto.ondewo.s2t.WordDetail.repeatedFields_ = [5];

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.WordDetail.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.WordDetail.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.WordDetail} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.WordDetail.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								startTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
								endTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
								word: jspb.Message.getFieldWithDefault(msg, 3, ''),
								confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
								wordAlternativesList: jspb.Message.toObjectList(
									msg.getWordAlternativesList(),
									proto.ondewo.s2t.WordAlternative.toObject,
									includeInstance
								)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.WordDetail}
				 */
				proto.ondewo.s2t.WordDetail.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.WordDetail();
					return proto.ondewo.s2t.WordDetail.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.WordDetail} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.WordDetail}
				 */
				proto.ondewo.s2t.WordDetail.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {number} */ (reader.readFloat());
								msg.setStartTime(value);
								break;
							case 2:
								var value = /** @type {number} */ (reader.readFloat());
								msg.setEndTime(value);
								break;
							case 3:
								var value = /** @type {string} */ (reader.readString());
								msg.setWord(value);
								break;
							case 4:
								var value = /** @type {number} */ (reader.readFloat());
								msg.setConfidence(value);
								break;
							case 5:
								var value = new proto.ondewo.s2t.WordAlternative();
								reader.readMessage(value, proto.ondewo.s2t.WordAlternative.deserializeBinaryFromReader);
								msg.addWordAlternatives(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.WordDetail.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.WordDetail.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.WordDetail} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.WordDetail.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getStartTime();
					if (f !== 0.0) {
						writer.writeFloat(1, f);
					}
					f = message.getEndTime();
					if (f !== 0.0) {
						writer.writeFloat(2, f);
					}
					f = message.getWord();
					if (f.length > 0) {
						writer.writeString(3, f);
					}
					f = message.getConfidence();
					if (f !== 0.0) {
						writer.writeFloat(4, f);
					}
					f = message.getWordAlternativesList();
					if (f.length > 0) {
						writer.writeRepeatedMessage(5, f, proto.ondewo.s2t.WordAlternative.serializeBinaryToWriter);
					}
				};

				/**
				 * optional float start_time = 1;
				 * @return {number}
				 */
				proto.ondewo.s2t.WordDetail.prototype.getStartTime = function () {
					return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.WordDetail} returns this
				 */
				proto.ondewo.s2t.WordDetail.prototype.setStartTime = function (value) {
					return jspb.Message.setProto3FloatField(this, 1, value);
				};

				/**
				 * optional float end_time = 2;
				 * @return {number}
				 */
				proto.ondewo.s2t.WordDetail.prototype.getEndTime = function () {
					return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.WordDetail} returns this
				 */
				proto.ondewo.s2t.WordDetail.prototype.setEndTime = function (value) {
					return jspb.Message.setProto3FloatField(this, 2, value);
				};

				/**
				 * optional string word = 3;
				 * @return {string}
				 */
				proto.ondewo.s2t.WordDetail.prototype.getWord = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.WordDetail} returns this
				 */
				proto.ondewo.s2t.WordDetail.prototype.setWord = function (value) {
					return jspb.Message.setProto3StringField(this, 3, value);
				};

				/**
				 * optional float confidence = 4;
				 * @return {number}
				 */
				proto.ondewo.s2t.WordDetail.prototype.getConfidence = function () {
					return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.WordDetail} returns this
				 */
				proto.ondewo.s2t.WordDetail.prototype.setConfidence = function (value) {
					return jspb.Message.setProto3FloatField(this, 4, value);
				};

				/**
				 * repeated WordAlternative word_alternatives = 5;
				 * @return {!Array<!proto.ondewo.s2t.WordAlternative>}
				 */
				proto.ondewo.s2t.WordDetail.prototype.getWordAlternativesList = function () {
					return /** @type{!Array<!proto.ondewo.s2t.WordAlternative>} */ (
						jspb.Message.getRepeatedWrapperField(this, proto.ondewo.s2t.WordAlternative, 5)
					);
				};

				/**
				 * @param {!Array<!proto.ondewo.s2t.WordAlternative>} value
				 * @return {!proto.ondewo.s2t.WordDetail} returns this
				 */
				proto.ondewo.s2t.WordDetail.prototype.setWordAlternativesList = function (value) {
					return jspb.Message.setRepeatedWrapperField(this, 5, value);
				};

				/**
				 * @param {!proto.ondewo.s2t.WordAlternative=} opt_value
				 * @param {number=} opt_index
				 * @return {!proto.ondewo.s2t.WordAlternative}
				 */
				proto.ondewo.s2t.WordDetail.prototype.addWordAlternatives = function (opt_value, opt_index) {
					return jspb.Message.addToRepeatedWrapperField(
						this,
						5,
						opt_value,
						proto.ondewo.s2t.WordAlternative,
						opt_index
					);
				};

				/**
				 * Clears the list making it empty but non-null.
				 * @return {!proto.ondewo.s2t.WordDetail} returns this
				 */
				proto.ondewo.s2t.WordDetail.prototype.clearWordAlternativesList = function () {
					return this.setWordAlternativesList([]);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.WordAlternative.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.WordAlternative.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.WordAlternative} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.WordAlternative.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								word: jspb.Message.getFieldWithDefault(msg, 1, ''),
								confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.WordAlternative}
				 */
				proto.ondewo.s2t.WordAlternative.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.WordAlternative();
					return proto.ondewo.s2t.WordAlternative.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.WordAlternative} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.WordAlternative}
				 */
				proto.ondewo.s2t.WordAlternative.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setWord(value);
								break;
							case 2:
								var value = /** @type {number} */ (reader.readFloat());
								msg.setConfidence(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.WordAlternative.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.WordAlternative.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.WordAlternative} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.WordAlternative.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getWord();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
					f = message.getConfidence();
					if (f !== 0.0) {
						writer.writeFloat(2, f);
					}
				};

				/**
				 * optional string word = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.WordAlternative.prototype.getWord = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.WordAlternative} returns this
				 */
				proto.ondewo.s2t.WordAlternative.prototype.setWord = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * optional float confidence = 2;
				 * @return {number}
				 */
				proto.ondewo.s2t.WordAlternative.prototype.getConfidence = function () {
					return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.WordAlternative} returns this
				 */
				proto.ondewo.s2t.WordAlternative.prototype.setConfidence = function (value) {
					return jspb.Message.setProto3FloatField(this, 2, value);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.TranscribeStreamRequest.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.TranscribeStreamRequest.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.TranscribeStreamRequest} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.TranscribeStreamRequest.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								audioChunk: msg.getAudioChunk_asB64(),
								endOfStream: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
								config: (f = msg.getConfig()) && proto.ondewo.s2t.TranscribeRequestConfig.toObject(includeInstance, f),
								muteAudio: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.TranscribeStreamRequest}
				 */
				proto.ondewo.s2t.TranscribeStreamRequest.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.TranscribeStreamRequest();
					return proto.ondewo.s2t.TranscribeStreamRequest.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.TranscribeStreamRequest} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.TranscribeStreamRequest}
				 */
				proto.ondewo.s2t.TranscribeStreamRequest.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {!Uint8Array} */ (reader.readBytes());
								msg.setAudioChunk(value);
								break;
							case 2:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setEndOfStream(value);
								break;
							case 3:
								var value = new proto.ondewo.s2t.TranscribeRequestConfig();
								reader.readMessage(value, proto.ondewo.s2t.TranscribeRequestConfig.deserializeBinaryFromReader);
								msg.setConfig(value);
								break;
							case 4:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setMuteAudio(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.TranscribeStreamRequest.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.TranscribeStreamRequest.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.TranscribeStreamRequest} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.TranscribeStreamRequest.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getAudioChunk_asU8();
					if (f.length > 0) {
						writer.writeBytes(1, f);
					}
					f = message.getEndOfStream();
					if (f) {
						writer.writeBool(2, f);
					}
					f = message.getConfig();
					if (f != null) {
						writer.writeMessage(3, f, proto.ondewo.s2t.TranscribeRequestConfig.serializeBinaryToWriter);
					}
					f = message.getMuteAudio();
					if (f) {
						writer.writeBool(4, f);
					}
				};

				/**
				 * optional bytes audio_chunk = 1;
				 * @return {!(string|Uint8Array)}
				 */
				proto.ondewo.s2t.TranscribeStreamRequest.prototype.getAudioChunk = function () {
					return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * optional bytes audio_chunk = 1;
				 * This is a type-conversion wrapper around `getAudioChunk()`
				 * @return {string}
				 */
				proto.ondewo.s2t.TranscribeStreamRequest.prototype.getAudioChunk_asB64 = function () {
					return /** @type {string} */ (jspb.Message.bytesAsB64(this.getAudioChunk()));
				};

				/**
				 * optional bytes audio_chunk = 1;
				 * Note that Uint8Array is not supported on all browsers.
				 * @see http://caniuse.com/Uint8Array
				 * This is a type-conversion wrapper around `getAudioChunk()`
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.TranscribeStreamRequest.prototype.getAudioChunk_asU8 = function () {
					return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getAudioChunk()));
				};

				/**
				 * @param {!(string|Uint8Array)} value
				 * @return {!proto.ondewo.s2t.TranscribeStreamRequest} returns this
				 */
				proto.ondewo.s2t.TranscribeStreamRequest.prototype.setAudioChunk = function (value) {
					return jspb.Message.setProto3BytesField(this, 1, value);
				};

				/**
				 * optional bool end_of_stream = 2;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TranscribeStreamRequest.prototype.getEndOfStream = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.TranscribeStreamRequest} returns this
				 */
				proto.ondewo.s2t.TranscribeStreamRequest.prototype.setEndOfStream = function (value) {
					return jspb.Message.setProto3BooleanField(this, 2, value);
				};

				/**
				 * optional TranscribeRequestConfig config = 3;
				 * @return {?proto.ondewo.s2t.TranscribeRequestConfig}
				 */
				proto.ondewo.s2t.TranscribeStreamRequest.prototype.getConfig = function () {
					return /** @type{?proto.ondewo.s2t.TranscribeRequestConfig} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.TranscribeRequestConfig, 3)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.TranscribeRequestConfig|undefined} value
				 * @return {!proto.ondewo.s2t.TranscribeStreamRequest} returns this
				 */
				proto.ondewo.s2t.TranscribeStreamRequest.prototype.setConfig = function (value) {
					return jspb.Message.setWrapperField(this, 3, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.TranscribeStreamRequest} returns this
				 */
				proto.ondewo.s2t.TranscribeStreamRequest.prototype.clearConfig = function () {
					return this.setConfig(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TranscribeStreamRequest.prototype.hasConfig = function () {
					return jspb.Message.getField(this, 3) != null;
				};

				/**
				 * optional bool mute_audio = 4;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TranscribeStreamRequest.prototype.getMuteAudio = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.TranscribeStreamRequest} returns this
				 */
				proto.ondewo.s2t.TranscribeStreamRequest.prototype.setMuteAudio = function (value) {
					return jspb.Message.setProto3BooleanField(this, 4, value);
				};

				/**
				 * List of repeated fields within this message type.
				 * @private {!Array<number>}
				 * @const
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.repeatedFields_ = [1];

				/**
				 * Oneof group definitions for this message. Each group defines the field
				 * numbers belonging to that group. When of these fields' value is set, all
				 * other fields in the group are cleared. During deserialization, if multiple
				 * fields are encountered for a group, only the last value seen will be kept.
				 * @private {!Array<!Array<number>>}
				 * @const
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.oneofGroups_ = [[8]];

				/**
				 * @enum {number}
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.OneofConfigCase = {
					ONEOF_CONFIG_NOT_SET: 0,
					CONFIG: 8
				};

				/**
				 * @return {proto.ondewo.s2t.TranscribeStreamResponse.OneofConfigCase}
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.prototype.getOneofConfigCase = function () {
					return /** @type {proto.ondewo.s2t.TranscribeStreamResponse.OneofConfigCase} */ (
						jspb.Message.computeOneofCase(this, proto.ondewo.s2t.TranscribeStreamResponse.oneofGroups_[0])
					);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.TranscribeStreamResponse.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.TranscribeStreamResponse.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.TranscribeStreamResponse} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.TranscribeStreamResponse.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								transcriptionsList: jspb.Message.toObjectList(
									msg.getTranscriptionsList(),
									proto.ondewo.s2t.Transcription.toObject,
									includeInstance
								),
								time: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
								pb_final: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
								returnAudio: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
								audio: msg.getAudio_asB64(),
								utteranceStart: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
								audioUuid: jspb.Message.getFieldWithDefault(msg, 7, ''),
								config: (f = msg.getConfig()) && proto.ondewo.s2t.TranscribeRequestConfig.toObject(includeInstance, f)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.TranscribeStreamResponse}
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.TranscribeStreamResponse();
					return proto.ondewo.s2t.TranscribeStreamResponse.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.TranscribeStreamResponse} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.TranscribeStreamResponse}
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = new proto.ondewo.s2t.Transcription();
								reader.readMessage(value, proto.ondewo.s2t.Transcription.deserializeBinaryFromReader);
								msg.addTranscriptions(value);
								break;
							case 2:
								var value = /** @type {number} */ (reader.readFloat());
								msg.setTime(value);
								break;
							case 3:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setFinal(value);
								break;
							case 4:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setReturnAudio(value);
								break;
							case 5:
								var value = /** @type {!Uint8Array} */ (reader.readBytes());
								msg.setAudio(value);
								break;
							case 6:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setUtteranceStart(value);
								break;
							case 7:
								var value = /** @type {string} */ (reader.readString());
								msg.setAudioUuid(value);
								break;
							case 8:
								var value = new proto.ondewo.s2t.TranscribeRequestConfig();
								reader.readMessage(value, proto.ondewo.s2t.TranscribeRequestConfig.deserializeBinaryFromReader);
								msg.setConfig(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.TranscribeStreamResponse.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.TranscribeStreamResponse} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getTranscriptionsList();
					if (f.length > 0) {
						writer.writeRepeatedMessage(1, f, proto.ondewo.s2t.Transcription.serializeBinaryToWriter);
					}
					f = message.getTime();
					if (f !== 0.0) {
						writer.writeFloat(2, f);
					}
					f = message.getFinal();
					if (f) {
						writer.writeBool(3, f);
					}
					f = message.getReturnAudio();
					if (f) {
						writer.writeBool(4, f);
					}
					f = message.getAudio_asU8();
					if (f.length > 0) {
						writer.writeBytes(5, f);
					}
					f = message.getUtteranceStart();
					if (f) {
						writer.writeBool(6, f);
					}
					f = message.getAudioUuid();
					if (f.length > 0) {
						writer.writeString(7, f);
					}
					f = message.getConfig();
					if (f != null) {
						writer.writeMessage(8, f, proto.ondewo.s2t.TranscribeRequestConfig.serializeBinaryToWriter);
					}
				};

				/**
				 * repeated Transcription transcriptions = 1;
				 * @return {!Array<!proto.ondewo.s2t.Transcription>}
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.prototype.getTranscriptionsList = function () {
					return /** @type{!Array<!proto.ondewo.s2t.Transcription>} */ (
						jspb.Message.getRepeatedWrapperField(this, proto.ondewo.s2t.Transcription, 1)
					);
				};

				/**
				 * @param {!Array<!proto.ondewo.s2t.Transcription>} value
				 * @return {!proto.ondewo.s2t.TranscribeStreamResponse} returns this
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.prototype.setTranscriptionsList = function (value) {
					return jspb.Message.setRepeatedWrapperField(this, 1, value);
				};

				/**
				 * @param {!proto.ondewo.s2t.Transcription=} opt_value
				 * @param {number=} opt_index
				 * @return {!proto.ondewo.s2t.Transcription}
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.prototype.addTranscriptions = function (opt_value, opt_index) {
					return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ondewo.s2t.Transcription, opt_index);
				};

				/**
				 * Clears the list making it empty but non-null.
				 * @return {!proto.ondewo.s2t.TranscribeStreamResponse} returns this
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.prototype.clearTranscriptionsList = function () {
					return this.setTranscriptionsList([]);
				};

				/**
				 * optional float time = 2;
				 * @return {number}
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.prototype.getTime = function () {
					return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.TranscribeStreamResponse} returns this
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.prototype.setTime = function (value) {
					return jspb.Message.setProto3FloatField(this, 2, value);
				};

				/**
				 * optional bool final = 3;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.prototype.getFinal = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.TranscribeStreamResponse} returns this
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.prototype.setFinal = function (value) {
					return jspb.Message.setProto3BooleanField(this, 3, value);
				};

				/**
				 * optional bool return_audio = 4;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.prototype.getReturnAudio = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.TranscribeStreamResponse} returns this
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.prototype.setReturnAudio = function (value) {
					return jspb.Message.setProto3BooleanField(this, 4, value);
				};

				/**
				 * optional bytes audio = 5;
				 * @return {!(string|Uint8Array)}
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.prototype.getAudio = function () {
					return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
				};

				/**
				 * optional bytes audio = 5;
				 * This is a type-conversion wrapper around `getAudio()`
				 * @return {string}
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.prototype.getAudio_asB64 = function () {
					return /** @type {string} */ (jspb.Message.bytesAsB64(this.getAudio()));
				};

				/**
				 * optional bytes audio = 5;
				 * Note that Uint8Array is not supported on all browsers.
				 * @see http://caniuse.com/Uint8Array
				 * This is a type-conversion wrapper around `getAudio()`
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.prototype.getAudio_asU8 = function () {
					return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getAudio()));
				};

				/**
				 * @param {!(string|Uint8Array)} value
				 * @return {!proto.ondewo.s2t.TranscribeStreamResponse} returns this
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.prototype.setAudio = function (value) {
					return jspb.Message.setProto3BytesField(this, 5, value);
				};

				/**
				 * optional bool utterance_start = 6;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.prototype.getUtteranceStart = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.TranscribeStreamResponse} returns this
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.prototype.setUtteranceStart = function (value) {
					return jspb.Message.setProto3BooleanField(this, 6, value);
				};

				/**
				 * optional string audio_uuid = 7;
				 * @return {string}
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.prototype.getAudioUuid = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.TranscribeStreamResponse} returns this
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.prototype.setAudioUuid = function (value) {
					return jspb.Message.setProto3StringField(this, 7, value);
				};

				/**
				 * optional TranscribeRequestConfig config = 8;
				 * @return {?proto.ondewo.s2t.TranscribeRequestConfig}
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.prototype.getConfig = function () {
					return /** @type{?proto.ondewo.s2t.TranscribeRequestConfig} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.TranscribeRequestConfig, 8)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.TranscribeRequestConfig|undefined} value
				 * @return {!proto.ondewo.s2t.TranscribeStreamResponse} returns this
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.prototype.setConfig = function (value) {
					return jspb.Message.setOneofWrapperField(
						this,
						8,
						proto.ondewo.s2t.TranscribeStreamResponse.oneofGroups_[0],
						value
					);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.TranscribeStreamResponse} returns this
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.prototype.clearConfig = function () {
					return this.setConfig(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TranscribeStreamResponse.prototype.hasConfig = function () {
					return jspb.Message.getField(this, 8) != null;
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.TranscribeFileRequest.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.TranscribeFileRequest.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.TranscribeFileRequest} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.TranscribeFileRequest.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								audioFile: msg.getAudioFile_asB64(),
								config: (f = msg.getConfig()) && proto.ondewo.s2t.TranscribeRequestConfig.toObject(includeInstance, f)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.TranscribeFileRequest}
				 */
				proto.ondewo.s2t.TranscribeFileRequest.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.TranscribeFileRequest();
					return proto.ondewo.s2t.TranscribeFileRequest.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.TranscribeFileRequest} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.TranscribeFileRequest}
				 */
				proto.ondewo.s2t.TranscribeFileRequest.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {!Uint8Array} */ (reader.readBytes());
								msg.setAudioFile(value);
								break;
							case 2:
								var value = new proto.ondewo.s2t.TranscribeRequestConfig();
								reader.readMessage(value, proto.ondewo.s2t.TranscribeRequestConfig.deserializeBinaryFromReader);
								msg.setConfig(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.TranscribeFileRequest.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.TranscribeFileRequest.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.TranscribeFileRequest} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.TranscribeFileRequest.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getAudioFile_asU8();
					if (f.length > 0) {
						writer.writeBytes(1, f);
					}
					f = message.getConfig();
					if (f != null) {
						writer.writeMessage(2, f, proto.ondewo.s2t.TranscribeRequestConfig.serializeBinaryToWriter);
					}
				};

				/**
				 * optional bytes audio_file = 1;
				 * @return {!(string|Uint8Array)}
				 */
				proto.ondewo.s2t.TranscribeFileRequest.prototype.getAudioFile = function () {
					return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * optional bytes audio_file = 1;
				 * This is a type-conversion wrapper around `getAudioFile()`
				 * @return {string}
				 */
				proto.ondewo.s2t.TranscribeFileRequest.prototype.getAudioFile_asB64 = function () {
					return /** @type {string} */ (jspb.Message.bytesAsB64(this.getAudioFile()));
				};

				/**
				 * optional bytes audio_file = 1;
				 * Note that Uint8Array is not supported on all browsers.
				 * @see http://caniuse.com/Uint8Array
				 * This is a type-conversion wrapper around `getAudioFile()`
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.TranscribeFileRequest.prototype.getAudioFile_asU8 = function () {
					return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getAudioFile()));
				};

				/**
				 * @param {!(string|Uint8Array)} value
				 * @return {!proto.ondewo.s2t.TranscribeFileRequest} returns this
				 */
				proto.ondewo.s2t.TranscribeFileRequest.prototype.setAudioFile = function (value) {
					return jspb.Message.setProto3BytesField(this, 1, value);
				};

				/**
				 * optional TranscribeRequestConfig config = 2;
				 * @return {?proto.ondewo.s2t.TranscribeRequestConfig}
				 */
				proto.ondewo.s2t.TranscribeFileRequest.prototype.getConfig = function () {
					return /** @type{?proto.ondewo.s2t.TranscribeRequestConfig} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.TranscribeRequestConfig, 2)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.TranscribeRequestConfig|undefined} value
				 * @return {!proto.ondewo.s2t.TranscribeFileRequest} returns this
				 */
				proto.ondewo.s2t.TranscribeFileRequest.prototype.setConfig = function (value) {
					return jspb.Message.setWrapperField(this, 2, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.TranscribeFileRequest} returns this
				 */
				proto.ondewo.s2t.TranscribeFileRequest.prototype.clearConfig = function () {
					return this.setConfig(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TranscribeFileRequest.prototype.hasConfig = function () {
					return jspb.Message.getField(this, 2) != null;
				};

				/**
				 * List of repeated fields within this message type.
				 * @private {!Array<number>}
				 * @const
				 */
				proto.ondewo.s2t.TranscribeFileResponse.repeatedFields_ = [1];

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.TranscribeFileResponse.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.TranscribeFileResponse.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.TranscribeFileResponse} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.TranscribeFileResponse.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								transcriptionsList: jspb.Message.toObjectList(
									msg.getTranscriptionsList(),
									proto.ondewo.s2t.Transcription.toObject,
									includeInstance
								),
								time: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
								audioUuid: jspb.Message.getFieldWithDefault(msg, 3, '')
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.TranscribeFileResponse}
				 */
				proto.ondewo.s2t.TranscribeFileResponse.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.TranscribeFileResponse();
					return proto.ondewo.s2t.TranscribeFileResponse.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.TranscribeFileResponse} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.TranscribeFileResponse}
				 */
				proto.ondewo.s2t.TranscribeFileResponse.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = new proto.ondewo.s2t.Transcription();
								reader.readMessage(value, proto.ondewo.s2t.Transcription.deserializeBinaryFromReader);
								msg.addTranscriptions(value);
								break;
							case 2:
								var value = /** @type {number} */ (reader.readFloat());
								msg.setTime(value);
								break;
							case 3:
								var value = /** @type {string} */ (reader.readString());
								msg.setAudioUuid(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.TranscribeFileResponse.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.TranscribeFileResponse.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.TranscribeFileResponse} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.TranscribeFileResponse.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getTranscriptionsList();
					if (f.length > 0) {
						writer.writeRepeatedMessage(1, f, proto.ondewo.s2t.Transcription.serializeBinaryToWriter);
					}
					f = message.getTime();
					if (f !== 0.0) {
						writer.writeFloat(2, f);
					}
					f = message.getAudioUuid();
					if (f.length > 0) {
						writer.writeString(3, f);
					}
				};

				/**
				 * repeated Transcription transcriptions = 1;
				 * @return {!Array<!proto.ondewo.s2t.Transcription>}
				 */
				proto.ondewo.s2t.TranscribeFileResponse.prototype.getTranscriptionsList = function () {
					return /** @type{!Array<!proto.ondewo.s2t.Transcription>} */ (
						jspb.Message.getRepeatedWrapperField(this, proto.ondewo.s2t.Transcription, 1)
					);
				};

				/**
				 * @param {!Array<!proto.ondewo.s2t.Transcription>} value
				 * @return {!proto.ondewo.s2t.TranscribeFileResponse} returns this
				 */
				proto.ondewo.s2t.TranscribeFileResponse.prototype.setTranscriptionsList = function (value) {
					return jspb.Message.setRepeatedWrapperField(this, 1, value);
				};

				/**
				 * @param {!proto.ondewo.s2t.Transcription=} opt_value
				 * @param {number=} opt_index
				 * @return {!proto.ondewo.s2t.Transcription}
				 */
				proto.ondewo.s2t.TranscribeFileResponse.prototype.addTranscriptions = function (opt_value, opt_index) {
					return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ondewo.s2t.Transcription, opt_index);
				};

				/**
				 * Clears the list making it empty but non-null.
				 * @return {!proto.ondewo.s2t.TranscribeFileResponse} returns this
				 */
				proto.ondewo.s2t.TranscribeFileResponse.prototype.clearTranscriptionsList = function () {
					return this.setTranscriptionsList([]);
				};

				/**
				 * optional float time = 2;
				 * @return {number}
				 */
				proto.ondewo.s2t.TranscribeFileResponse.prototype.getTime = function () {
					return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.TranscribeFileResponse} returns this
				 */
				proto.ondewo.s2t.TranscribeFileResponse.prototype.setTime = function (value) {
					return jspb.Message.setProto3FloatField(this, 2, value);
				};

				/**
				 * optional string audio_uuid = 3;
				 * @return {string}
				 */
				proto.ondewo.s2t.TranscribeFileResponse.prototype.getAudioUuid = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.TranscribeFileResponse} returns this
				 */
				proto.ondewo.s2t.TranscribeFileResponse.prototype.setAudioUuid = function (value) {
					return jspb.Message.setProto3StringField(this, 3, value);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.S2tPipelineId.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.S2tPipelineId.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.S2tPipelineId} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.S2tPipelineId.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								id: jspb.Message.getFieldWithDefault(msg, 1, '')
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.S2tPipelineId}
				 */
				proto.ondewo.s2t.S2tPipelineId.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.S2tPipelineId();
					return proto.ondewo.s2t.S2tPipelineId.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.S2tPipelineId} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.S2tPipelineId}
				 */
				proto.ondewo.s2t.S2tPipelineId.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setId(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.S2tPipelineId.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.S2tPipelineId.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.S2tPipelineId} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.S2tPipelineId.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getId();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
				};

				/**
				 * optional string id = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.S2tPipelineId.prototype.getId = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.S2tPipelineId} returns this
				 */
				proto.ondewo.s2t.S2tPipelineId.prototype.setId = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * List of repeated fields within this message type.
				 * @private {!Array<number>}
				 * @const
				 */
				proto.ondewo.s2t.ListS2tPipelinesRequest.repeatedFields_ = [1, 2, 3];

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.ListS2tPipelinesRequest.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.ListS2tPipelinesRequest.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.ListS2tPipelinesRequest} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.ListS2tPipelinesRequest.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								languagesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
								pipelineOwnersList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
								domainsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
								registeredOnly: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.ListS2tPipelinesRequest}
				 */
				proto.ondewo.s2t.ListS2tPipelinesRequest.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.ListS2tPipelinesRequest();
					return proto.ondewo.s2t.ListS2tPipelinesRequest.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.ListS2tPipelinesRequest} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.ListS2tPipelinesRequest}
				 */
				proto.ondewo.s2t.ListS2tPipelinesRequest.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.addLanguages(value);
								break;
							case 2:
								var value = /** @type {string} */ (reader.readString());
								msg.addPipelineOwners(value);
								break;
							case 3:
								var value = /** @type {string} */ (reader.readString());
								msg.addDomains(value);
								break;
							case 4:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setRegisteredOnly(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.ListS2tPipelinesRequest.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.ListS2tPipelinesRequest.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.ListS2tPipelinesRequest} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.ListS2tPipelinesRequest.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getLanguagesList();
					if (f.length > 0) {
						writer.writeRepeatedString(1, f);
					}
					f = message.getPipelineOwnersList();
					if (f.length > 0) {
						writer.writeRepeatedString(2, f);
					}
					f = message.getDomainsList();
					if (f.length > 0) {
						writer.writeRepeatedString(3, f);
					}
					f = message.getRegisteredOnly();
					if (f) {
						writer.writeBool(4, f);
					}
				};

				/**
				 * repeated string languages = 1;
				 * @return {!Array<string>}
				 */
				proto.ondewo.s2t.ListS2tPipelinesRequest.prototype.getLanguagesList = function () {
					return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
				};

				/**
				 * @param {!Array<string>} value
				 * @return {!proto.ondewo.s2t.ListS2tPipelinesRequest} returns this
				 */
				proto.ondewo.s2t.ListS2tPipelinesRequest.prototype.setLanguagesList = function (value) {
					return jspb.Message.setField(this, 1, value || []);
				};

				/**
				 * @param {string} value
				 * @param {number=} opt_index
				 * @return {!proto.ondewo.s2t.ListS2tPipelinesRequest} returns this
				 */
				proto.ondewo.s2t.ListS2tPipelinesRequest.prototype.addLanguages = function (value, opt_index) {
					return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
				};

				/**
				 * Clears the list making it empty but non-null.
				 * @return {!proto.ondewo.s2t.ListS2tPipelinesRequest} returns this
				 */
				proto.ondewo.s2t.ListS2tPipelinesRequest.prototype.clearLanguagesList = function () {
					return this.setLanguagesList([]);
				};

				/**
				 * repeated string pipeline_owners = 2;
				 * @return {!Array<string>}
				 */
				proto.ondewo.s2t.ListS2tPipelinesRequest.prototype.getPipelineOwnersList = function () {
					return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
				};

				/**
				 * @param {!Array<string>} value
				 * @return {!proto.ondewo.s2t.ListS2tPipelinesRequest} returns this
				 */
				proto.ondewo.s2t.ListS2tPipelinesRequest.prototype.setPipelineOwnersList = function (value) {
					return jspb.Message.setField(this, 2, value || []);
				};

				/**
				 * @param {string} value
				 * @param {number=} opt_index
				 * @return {!proto.ondewo.s2t.ListS2tPipelinesRequest} returns this
				 */
				proto.ondewo.s2t.ListS2tPipelinesRequest.prototype.addPipelineOwners = function (value, opt_index) {
					return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
				};

				/**
				 * Clears the list making it empty but non-null.
				 * @return {!proto.ondewo.s2t.ListS2tPipelinesRequest} returns this
				 */
				proto.ondewo.s2t.ListS2tPipelinesRequest.prototype.clearPipelineOwnersList = function () {
					return this.setPipelineOwnersList([]);
				};

				/**
				 * repeated string domains = 3;
				 * @return {!Array<string>}
				 */
				proto.ondewo.s2t.ListS2tPipelinesRequest.prototype.getDomainsList = function () {
					return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
				};

				/**
				 * @param {!Array<string>} value
				 * @return {!proto.ondewo.s2t.ListS2tPipelinesRequest} returns this
				 */
				proto.ondewo.s2t.ListS2tPipelinesRequest.prototype.setDomainsList = function (value) {
					return jspb.Message.setField(this, 3, value || []);
				};

				/**
				 * @param {string} value
				 * @param {number=} opt_index
				 * @return {!proto.ondewo.s2t.ListS2tPipelinesRequest} returns this
				 */
				proto.ondewo.s2t.ListS2tPipelinesRequest.prototype.addDomains = function (value, opt_index) {
					return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
				};

				/**
				 * Clears the list making it empty but non-null.
				 * @return {!proto.ondewo.s2t.ListS2tPipelinesRequest} returns this
				 */
				proto.ondewo.s2t.ListS2tPipelinesRequest.prototype.clearDomainsList = function () {
					return this.setDomainsList([]);
				};

				/**
				 * optional bool registered_only = 4;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.ListS2tPipelinesRequest.prototype.getRegisteredOnly = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.ListS2tPipelinesRequest} returns this
				 */
				proto.ondewo.s2t.ListS2tPipelinesRequest.prototype.setRegisteredOnly = function (value) {
					return jspb.Message.setProto3BooleanField(this, 4, value);
				};

				/**
				 * List of repeated fields within this message type.
				 * @private {!Array<number>}
				 * @const
				 */
				proto.ondewo.s2t.ListS2tPipelinesResponse.repeatedFields_ = [1];

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.ListS2tPipelinesResponse.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.ListS2tPipelinesResponse.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.ListS2tPipelinesResponse} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.ListS2tPipelinesResponse.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								pipelineConfigsList: jspb.Message.toObjectList(
									msg.getPipelineConfigsList(),
									proto.ondewo.s2t.Speech2TextConfig.toObject,
									includeInstance
								)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.ListS2tPipelinesResponse}
				 */
				proto.ondewo.s2t.ListS2tPipelinesResponse.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.ListS2tPipelinesResponse();
					return proto.ondewo.s2t.ListS2tPipelinesResponse.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.ListS2tPipelinesResponse} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.ListS2tPipelinesResponse}
				 */
				proto.ondewo.s2t.ListS2tPipelinesResponse.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = new proto.ondewo.s2t.Speech2TextConfig();
								reader.readMessage(value, proto.ondewo.s2t.Speech2TextConfig.deserializeBinaryFromReader);
								msg.addPipelineConfigs(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.ListS2tPipelinesResponse.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.ListS2tPipelinesResponse.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.ListS2tPipelinesResponse} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.ListS2tPipelinesResponse.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getPipelineConfigsList();
					if (f.length > 0) {
						writer.writeRepeatedMessage(1, f, proto.ondewo.s2t.Speech2TextConfig.serializeBinaryToWriter);
					}
				};

				/**
				 * repeated Speech2TextConfig pipeline_configs = 1;
				 * @return {!Array<!proto.ondewo.s2t.Speech2TextConfig>}
				 */
				proto.ondewo.s2t.ListS2tPipelinesResponse.prototype.getPipelineConfigsList = function () {
					return /** @type{!Array<!proto.ondewo.s2t.Speech2TextConfig>} */ (
						jspb.Message.getRepeatedWrapperField(this, proto.ondewo.s2t.Speech2TextConfig, 1)
					);
				};

				/**
				 * @param {!Array<!proto.ondewo.s2t.Speech2TextConfig>} value
				 * @return {!proto.ondewo.s2t.ListS2tPipelinesResponse} returns this
				 */
				proto.ondewo.s2t.ListS2tPipelinesResponse.prototype.setPipelineConfigsList = function (value) {
					return jspb.Message.setRepeatedWrapperField(this, 1, value);
				};

				/**
				 * @param {!proto.ondewo.s2t.Speech2TextConfig=} opt_value
				 * @param {number=} opt_index
				 * @return {!proto.ondewo.s2t.Speech2TextConfig}
				 */
				proto.ondewo.s2t.ListS2tPipelinesResponse.prototype.addPipelineConfigs = function (opt_value, opt_index) {
					return jspb.Message.addToRepeatedWrapperField(
						this,
						1,
						opt_value,
						proto.ondewo.s2t.Speech2TextConfig,
						opt_index
					);
				};

				/**
				 * Clears the list making it empty but non-null.
				 * @return {!proto.ondewo.s2t.ListS2tPipelinesResponse} returns this
				 */
				proto.ondewo.s2t.ListS2tPipelinesResponse.prototype.clearPipelineConfigsList = function () {
					return this.setPipelineConfigsList([]);
				};

				/**
				 * List of repeated fields within this message type.
				 * @private {!Array<number>}
				 * @const
				 */
				proto.ondewo.s2t.ListS2tLanguagesRequest.repeatedFields_ = [1, 2];

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.ListS2tLanguagesRequest.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.ListS2tLanguagesRequest.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.ListS2tLanguagesRequest} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.ListS2tLanguagesRequest.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								domainsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
								pipelineOwnersList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.ListS2tLanguagesRequest}
				 */
				proto.ondewo.s2t.ListS2tLanguagesRequest.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.ListS2tLanguagesRequest();
					return proto.ondewo.s2t.ListS2tLanguagesRequest.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.ListS2tLanguagesRequest} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.ListS2tLanguagesRequest}
				 */
				proto.ondewo.s2t.ListS2tLanguagesRequest.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.addDomains(value);
								break;
							case 2:
								var value = /** @type {string} */ (reader.readString());
								msg.addPipelineOwners(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.ListS2tLanguagesRequest.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.ListS2tLanguagesRequest.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.ListS2tLanguagesRequest} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.ListS2tLanguagesRequest.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getDomainsList();
					if (f.length > 0) {
						writer.writeRepeatedString(1, f);
					}
					f = message.getPipelineOwnersList();
					if (f.length > 0) {
						writer.writeRepeatedString(2, f);
					}
				};

				/**
				 * repeated string domains = 1;
				 * @return {!Array<string>}
				 */
				proto.ondewo.s2t.ListS2tLanguagesRequest.prototype.getDomainsList = function () {
					return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
				};

				/**
				 * @param {!Array<string>} value
				 * @return {!proto.ondewo.s2t.ListS2tLanguagesRequest} returns this
				 */
				proto.ondewo.s2t.ListS2tLanguagesRequest.prototype.setDomainsList = function (value) {
					return jspb.Message.setField(this, 1, value || []);
				};

				/**
				 * @param {string} value
				 * @param {number=} opt_index
				 * @return {!proto.ondewo.s2t.ListS2tLanguagesRequest} returns this
				 */
				proto.ondewo.s2t.ListS2tLanguagesRequest.prototype.addDomains = function (value, opt_index) {
					return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
				};

				/**
				 * Clears the list making it empty but non-null.
				 * @return {!proto.ondewo.s2t.ListS2tLanguagesRequest} returns this
				 */
				proto.ondewo.s2t.ListS2tLanguagesRequest.prototype.clearDomainsList = function () {
					return this.setDomainsList([]);
				};

				/**
				 * repeated string pipeline_owners = 2;
				 * @return {!Array<string>}
				 */
				proto.ondewo.s2t.ListS2tLanguagesRequest.prototype.getPipelineOwnersList = function () {
					return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
				};

				/**
				 * @param {!Array<string>} value
				 * @return {!proto.ondewo.s2t.ListS2tLanguagesRequest} returns this
				 */
				proto.ondewo.s2t.ListS2tLanguagesRequest.prototype.setPipelineOwnersList = function (value) {
					return jspb.Message.setField(this, 2, value || []);
				};

				/**
				 * @param {string} value
				 * @param {number=} opt_index
				 * @return {!proto.ondewo.s2t.ListS2tLanguagesRequest} returns this
				 */
				proto.ondewo.s2t.ListS2tLanguagesRequest.prototype.addPipelineOwners = function (value, opt_index) {
					return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
				};

				/**
				 * Clears the list making it empty but non-null.
				 * @return {!proto.ondewo.s2t.ListS2tLanguagesRequest} returns this
				 */
				proto.ondewo.s2t.ListS2tLanguagesRequest.prototype.clearPipelineOwnersList = function () {
					return this.setPipelineOwnersList([]);
				};

				/**
				 * List of repeated fields within this message type.
				 * @private {!Array<number>}
				 * @const
				 */
				proto.ondewo.s2t.ListS2tLanguagesResponse.repeatedFields_ = [1];

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.ListS2tLanguagesResponse.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.ListS2tLanguagesResponse.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.ListS2tLanguagesResponse} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.ListS2tLanguagesResponse.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								languagesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.ListS2tLanguagesResponse}
				 */
				proto.ondewo.s2t.ListS2tLanguagesResponse.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.ListS2tLanguagesResponse();
					return proto.ondewo.s2t.ListS2tLanguagesResponse.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.ListS2tLanguagesResponse} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.ListS2tLanguagesResponse}
				 */
				proto.ondewo.s2t.ListS2tLanguagesResponse.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.addLanguages(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.ListS2tLanguagesResponse.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.ListS2tLanguagesResponse.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.ListS2tLanguagesResponse} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.ListS2tLanguagesResponse.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getLanguagesList();
					if (f.length > 0) {
						writer.writeRepeatedString(1, f);
					}
				};

				/**
				 * repeated string languages = 1;
				 * @return {!Array<string>}
				 */
				proto.ondewo.s2t.ListS2tLanguagesResponse.prototype.getLanguagesList = function () {
					return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
				};

				/**
				 * @param {!Array<string>} value
				 * @return {!proto.ondewo.s2t.ListS2tLanguagesResponse} returns this
				 */
				proto.ondewo.s2t.ListS2tLanguagesResponse.prototype.setLanguagesList = function (value) {
					return jspb.Message.setField(this, 1, value || []);
				};

				/**
				 * @param {string} value
				 * @param {number=} opt_index
				 * @return {!proto.ondewo.s2t.ListS2tLanguagesResponse} returns this
				 */
				proto.ondewo.s2t.ListS2tLanguagesResponse.prototype.addLanguages = function (value, opt_index) {
					return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
				};

				/**
				 * Clears the list making it empty but non-null.
				 * @return {!proto.ondewo.s2t.ListS2tLanguagesResponse} returns this
				 */
				proto.ondewo.s2t.ListS2tLanguagesResponse.prototype.clearLanguagesList = function () {
					return this.setLanguagesList([]);
				};

				/**
				 * List of repeated fields within this message type.
				 * @private {!Array<number>}
				 * @const
				 */
				proto.ondewo.s2t.ListS2tDomainsRequest.repeatedFields_ = [1, 2];

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.ListS2tDomainsRequest.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.ListS2tDomainsRequest.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.ListS2tDomainsRequest} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.ListS2tDomainsRequest.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								languagesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
								pipelineOwnersList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.ListS2tDomainsRequest}
				 */
				proto.ondewo.s2t.ListS2tDomainsRequest.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.ListS2tDomainsRequest();
					return proto.ondewo.s2t.ListS2tDomainsRequest.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.ListS2tDomainsRequest} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.ListS2tDomainsRequest}
				 */
				proto.ondewo.s2t.ListS2tDomainsRequest.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.addLanguages(value);
								break;
							case 2:
								var value = /** @type {string} */ (reader.readString());
								msg.addPipelineOwners(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.ListS2tDomainsRequest.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.ListS2tDomainsRequest.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.ListS2tDomainsRequest} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.ListS2tDomainsRequest.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getLanguagesList();
					if (f.length > 0) {
						writer.writeRepeatedString(1, f);
					}
					f = message.getPipelineOwnersList();
					if (f.length > 0) {
						writer.writeRepeatedString(2, f);
					}
				};

				/**
				 * repeated string languages = 1;
				 * @return {!Array<string>}
				 */
				proto.ondewo.s2t.ListS2tDomainsRequest.prototype.getLanguagesList = function () {
					return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
				};

				/**
				 * @param {!Array<string>} value
				 * @return {!proto.ondewo.s2t.ListS2tDomainsRequest} returns this
				 */
				proto.ondewo.s2t.ListS2tDomainsRequest.prototype.setLanguagesList = function (value) {
					return jspb.Message.setField(this, 1, value || []);
				};

				/**
				 * @param {string} value
				 * @param {number=} opt_index
				 * @return {!proto.ondewo.s2t.ListS2tDomainsRequest} returns this
				 */
				proto.ondewo.s2t.ListS2tDomainsRequest.prototype.addLanguages = function (value, opt_index) {
					return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
				};

				/**
				 * Clears the list making it empty but non-null.
				 * @return {!proto.ondewo.s2t.ListS2tDomainsRequest} returns this
				 */
				proto.ondewo.s2t.ListS2tDomainsRequest.prototype.clearLanguagesList = function () {
					return this.setLanguagesList([]);
				};

				/**
				 * repeated string pipeline_owners = 2;
				 * @return {!Array<string>}
				 */
				proto.ondewo.s2t.ListS2tDomainsRequest.prototype.getPipelineOwnersList = function () {
					return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
				};

				/**
				 * @param {!Array<string>} value
				 * @return {!proto.ondewo.s2t.ListS2tDomainsRequest} returns this
				 */
				proto.ondewo.s2t.ListS2tDomainsRequest.prototype.setPipelineOwnersList = function (value) {
					return jspb.Message.setField(this, 2, value || []);
				};

				/**
				 * @param {string} value
				 * @param {number=} opt_index
				 * @return {!proto.ondewo.s2t.ListS2tDomainsRequest} returns this
				 */
				proto.ondewo.s2t.ListS2tDomainsRequest.prototype.addPipelineOwners = function (value, opt_index) {
					return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
				};

				/**
				 * Clears the list making it empty but non-null.
				 * @return {!proto.ondewo.s2t.ListS2tDomainsRequest} returns this
				 */
				proto.ondewo.s2t.ListS2tDomainsRequest.prototype.clearPipelineOwnersList = function () {
					return this.setPipelineOwnersList([]);
				};

				/**
				 * List of repeated fields within this message type.
				 * @private {!Array<number>}
				 * @const
				 */
				proto.ondewo.s2t.ListS2tDomainsResponse.repeatedFields_ = [1];

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.ListS2tDomainsResponse.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.ListS2tDomainsResponse.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.ListS2tDomainsResponse} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.ListS2tDomainsResponse.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								domainsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.ListS2tDomainsResponse}
				 */
				proto.ondewo.s2t.ListS2tDomainsResponse.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.ListS2tDomainsResponse();
					return proto.ondewo.s2t.ListS2tDomainsResponse.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.ListS2tDomainsResponse} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.ListS2tDomainsResponse}
				 */
				proto.ondewo.s2t.ListS2tDomainsResponse.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.addDomains(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.ListS2tDomainsResponse.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.ListS2tDomainsResponse.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.ListS2tDomainsResponse} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.ListS2tDomainsResponse.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getDomainsList();
					if (f.length > 0) {
						writer.writeRepeatedString(1, f);
					}
				};

				/**
				 * repeated string domains = 1;
				 * @return {!Array<string>}
				 */
				proto.ondewo.s2t.ListS2tDomainsResponse.prototype.getDomainsList = function () {
					return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
				};

				/**
				 * @param {!Array<string>} value
				 * @return {!proto.ondewo.s2t.ListS2tDomainsResponse} returns this
				 */
				proto.ondewo.s2t.ListS2tDomainsResponse.prototype.setDomainsList = function (value) {
					return jspb.Message.setField(this, 1, value || []);
				};

				/**
				 * @param {string} value
				 * @param {number=} opt_index
				 * @return {!proto.ondewo.s2t.ListS2tDomainsResponse} returns this
				 */
				proto.ondewo.s2t.ListS2tDomainsResponse.prototype.addDomains = function (value, opt_index) {
					return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
				};

				/**
				 * Clears the list making it empty but non-null.
				 * @return {!proto.ondewo.s2t.ListS2tDomainsResponse} returns this
				 */
				proto.ondewo.s2t.ListS2tDomainsResponse.prototype.clearDomainsList = function () {
					return this.setDomainsList([]);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.S2tGetServiceInfoResponse.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.S2tGetServiceInfoResponse.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.S2tGetServiceInfoResponse} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.S2tGetServiceInfoResponse.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								version: jspb.Message.getFieldWithDefault(msg, 1, '')
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.S2tGetServiceInfoResponse}
				 */
				proto.ondewo.s2t.S2tGetServiceInfoResponse.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.S2tGetServiceInfoResponse();
					return proto.ondewo.s2t.S2tGetServiceInfoResponse.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.S2tGetServiceInfoResponse} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.S2tGetServiceInfoResponse}
				 */
				proto.ondewo.s2t.S2tGetServiceInfoResponse.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setVersion(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.S2tGetServiceInfoResponse.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.S2tGetServiceInfoResponse.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.S2tGetServiceInfoResponse} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.S2tGetServiceInfoResponse.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getVersion();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
				};

				/**
				 * optional string version = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.S2tGetServiceInfoResponse.prototype.getVersion = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.S2tGetServiceInfoResponse} returns this
				 */
				proto.ondewo.s2t.S2tGetServiceInfoResponse.prototype.setVersion = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.Speech2TextConfig.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.Speech2TextConfig.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.Speech2TextConfig} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.Speech2TextConfig.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								id: jspb.Message.getFieldWithDefault(msg, 1, ''),
								description: (f = msg.getDescription()) && proto.ondewo.s2t.S2tDescription.toObject(includeInstance, f),
								active: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
								inference: (f = msg.getInference()) && proto.ondewo.s2t.S2tInference.toObject(includeInstance, f),
								streamingServer:
									(f = msg.getStreamingServer()) && proto.ondewo.s2t.StreamingServer.toObject(includeInstance, f),
								voiceActivityDetection:
									(f = msg.getVoiceActivityDetection()) &&
									proto.ondewo.s2t.VoiceActivityDetection.toObject(includeInstance, f),
								postProcessing:
									(f = msg.getPostProcessing()) && proto.ondewo.s2t.PostProcessing.toObject(includeInstance, f),
								logging: (f = msg.getLogging()) && proto.ondewo.s2t.Logging.toObject(includeInstance, f)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.Speech2TextConfig}
				 */
				proto.ondewo.s2t.Speech2TextConfig.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.Speech2TextConfig();
					return proto.ondewo.s2t.Speech2TextConfig.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.Speech2TextConfig} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.Speech2TextConfig}
				 */
				proto.ondewo.s2t.Speech2TextConfig.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setId(value);
								break;
							case 2:
								var value = new proto.ondewo.s2t.S2tDescription();
								reader.readMessage(value, proto.ondewo.s2t.S2tDescription.deserializeBinaryFromReader);
								msg.setDescription(value);
								break;
							case 3:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setActive(value);
								break;
							case 4:
								var value = new proto.ondewo.s2t.S2tInference();
								reader.readMessage(value, proto.ondewo.s2t.S2tInference.deserializeBinaryFromReader);
								msg.setInference(value);
								break;
							case 5:
								var value = new proto.ondewo.s2t.StreamingServer();
								reader.readMessage(value, proto.ondewo.s2t.StreamingServer.deserializeBinaryFromReader);
								msg.setStreamingServer(value);
								break;
							case 6:
								var value = new proto.ondewo.s2t.VoiceActivityDetection();
								reader.readMessage(value, proto.ondewo.s2t.VoiceActivityDetection.deserializeBinaryFromReader);
								msg.setVoiceActivityDetection(value);
								break;
							case 7:
								var value = new proto.ondewo.s2t.PostProcessing();
								reader.readMessage(value, proto.ondewo.s2t.PostProcessing.deserializeBinaryFromReader);
								msg.setPostProcessing(value);
								break;
							case 8:
								var value = new proto.ondewo.s2t.Logging();
								reader.readMessage(value, proto.ondewo.s2t.Logging.deserializeBinaryFromReader);
								msg.setLogging(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.Speech2TextConfig.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.Speech2TextConfig} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.Speech2TextConfig.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getId();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
					f = message.getDescription();
					if (f != null) {
						writer.writeMessage(2, f, proto.ondewo.s2t.S2tDescription.serializeBinaryToWriter);
					}
					f = message.getActive();
					if (f) {
						writer.writeBool(3, f);
					}
					f = message.getInference();
					if (f != null) {
						writer.writeMessage(4, f, proto.ondewo.s2t.S2tInference.serializeBinaryToWriter);
					}
					f = message.getStreamingServer();
					if (f != null) {
						writer.writeMessage(5, f, proto.ondewo.s2t.StreamingServer.serializeBinaryToWriter);
					}
					f = message.getVoiceActivityDetection();
					if (f != null) {
						writer.writeMessage(6, f, proto.ondewo.s2t.VoiceActivityDetection.serializeBinaryToWriter);
					}
					f = message.getPostProcessing();
					if (f != null) {
						writer.writeMessage(7, f, proto.ondewo.s2t.PostProcessing.serializeBinaryToWriter);
					}
					f = message.getLogging();
					if (f != null) {
						writer.writeMessage(8, f, proto.ondewo.s2t.Logging.serializeBinaryToWriter);
					}
				};

				/**
				 * optional string id = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.getId = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.Speech2TextConfig} returns this
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.setId = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * optional S2tDescription description = 2;
				 * @return {?proto.ondewo.s2t.S2tDescription}
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.getDescription = function () {
					return /** @type{?proto.ondewo.s2t.S2tDescription} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.S2tDescription, 2)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.S2tDescription|undefined} value
				 * @return {!proto.ondewo.s2t.Speech2TextConfig} returns this
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.setDescription = function (value) {
					return jspb.Message.setWrapperField(this, 2, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.Speech2TextConfig} returns this
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.clearDescription = function () {
					return this.setDescription(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.hasDescription = function () {
					return jspb.Message.getField(this, 2) != null;
				};

				/**
				 * optional bool active = 3;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.getActive = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.Speech2TextConfig} returns this
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.setActive = function (value) {
					return jspb.Message.setProto3BooleanField(this, 3, value);
				};

				/**
				 * optional S2tInference inference = 4;
				 * @return {?proto.ondewo.s2t.S2tInference}
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.getInference = function () {
					return /** @type{?proto.ondewo.s2t.S2tInference} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.S2tInference, 4)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.S2tInference|undefined} value
				 * @return {!proto.ondewo.s2t.Speech2TextConfig} returns this
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.setInference = function (value) {
					return jspb.Message.setWrapperField(this, 4, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.Speech2TextConfig} returns this
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.clearInference = function () {
					return this.setInference(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.hasInference = function () {
					return jspb.Message.getField(this, 4) != null;
				};

				/**
				 * optional StreamingServer streaming_server = 5;
				 * @return {?proto.ondewo.s2t.StreamingServer}
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.getStreamingServer = function () {
					return /** @type{?proto.ondewo.s2t.StreamingServer} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.StreamingServer, 5)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.StreamingServer|undefined} value
				 * @return {!proto.ondewo.s2t.Speech2TextConfig} returns this
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.setStreamingServer = function (value) {
					return jspb.Message.setWrapperField(this, 5, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.Speech2TextConfig} returns this
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.clearStreamingServer = function () {
					return this.setStreamingServer(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.hasStreamingServer = function () {
					return jspb.Message.getField(this, 5) != null;
				};

				/**
				 * optional VoiceActivityDetection voice_activity_detection = 6;
				 * @return {?proto.ondewo.s2t.VoiceActivityDetection}
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.getVoiceActivityDetection = function () {
					return /** @type{?proto.ondewo.s2t.VoiceActivityDetection} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.VoiceActivityDetection, 6)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.VoiceActivityDetection|undefined} value
				 * @return {!proto.ondewo.s2t.Speech2TextConfig} returns this
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.setVoiceActivityDetection = function (value) {
					return jspb.Message.setWrapperField(this, 6, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.Speech2TextConfig} returns this
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.clearVoiceActivityDetection = function () {
					return this.setVoiceActivityDetection(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.hasVoiceActivityDetection = function () {
					return jspb.Message.getField(this, 6) != null;
				};

				/**
				 * optional PostProcessing post_processing = 7;
				 * @return {?proto.ondewo.s2t.PostProcessing}
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.getPostProcessing = function () {
					return /** @type{?proto.ondewo.s2t.PostProcessing} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.PostProcessing, 7)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.PostProcessing|undefined} value
				 * @return {!proto.ondewo.s2t.Speech2TextConfig} returns this
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.setPostProcessing = function (value) {
					return jspb.Message.setWrapperField(this, 7, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.Speech2TextConfig} returns this
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.clearPostProcessing = function () {
					return this.setPostProcessing(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.hasPostProcessing = function () {
					return jspb.Message.getField(this, 7) != null;
				};

				/**
				 * optional Logging logging = 8;
				 * @return {?proto.ondewo.s2t.Logging}
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.getLogging = function () {
					return /** @type{?proto.ondewo.s2t.Logging} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.Logging, 8)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.Logging|undefined} value
				 * @return {!proto.ondewo.s2t.Speech2TextConfig} returns this
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.setLogging = function (value) {
					return jspb.Message.setWrapperField(this, 8, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.Speech2TextConfig} returns this
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.clearLogging = function () {
					return this.setLogging(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.Speech2TextConfig.prototype.hasLogging = function () {
					return jspb.Message.getField(this, 8) != null;
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.S2tDescription.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.S2tDescription.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.S2tDescription} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.S2tDescription.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								language: jspb.Message.getFieldWithDefault(msg, 1, ''),
								pipelineOwner: jspb.Message.getFieldWithDefault(msg, 2, ''),
								domain: jspb.Message.getFieldWithDefault(msg, 3, ''),
								comments: jspb.Message.getFieldWithDefault(msg, 4, '')
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.S2tDescription}
				 */
				proto.ondewo.s2t.S2tDescription.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.S2tDescription();
					return proto.ondewo.s2t.S2tDescription.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.S2tDescription} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.S2tDescription}
				 */
				proto.ondewo.s2t.S2tDescription.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setLanguage(value);
								break;
							case 2:
								var value = /** @type {string} */ (reader.readString());
								msg.setPipelineOwner(value);
								break;
							case 3:
								var value = /** @type {string} */ (reader.readString());
								msg.setDomain(value);
								break;
							case 4:
								var value = /** @type {string} */ (reader.readString());
								msg.setComments(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.S2tDescription.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.S2tDescription.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.S2tDescription} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.S2tDescription.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getLanguage();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
					f = message.getPipelineOwner();
					if (f.length > 0) {
						writer.writeString(2, f);
					}
					f = message.getDomain();
					if (f.length > 0) {
						writer.writeString(3, f);
					}
					f = message.getComments();
					if (f.length > 0) {
						writer.writeString(4, f);
					}
				};

				/**
				 * optional string language = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.S2tDescription.prototype.getLanguage = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.S2tDescription} returns this
				 */
				proto.ondewo.s2t.S2tDescription.prototype.setLanguage = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * optional string pipeline_owner = 2;
				 * @return {string}
				 */
				proto.ondewo.s2t.S2tDescription.prototype.getPipelineOwner = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.S2tDescription} returns this
				 */
				proto.ondewo.s2t.S2tDescription.prototype.setPipelineOwner = function (value) {
					return jspb.Message.setProto3StringField(this, 2, value);
				};

				/**
				 * optional string domain = 3;
				 * @return {string}
				 */
				proto.ondewo.s2t.S2tDescription.prototype.getDomain = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.S2tDescription} returns this
				 */
				proto.ondewo.s2t.S2tDescription.prototype.setDomain = function (value) {
					return jspb.Message.setProto3StringField(this, 3, value);
				};

				/**
				 * optional string comments = 4;
				 * @return {string}
				 */
				proto.ondewo.s2t.S2tDescription.prototype.getComments = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.S2tDescription} returns this
				 */
				proto.ondewo.s2t.S2tDescription.prototype.setComments = function (value) {
					return jspb.Message.setProto3StringField(this, 4, value);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.S2tInference.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.S2tInference.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.S2tInference} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.S2tInference.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								acousticModels:
									(f = msg.getAcousticModels()) && proto.ondewo.s2t.AcousticModels.toObject(includeInstance, f),
								languageModels:
									(f = msg.getLanguageModels()) && proto.ondewo.s2t.LanguageModels.toObject(includeInstance, f),
								inferenceBackend: jspb.Message.getFieldWithDefault(msg, 3, 0)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.S2tInference}
				 */
				proto.ondewo.s2t.S2tInference.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.S2tInference();
					return proto.ondewo.s2t.S2tInference.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.S2tInference} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.S2tInference}
				 */
				proto.ondewo.s2t.S2tInference.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = new proto.ondewo.s2t.AcousticModels();
								reader.readMessage(value, proto.ondewo.s2t.AcousticModels.deserializeBinaryFromReader);
								msg.setAcousticModels(value);
								break;
							case 2:
								var value = new proto.ondewo.s2t.LanguageModels();
								reader.readMessage(value, proto.ondewo.s2t.LanguageModels.deserializeBinaryFromReader);
								msg.setLanguageModels(value);
								break;
							case 3:
								var value = /** @type {!proto.ondewo.s2t.InferenceBackend} */ (reader.readEnum());
								msg.setInferenceBackend(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.S2tInference.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.S2tInference.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.S2tInference} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.S2tInference.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getAcousticModels();
					if (f != null) {
						writer.writeMessage(1, f, proto.ondewo.s2t.AcousticModels.serializeBinaryToWriter);
					}
					f = message.getLanguageModels();
					if (f != null) {
						writer.writeMessage(2, f, proto.ondewo.s2t.LanguageModels.serializeBinaryToWriter);
					}
					f = message.getInferenceBackend();
					if (f !== 0.0) {
						writer.writeEnum(3, f);
					}
				};

				/**
				 * optional AcousticModels acoustic_models = 1;
				 * @return {?proto.ondewo.s2t.AcousticModels}
				 */
				proto.ondewo.s2t.S2tInference.prototype.getAcousticModels = function () {
					return /** @type{?proto.ondewo.s2t.AcousticModels} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.AcousticModels, 1)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.AcousticModels|undefined} value
				 * @return {!proto.ondewo.s2t.S2tInference} returns this
				 */
				proto.ondewo.s2t.S2tInference.prototype.setAcousticModels = function (value) {
					return jspb.Message.setWrapperField(this, 1, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tInference} returns this
				 */
				proto.ondewo.s2t.S2tInference.prototype.clearAcousticModels = function () {
					return this.setAcousticModels(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tInference.prototype.hasAcousticModels = function () {
					return jspb.Message.getField(this, 1) != null;
				};

				/**
				 * optional LanguageModels language_models = 2;
				 * @return {?proto.ondewo.s2t.LanguageModels}
				 */
				proto.ondewo.s2t.S2tInference.prototype.getLanguageModels = function () {
					return /** @type{?proto.ondewo.s2t.LanguageModels} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.LanguageModels, 2)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.LanguageModels|undefined} value
				 * @return {!proto.ondewo.s2t.S2tInference} returns this
				 */
				proto.ondewo.s2t.S2tInference.prototype.setLanguageModels = function (value) {
					return jspb.Message.setWrapperField(this, 2, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tInference} returns this
				 */
				proto.ondewo.s2t.S2tInference.prototype.clearLanguageModels = function () {
					return this.setLanguageModels(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tInference.prototype.hasLanguageModels = function () {
					return jspb.Message.getField(this, 2) != null;
				};

				/**
				 * optional InferenceBackend inference_backend = 3;
				 * @return {!proto.ondewo.s2t.InferenceBackend}
				 */
				proto.ondewo.s2t.S2tInference.prototype.getInferenceBackend = function () {
					return /** @type {!proto.ondewo.s2t.InferenceBackend} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
				};

				/**
				 * @param {!proto.ondewo.s2t.InferenceBackend} value
				 * @return {!proto.ondewo.s2t.S2tInference} returns this
				 */
				proto.ondewo.s2t.S2tInference.prototype.setInferenceBackend = function (value) {
					return jspb.Message.setProto3EnumField(this, 3, value);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.AcousticModels.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.AcousticModels.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.AcousticModels} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.AcousticModels.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								type: jspb.Message.getFieldWithDefault(msg, 1, ''),
								wav2vec: (f = msg.getWav2vec()) && proto.ondewo.s2t.Wav2Vec.toObject(includeInstance, f),
								wav2vecTriton:
									(f = msg.getWav2vecTriton()) && proto.ondewo.s2t.Wav2VecTriton.toObject(includeInstance, f),
								whisper: (f = msg.getWhisper()) && proto.ondewo.s2t.Whisper.toObject(includeInstance, f),
								whisperTriton:
									(f = msg.getWhisperTriton()) && proto.ondewo.s2t.WhisperTriton.toObject(includeInstance, f),
								s2tCloudServiceAmazon:
									(f = msg.getS2tCloudServiceAmazon()) &&
									proto.ondewo.s2t.S2tCloudServiceAmazon.toObject(includeInstance, f),
								s2tCloudServiceDeepgram:
									(f = msg.getS2tCloudServiceDeepgram()) &&
									proto.ondewo.s2t.S2tCloudServiceDeepgram.toObject(includeInstance, f),
								s2tCloudServiceGoogle:
									(f = msg.getS2tCloudServiceGoogle()) &&
									proto.ondewo.s2t.S2tCloudServiceGoogle.toObject(includeInstance, f),
								s2tCloudServiceMicrosoft:
									(f = msg.getS2tCloudServiceMicrosoft()) &&
									proto.ondewo.s2t.S2tCloudServiceMicrosoft.toObject(includeInstance, f)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.AcousticModels}
				 */
				proto.ondewo.s2t.AcousticModels.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.AcousticModels();
					return proto.ondewo.s2t.AcousticModels.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.AcousticModels} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.AcousticModels}
				 */
				proto.ondewo.s2t.AcousticModels.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setType(value);
								break;
							case 2:
								var value = new proto.ondewo.s2t.Wav2Vec();
								reader.readMessage(value, proto.ondewo.s2t.Wav2Vec.deserializeBinaryFromReader);
								msg.setWav2vec(value);
								break;
							case 3:
								var value = new proto.ondewo.s2t.Wav2VecTriton();
								reader.readMessage(value, proto.ondewo.s2t.Wav2VecTriton.deserializeBinaryFromReader);
								msg.setWav2vecTriton(value);
								break;
							case 4:
								var value = new proto.ondewo.s2t.Whisper();
								reader.readMessage(value, proto.ondewo.s2t.Whisper.deserializeBinaryFromReader);
								msg.setWhisper(value);
								break;
							case 5:
								var value = new proto.ondewo.s2t.WhisperTriton();
								reader.readMessage(value, proto.ondewo.s2t.WhisperTriton.deserializeBinaryFromReader);
								msg.setWhisperTriton(value);
								break;
							case 6:
								var value = new proto.ondewo.s2t.S2tCloudServiceAmazon();
								reader.readMessage(value, proto.ondewo.s2t.S2tCloudServiceAmazon.deserializeBinaryFromReader);
								msg.setS2tCloudServiceAmazon(value);
								break;
							case 7:
								var value = new proto.ondewo.s2t.S2tCloudServiceDeepgram();
								reader.readMessage(value, proto.ondewo.s2t.S2tCloudServiceDeepgram.deserializeBinaryFromReader);
								msg.setS2tCloudServiceDeepgram(value);
								break;
							case 8:
								var value = new proto.ondewo.s2t.S2tCloudServiceGoogle();
								reader.readMessage(value, proto.ondewo.s2t.S2tCloudServiceGoogle.deserializeBinaryFromReader);
								msg.setS2tCloudServiceGoogle(value);
								break;
							case 9:
								var value = new proto.ondewo.s2t.S2tCloudServiceMicrosoft();
								reader.readMessage(value, proto.ondewo.s2t.S2tCloudServiceMicrosoft.deserializeBinaryFromReader);
								msg.setS2tCloudServiceMicrosoft(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.AcousticModels.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.AcousticModels.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.AcousticModels} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.AcousticModels.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getType();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
					f = message.getWav2vec();
					if (f != null) {
						writer.writeMessage(2, f, proto.ondewo.s2t.Wav2Vec.serializeBinaryToWriter);
					}
					f = message.getWav2vecTriton();
					if (f != null) {
						writer.writeMessage(3, f, proto.ondewo.s2t.Wav2VecTriton.serializeBinaryToWriter);
					}
					f = message.getWhisper();
					if (f != null) {
						writer.writeMessage(4, f, proto.ondewo.s2t.Whisper.serializeBinaryToWriter);
					}
					f = message.getWhisperTriton();
					if (f != null) {
						writer.writeMessage(5, f, proto.ondewo.s2t.WhisperTriton.serializeBinaryToWriter);
					}
					f = message.getS2tCloudServiceAmazon();
					if (f != null) {
						writer.writeMessage(6, f, proto.ondewo.s2t.S2tCloudServiceAmazon.serializeBinaryToWriter);
					}
					f = message.getS2tCloudServiceDeepgram();
					if (f != null) {
						writer.writeMessage(7, f, proto.ondewo.s2t.S2tCloudServiceDeepgram.serializeBinaryToWriter);
					}
					f = message.getS2tCloudServiceGoogle();
					if (f != null) {
						writer.writeMessage(8, f, proto.ondewo.s2t.S2tCloudServiceGoogle.serializeBinaryToWriter);
					}
					f = message.getS2tCloudServiceMicrosoft();
					if (f != null) {
						writer.writeMessage(9, f, proto.ondewo.s2t.S2tCloudServiceMicrosoft.serializeBinaryToWriter);
					}
				};

				/**
				 * optional string type = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.AcousticModels.prototype.getType = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.AcousticModels} returns this
				 */
				proto.ondewo.s2t.AcousticModels.prototype.setType = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * optional Wav2Vec wav2vec = 2;
				 * @return {?proto.ondewo.s2t.Wav2Vec}
				 */
				proto.ondewo.s2t.AcousticModels.prototype.getWav2vec = function () {
					return /** @type{?proto.ondewo.s2t.Wav2Vec} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.Wav2Vec, 2)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.Wav2Vec|undefined} value
				 * @return {!proto.ondewo.s2t.AcousticModels} returns this
				 */
				proto.ondewo.s2t.AcousticModels.prototype.setWav2vec = function (value) {
					return jspb.Message.setWrapperField(this, 2, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.AcousticModels} returns this
				 */
				proto.ondewo.s2t.AcousticModels.prototype.clearWav2vec = function () {
					return this.setWav2vec(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.AcousticModels.prototype.hasWav2vec = function () {
					return jspb.Message.getField(this, 2) != null;
				};

				/**
				 * optional Wav2VecTriton wav2vec_triton = 3;
				 * @return {?proto.ondewo.s2t.Wav2VecTriton}
				 */
				proto.ondewo.s2t.AcousticModels.prototype.getWav2vecTriton = function () {
					return /** @type{?proto.ondewo.s2t.Wav2VecTriton} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.Wav2VecTriton, 3)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.Wav2VecTriton|undefined} value
				 * @return {!proto.ondewo.s2t.AcousticModels} returns this
				 */
				proto.ondewo.s2t.AcousticModels.prototype.setWav2vecTriton = function (value) {
					return jspb.Message.setWrapperField(this, 3, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.AcousticModels} returns this
				 */
				proto.ondewo.s2t.AcousticModels.prototype.clearWav2vecTriton = function () {
					return this.setWav2vecTriton(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.AcousticModels.prototype.hasWav2vecTriton = function () {
					return jspb.Message.getField(this, 3) != null;
				};

				/**
				 * optional Whisper whisper = 4;
				 * @return {?proto.ondewo.s2t.Whisper}
				 */
				proto.ondewo.s2t.AcousticModels.prototype.getWhisper = function () {
					return /** @type{?proto.ondewo.s2t.Whisper} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.Whisper, 4)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.Whisper|undefined} value
				 * @return {!proto.ondewo.s2t.AcousticModels} returns this
				 */
				proto.ondewo.s2t.AcousticModels.prototype.setWhisper = function (value) {
					return jspb.Message.setWrapperField(this, 4, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.AcousticModels} returns this
				 */
				proto.ondewo.s2t.AcousticModels.prototype.clearWhisper = function () {
					return this.setWhisper(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.AcousticModels.prototype.hasWhisper = function () {
					return jspb.Message.getField(this, 4) != null;
				};

				/**
				 * optional WhisperTriton whisper_triton = 5;
				 * @return {?proto.ondewo.s2t.WhisperTriton}
				 */
				proto.ondewo.s2t.AcousticModels.prototype.getWhisperTriton = function () {
					return /** @type{?proto.ondewo.s2t.WhisperTriton} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.WhisperTriton, 5)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.WhisperTriton|undefined} value
				 * @return {!proto.ondewo.s2t.AcousticModels} returns this
				 */
				proto.ondewo.s2t.AcousticModels.prototype.setWhisperTriton = function (value) {
					return jspb.Message.setWrapperField(this, 5, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.AcousticModels} returns this
				 */
				proto.ondewo.s2t.AcousticModels.prototype.clearWhisperTriton = function () {
					return this.setWhisperTriton(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.AcousticModels.prototype.hasWhisperTriton = function () {
					return jspb.Message.getField(this, 5) != null;
				};

				/**
				 * optional S2tCloudServiceAmazon s2t_cloud_service_amazon = 6;
				 * @return {?proto.ondewo.s2t.S2tCloudServiceAmazon}
				 */
				proto.ondewo.s2t.AcousticModels.prototype.getS2tCloudServiceAmazon = function () {
					return /** @type{?proto.ondewo.s2t.S2tCloudServiceAmazon} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.S2tCloudServiceAmazon, 6)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.S2tCloudServiceAmazon|undefined} value
				 * @return {!proto.ondewo.s2t.AcousticModels} returns this
				 */
				proto.ondewo.s2t.AcousticModels.prototype.setS2tCloudServiceAmazon = function (value) {
					return jspb.Message.setWrapperField(this, 6, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.AcousticModels} returns this
				 */
				proto.ondewo.s2t.AcousticModels.prototype.clearS2tCloudServiceAmazon = function () {
					return this.setS2tCloudServiceAmazon(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.AcousticModels.prototype.hasS2tCloudServiceAmazon = function () {
					return jspb.Message.getField(this, 6) != null;
				};

				/**
				 * optional S2tCloudServiceDeepgram s2t_cloud_service_deepgram = 7;
				 * @return {?proto.ondewo.s2t.S2tCloudServiceDeepgram}
				 */
				proto.ondewo.s2t.AcousticModels.prototype.getS2tCloudServiceDeepgram = function () {
					return /** @type{?proto.ondewo.s2t.S2tCloudServiceDeepgram} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.S2tCloudServiceDeepgram, 7)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.S2tCloudServiceDeepgram|undefined} value
				 * @return {!proto.ondewo.s2t.AcousticModels} returns this
				 */
				proto.ondewo.s2t.AcousticModels.prototype.setS2tCloudServiceDeepgram = function (value) {
					return jspb.Message.setWrapperField(this, 7, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.AcousticModels} returns this
				 */
				proto.ondewo.s2t.AcousticModels.prototype.clearS2tCloudServiceDeepgram = function () {
					return this.setS2tCloudServiceDeepgram(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.AcousticModels.prototype.hasS2tCloudServiceDeepgram = function () {
					return jspb.Message.getField(this, 7) != null;
				};

				/**
				 * optional S2tCloudServiceGoogle s2t_cloud_service_google = 8;
				 * @return {?proto.ondewo.s2t.S2tCloudServiceGoogle}
				 */
				proto.ondewo.s2t.AcousticModels.prototype.getS2tCloudServiceGoogle = function () {
					return /** @type{?proto.ondewo.s2t.S2tCloudServiceGoogle} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.S2tCloudServiceGoogle, 8)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.S2tCloudServiceGoogle|undefined} value
				 * @return {!proto.ondewo.s2t.AcousticModels} returns this
				 */
				proto.ondewo.s2t.AcousticModels.prototype.setS2tCloudServiceGoogle = function (value) {
					return jspb.Message.setWrapperField(this, 8, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.AcousticModels} returns this
				 */
				proto.ondewo.s2t.AcousticModels.prototype.clearS2tCloudServiceGoogle = function () {
					return this.setS2tCloudServiceGoogle(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.AcousticModels.prototype.hasS2tCloudServiceGoogle = function () {
					return jspb.Message.getField(this, 8) != null;
				};

				/**
				 * optional S2tCloudServiceMicrosoft s2t_cloud_service_microsoft = 9;
				 * @return {?proto.ondewo.s2t.S2tCloudServiceMicrosoft}
				 */
				proto.ondewo.s2t.AcousticModels.prototype.getS2tCloudServiceMicrosoft = function () {
					return /** @type{?proto.ondewo.s2t.S2tCloudServiceMicrosoft} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.S2tCloudServiceMicrosoft, 9)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.S2tCloudServiceMicrosoft|undefined} value
				 * @return {!proto.ondewo.s2t.AcousticModels} returns this
				 */
				proto.ondewo.s2t.AcousticModels.prototype.setS2tCloudServiceMicrosoft = function (value) {
					return jspb.Message.setWrapperField(this, 9, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.AcousticModels} returns this
				 */
				proto.ondewo.s2t.AcousticModels.prototype.clearS2tCloudServiceMicrosoft = function () {
					return this.setS2tCloudServiceMicrosoft(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.AcousticModels.prototype.hasS2tCloudServiceMicrosoft = function () {
					return jspb.Message.getField(this, 9) != null;
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.S2tCloudServiceAmazon.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.S2tCloudServiceAmazon.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.S2tCloudServiceAmazon} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.S2tCloudServiceAmazon.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								language: jspb.Message.getFieldWithDefault(msg, 1, ''),
								streamingAvailable: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
								enablePartialResultsStabilization: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
								partialResultsStability: jspb.Message.getFieldWithDefault(msg, 4, ''),
								languageModelName: jspb.Message.getFieldWithDefault(msg, 5, ''),
								vocabularyName: jspb.Message.getFieldWithDefault(msg, 6, '')
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.S2tCloudServiceAmazon}
				 */
				proto.ondewo.s2t.S2tCloudServiceAmazon.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.S2tCloudServiceAmazon();
					return proto.ondewo.s2t.S2tCloudServiceAmazon.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.S2tCloudServiceAmazon} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.S2tCloudServiceAmazon}
				 */
				proto.ondewo.s2t.S2tCloudServiceAmazon.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setLanguage(value);
								break;
							case 2:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setStreamingAvailable(value);
								break;
							case 3:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setEnablePartialResultsStabilization(value);
								break;
							case 4:
								var value = /** @type {string} */ (reader.readString());
								msg.setPartialResultsStability(value);
								break;
							case 5:
								var value = /** @type {string} */ (reader.readString());
								msg.setLanguageModelName(value);
								break;
							case 6:
								var value = /** @type {string} */ (reader.readString());
								msg.setVocabularyName(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.S2tCloudServiceAmazon.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.S2tCloudServiceAmazon.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.S2tCloudServiceAmazon} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.S2tCloudServiceAmazon.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getLanguage();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
					f = message.getStreamingAvailable();
					if (f) {
						writer.writeBool(2, f);
					}
					f = message.getEnablePartialResultsStabilization();
					if (f) {
						writer.writeBool(3, f);
					}
					f = message.getPartialResultsStability();
					if (f.length > 0) {
						writer.writeString(4, f);
					}
					f = message.getLanguageModelName();
					if (f.length > 0) {
						writer.writeString(5, f);
					}
					f = message.getVocabularyName();
					if (f.length > 0) {
						writer.writeString(6, f);
					}
				};

				/**
				 * optional string language = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.S2tCloudServiceAmazon.prototype.getLanguage = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.S2tCloudServiceAmazon} returns this
				 */
				proto.ondewo.s2t.S2tCloudServiceAmazon.prototype.setLanguage = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * optional bool streaming_available = 2;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudServiceAmazon.prototype.getStreamingAvailable = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tCloudServiceAmazon} returns this
				 */
				proto.ondewo.s2t.S2tCloudServiceAmazon.prototype.setStreamingAvailable = function (value) {
					return jspb.Message.setProto3BooleanField(this, 2, value);
				};

				/**
				 * optional bool enable_partial_results_stabilization = 3;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudServiceAmazon.prototype.getEnablePartialResultsStabilization = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tCloudServiceAmazon} returns this
				 */
				proto.ondewo.s2t.S2tCloudServiceAmazon.prototype.setEnablePartialResultsStabilization = function (value) {
					return jspb.Message.setProto3BooleanField(this, 3, value);
				};

				/**
				 * optional string partial_results_stability = 4;
				 * @return {string}
				 */
				proto.ondewo.s2t.S2tCloudServiceAmazon.prototype.getPartialResultsStability = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.S2tCloudServiceAmazon} returns this
				 */
				proto.ondewo.s2t.S2tCloudServiceAmazon.prototype.setPartialResultsStability = function (value) {
					return jspb.Message.setProto3StringField(this, 4, value);
				};

				/**
				 * optional string language_model_name = 5;
				 * @return {string}
				 */
				proto.ondewo.s2t.S2tCloudServiceAmazon.prototype.getLanguageModelName = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.S2tCloudServiceAmazon} returns this
				 */
				proto.ondewo.s2t.S2tCloudServiceAmazon.prototype.setLanguageModelName = function (value) {
					return jspb.Message.setProto3StringField(this, 5, value);
				};

				/**
				 * optional string vocabulary_name = 6;
				 * @return {string}
				 */
				proto.ondewo.s2t.S2tCloudServiceAmazon.prototype.getVocabularyName = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.S2tCloudServiceAmazon} returns this
				 */
				proto.ondewo.s2t.S2tCloudServiceAmazon.prototype.setVocabularyName = function (value) {
					return jspb.Message.setProto3StringField(this, 6, value);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.S2tCloudServiceDeepgram.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.S2tCloudServiceDeepgram.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.S2tCloudServiceDeepgram} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.S2tCloudServiceDeepgram.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								modelName: jspb.Message.getFieldWithDefault(msg, 1, ''),
								language: jspb.Message.getFieldWithDefault(msg, 2, ''),
								punctuate: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
								smartFormat: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
								numerals: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
								measurements: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
								dictation: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.S2tCloudServiceDeepgram}
				 */
				proto.ondewo.s2t.S2tCloudServiceDeepgram.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.S2tCloudServiceDeepgram();
					return proto.ondewo.s2t.S2tCloudServiceDeepgram.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.S2tCloudServiceDeepgram} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.S2tCloudServiceDeepgram}
				 */
				proto.ondewo.s2t.S2tCloudServiceDeepgram.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setModelName(value);
								break;
							case 2:
								var value = /** @type {string} */ (reader.readString());
								msg.setLanguage(value);
								break;
							case 3:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setPunctuate(value);
								break;
							case 4:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setSmartFormat(value);
								break;
							case 5:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setNumerals(value);
								break;
							case 6:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setMeasurements(value);
								break;
							case 7:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setDictation(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.S2tCloudServiceDeepgram.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.S2tCloudServiceDeepgram.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.S2tCloudServiceDeepgram} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.S2tCloudServiceDeepgram.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getModelName();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
					f = message.getLanguage();
					if (f.length > 0) {
						writer.writeString(2, f);
					}
					f = message.getPunctuate();
					if (f) {
						writer.writeBool(3, f);
					}
					f = message.getSmartFormat();
					if (f) {
						writer.writeBool(4, f);
					}
					f = message.getNumerals();
					if (f) {
						writer.writeBool(5, f);
					}
					f = message.getMeasurements();
					if (f) {
						writer.writeBool(6, f);
					}
					f = message.getDictation();
					if (f) {
						writer.writeBool(7, f);
					}
				};

				/**
				 * optional string model_name = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.S2tCloudServiceDeepgram.prototype.getModelName = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.S2tCloudServiceDeepgram} returns this
				 */
				proto.ondewo.s2t.S2tCloudServiceDeepgram.prototype.setModelName = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * optional string language = 2;
				 * @return {string}
				 */
				proto.ondewo.s2t.S2tCloudServiceDeepgram.prototype.getLanguage = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.S2tCloudServiceDeepgram} returns this
				 */
				proto.ondewo.s2t.S2tCloudServiceDeepgram.prototype.setLanguage = function (value) {
					return jspb.Message.setProto3StringField(this, 2, value);
				};

				/**
				 * optional bool punctuate = 3;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudServiceDeepgram.prototype.getPunctuate = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tCloudServiceDeepgram} returns this
				 */
				proto.ondewo.s2t.S2tCloudServiceDeepgram.prototype.setPunctuate = function (value) {
					return jspb.Message.setProto3BooleanField(this, 3, value);
				};

				/**
				 * optional bool smart_format = 4;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudServiceDeepgram.prototype.getSmartFormat = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tCloudServiceDeepgram} returns this
				 */
				proto.ondewo.s2t.S2tCloudServiceDeepgram.prototype.setSmartFormat = function (value) {
					return jspb.Message.setProto3BooleanField(this, 4, value);
				};

				/**
				 * optional bool numerals = 5;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudServiceDeepgram.prototype.getNumerals = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tCloudServiceDeepgram} returns this
				 */
				proto.ondewo.s2t.S2tCloudServiceDeepgram.prototype.setNumerals = function (value) {
					return jspb.Message.setProto3BooleanField(this, 5, value);
				};

				/**
				 * optional bool measurements = 6;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudServiceDeepgram.prototype.getMeasurements = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tCloudServiceDeepgram} returns this
				 */
				proto.ondewo.s2t.S2tCloudServiceDeepgram.prototype.setMeasurements = function (value) {
					return jspb.Message.setProto3BooleanField(this, 6, value);
				};

				/**
				 * optional bool dictation = 7;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudServiceDeepgram.prototype.getDictation = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tCloudServiceDeepgram} returns this
				 */
				proto.ondewo.s2t.S2tCloudServiceDeepgram.prototype.setDictation = function (value) {
					return jspb.Message.setProto3BooleanField(this, 7, value);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.S2tCloudServiceGoogle.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.S2tCloudServiceGoogle.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.S2tCloudServiceGoogle} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.S2tCloudServiceGoogle.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								modelName: jspb.Message.getFieldWithDefault(msg, 1, ''),
								language: jspb.Message.getFieldWithDefault(msg, 2, ''),
								enableAutomaticPunctuation: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
								enableWordTimeOffsets: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
								enableWordConfidence: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
								transcriptNormalization: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
								maxAlternatives: jspb.Message.getFieldWithDefault(msg, 7, 0)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.S2tCloudServiceGoogle}
				 */
				proto.ondewo.s2t.S2tCloudServiceGoogle.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.S2tCloudServiceGoogle();
					return proto.ondewo.s2t.S2tCloudServiceGoogle.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.S2tCloudServiceGoogle} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.S2tCloudServiceGoogle}
				 */
				proto.ondewo.s2t.S2tCloudServiceGoogle.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setModelName(value);
								break;
							case 2:
								var value = /** @type {string} */ (reader.readString());
								msg.setLanguage(value);
								break;
							case 3:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setEnableAutomaticPunctuation(value);
								break;
							case 4:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setEnableWordTimeOffsets(value);
								break;
							case 5:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setEnableWordConfidence(value);
								break;
							case 6:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setTranscriptNormalization(value);
								break;
							case 7:
								var value = /** @type {number} */ (reader.readInt32());
								msg.setMaxAlternatives(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.S2tCloudServiceGoogle.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.S2tCloudServiceGoogle.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.S2tCloudServiceGoogle} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.S2tCloudServiceGoogle.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getModelName();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
					f = message.getLanguage();
					if (f.length > 0) {
						writer.writeString(2, f);
					}
					f = message.getEnableAutomaticPunctuation();
					if (f) {
						writer.writeBool(3, f);
					}
					f = message.getEnableWordTimeOffsets();
					if (f) {
						writer.writeBool(4, f);
					}
					f = message.getEnableWordConfidence();
					if (f) {
						writer.writeBool(5, f);
					}
					f = message.getTranscriptNormalization();
					if (f) {
						writer.writeBool(6, f);
					}
					f = message.getMaxAlternatives();
					if (f !== 0) {
						writer.writeInt32(7, f);
					}
				};

				/**
				 * optional string model_name = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.S2tCloudServiceGoogle.prototype.getModelName = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.S2tCloudServiceGoogle} returns this
				 */
				proto.ondewo.s2t.S2tCloudServiceGoogle.prototype.setModelName = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * optional string language = 2;
				 * @return {string}
				 */
				proto.ondewo.s2t.S2tCloudServiceGoogle.prototype.getLanguage = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.S2tCloudServiceGoogle} returns this
				 */
				proto.ondewo.s2t.S2tCloudServiceGoogle.prototype.setLanguage = function (value) {
					return jspb.Message.setProto3StringField(this, 2, value);
				};

				/**
				 * optional bool enable_automatic_punctuation = 3;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudServiceGoogle.prototype.getEnableAutomaticPunctuation = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tCloudServiceGoogle} returns this
				 */
				proto.ondewo.s2t.S2tCloudServiceGoogle.prototype.setEnableAutomaticPunctuation = function (value) {
					return jspb.Message.setProto3BooleanField(this, 3, value);
				};

				/**
				 * optional bool enable_word_time_offsets = 4;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudServiceGoogle.prototype.getEnableWordTimeOffsets = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tCloudServiceGoogle} returns this
				 */
				proto.ondewo.s2t.S2tCloudServiceGoogle.prototype.setEnableWordTimeOffsets = function (value) {
					return jspb.Message.setProto3BooleanField(this, 4, value);
				};

				/**
				 * optional bool enable_word_confidence = 5;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudServiceGoogle.prototype.getEnableWordConfidence = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tCloudServiceGoogle} returns this
				 */
				proto.ondewo.s2t.S2tCloudServiceGoogle.prototype.setEnableWordConfidence = function (value) {
					return jspb.Message.setProto3BooleanField(this, 5, value);
				};

				/**
				 * optional bool transcript_normalization = 6;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudServiceGoogle.prototype.getTranscriptNormalization = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tCloudServiceGoogle} returns this
				 */
				proto.ondewo.s2t.S2tCloudServiceGoogle.prototype.setTranscriptNormalization = function (value) {
					return jspb.Message.setProto3BooleanField(this, 6, value);
				};

				/**
				 * optional int32 max_alternatives = 7;
				 * @return {number}
				 */
				proto.ondewo.s2t.S2tCloudServiceGoogle.prototype.getMaxAlternatives = function () {
					return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.S2tCloudServiceGoogle} returns this
				 */
				proto.ondewo.s2t.S2tCloudServiceGoogle.prototype.setMaxAlternatives = function (value) {
					return jspb.Message.setProto3IntField(this, 7, value);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.S2tCloudServiceMicrosoft.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.S2tCloudServiceMicrosoft.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.S2tCloudServiceMicrosoft} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.S2tCloudServiceMicrosoft.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								language: jspb.Message.getFieldWithDefault(msg, 1, ''),
								useFastTranscriptionApi: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
								useDetailedOutputFormat: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.S2tCloudServiceMicrosoft}
				 */
				proto.ondewo.s2t.S2tCloudServiceMicrosoft.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.S2tCloudServiceMicrosoft();
					return proto.ondewo.s2t.S2tCloudServiceMicrosoft.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.S2tCloudServiceMicrosoft} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.S2tCloudServiceMicrosoft}
				 */
				proto.ondewo.s2t.S2tCloudServiceMicrosoft.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setLanguage(value);
								break;
							case 2:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setUseFastTranscriptionApi(value);
								break;
							case 3:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setUseDetailedOutputFormat(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.S2tCloudServiceMicrosoft.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.S2tCloudServiceMicrosoft.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.S2tCloudServiceMicrosoft} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.S2tCloudServiceMicrosoft.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getLanguage();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
					f = message.getUseFastTranscriptionApi();
					if (f) {
						writer.writeBool(2, f);
					}
					f = message.getUseDetailedOutputFormat();
					if (f) {
						writer.writeBool(3, f);
					}
				};

				/**
				 * optional string language = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.S2tCloudServiceMicrosoft.prototype.getLanguage = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.S2tCloudServiceMicrosoft} returns this
				 */
				proto.ondewo.s2t.S2tCloudServiceMicrosoft.prototype.setLanguage = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * optional bool use_fast_transcription_api = 2;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudServiceMicrosoft.prototype.getUseFastTranscriptionApi = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tCloudServiceMicrosoft} returns this
				 */
				proto.ondewo.s2t.S2tCloudServiceMicrosoft.prototype.setUseFastTranscriptionApi = function (value) {
					return jspb.Message.setProto3BooleanField(this, 2, value);
				};

				/**
				 * optional bool use_detailed_output_format = 3;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tCloudServiceMicrosoft.prototype.getUseDetailedOutputFormat = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tCloudServiceMicrosoft} returns this
				 */
				proto.ondewo.s2t.S2tCloudServiceMicrosoft.prototype.setUseDetailedOutputFormat = function (value) {
					return jspb.Message.setProto3BooleanField(this, 3, value);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.Whisper.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.Whisper.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.Whisper} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.Whisper.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								modelPath: jspb.Message.getFieldWithDefault(msg, 1, ''),
								useGpu: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
								language: jspb.Message.getFieldWithDefault(msg, 3, ''),
								task: jspb.Message.getFieldWithDefault(msg, 4, '')
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.Whisper}
				 */
				proto.ondewo.s2t.Whisper.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.Whisper();
					return proto.ondewo.s2t.Whisper.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.Whisper} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.Whisper}
				 */
				proto.ondewo.s2t.Whisper.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setModelPath(value);
								break;
							case 2:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setUseGpu(value);
								break;
							case 3:
								var value = /** @type {string} */ (reader.readString());
								msg.setLanguage(value);
								break;
							case 4:
								var value = /** @type {string} */ (reader.readString());
								msg.setTask(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.Whisper.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.Whisper.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.Whisper} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.Whisper.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getModelPath();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
					f = message.getUseGpu();
					if (f) {
						writer.writeBool(2, f);
					}
					f = message.getLanguage();
					if (f.length > 0) {
						writer.writeString(3, f);
					}
					f = message.getTask();
					if (f.length > 0) {
						writer.writeString(4, f);
					}
				};

				/**
				 * optional string model_path = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.Whisper.prototype.getModelPath = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.Whisper} returns this
				 */
				proto.ondewo.s2t.Whisper.prototype.setModelPath = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * optional bool use_gpu = 2;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.Whisper.prototype.getUseGpu = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.Whisper} returns this
				 */
				proto.ondewo.s2t.Whisper.prototype.setUseGpu = function (value) {
					return jspb.Message.setProto3BooleanField(this, 2, value);
				};

				/**
				 * optional string language = 3;
				 * @return {string}
				 */
				proto.ondewo.s2t.Whisper.prototype.getLanguage = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.Whisper} returns this
				 */
				proto.ondewo.s2t.Whisper.prototype.setLanguage = function (value) {
					return jspb.Message.setProto3StringField(this, 3, value);
				};

				/**
				 * optional string task = 4;
				 * @return {string}
				 */
				proto.ondewo.s2t.Whisper.prototype.getTask = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.Whisper} returns this
				 */
				proto.ondewo.s2t.Whisper.prototype.setTask = function (value) {
					return jspb.Message.setProto3StringField(this, 4, value);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.WhisperTriton.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.WhisperTriton.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.WhisperTriton} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.WhisperTriton.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								processorPath: jspb.Message.getFieldWithDefault(msg, 1, ''),
								tritonModelName: jspb.Message.getFieldWithDefault(msg, 2, ''),
								tritonModelVersion: jspb.Message.getFieldWithDefault(msg, 3, ''),
								checkStatusTimeout: jspb.Message.getFieldWithDefault(msg, 4, 0),
								language: jspb.Message.getFieldWithDefault(msg, 5, ''),
								task: jspb.Message.getFieldWithDefault(msg, 6, ''),
								tritonServerHost: jspb.Message.getFieldWithDefault(msg, 7, ''),
								tritonServerPort: jspb.Message.getFieldWithDefault(msg, 8, 0)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.WhisperTriton}
				 */
				proto.ondewo.s2t.WhisperTriton.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.WhisperTriton();
					return proto.ondewo.s2t.WhisperTriton.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.WhisperTriton} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.WhisperTriton}
				 */
				proto.ondewo.s2t.WhisperTriton.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setProcessorPath(value);
								break;
							case 2:
								var value = /** @type {string} */ (reader.readString());
								msg.setTritonModelName(value);
								break;
							case 3:
								var value = /** @type {string} */ (reader.readString());
								msg.setTritonModelVersion(value);
								break;
							case 4:
								var value = /** @type {number} */ (reader.readInt64());
								msg.setCheckStatusTimeout(value);
								break;
							case 5:
								var value = /** @type {string} */ (reader.readString());
								msg.setLanguage(value);
								break;
							case 6:
								var value = /** @type {string} */ (reader.readString());
								msg.setTask(value);
								break;
							case 7:
								var value = /** @type {string} */ (reader.readString());
								msg.setTritonServerHost(value);
								break;
							case 8:
								var value = /** @type {number} */ (reader.readInt64());
								msg.setTritonServerPort(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.WhisperTriton.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.WhisperTriton.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.WhisperTriton} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.WhisperTriton.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getProcessorPath();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
					f = message.getTritonModelName();
					if (f.length > 0) {
						writer.writeString(2, f);
					}
					f = message.getTritonModelVersion();
					if (f.length > 0) {
						writer.writeString(3, f);
					}
					f = message.getCheckStatusTimeout();
					if (f !== 0) {
						writer.writeInt64(4, f);
					}
					f = message.getLanguage();
					if (f.length > 0) {
						writer.writeString(5, f);
					}
					f = message.getTask();
					if (f.length > 0) {
						writer.writeString(6, f);
					}
					f = message.getTritonServerHost();
					if (f.length > 0) {
						writer.writeString(7, f);
					}
					f = message.getTritonServerPort();
					if (f !== 0) {
						writer.writeInt64(8, f);
					}
				};

				/**
				 * optional string processor_path = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.WhisperTriton.prototype.getProcessorPath = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.WhisperTriton} returns this
				 */
				proto.ondewo.s2t.WhisperTriton.prototype.setProcessorPath = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * optional string triton_model_name = 2;
				 * @return {string}
				 */
				proto.ondewo.s2t.WhisperTriton.prototype.getTritonModelName = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.WhisperTriton} returns this
				 */
				proto.ondewo.s2t.WhisperTriton.prototype.setTritonModelName = function (value) {
					return jspb.Message.setProto3StringField(this, 2, value);
				};

				/**
				 * optional string triton_model_version = 3;
				 * @return {string}
				 */
				proto.ondewo.s2t.WhisperTriton.prototype.getTritonModelVersion = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.WhisperTriton} returns this
				 */
				proto.ondewo.s2t.WhisperTriton.prototype.setTritonModelVersion = function (value) {
					return jspb.Message.setProto3StringField(this, 3, value);
				};

				/**
				 * optional int64 check_status_timeout = 4;
				 * @return {number}
				 */
				proto.ondewo.s2t.WhisperTriton.prototype.getCheckStatusTimeout = function () {
					return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.WhisperTriton} returns this
				 */
				proto.ondewo.s2t.WhisperTriton.prototype.setCheckStatusTimeout = function (value) {
					return jspb.Message.setProto3IntField(this, 4, value);
				};

				/**
				 * optional string language = 5;
				 * @return {string}
				 */
				proto.ondewo.s2t.WhisperTriton.prototype.getLanguage = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.WhisperTriton} returns this
				 */
				proto.ondewo.s2t.WhisperTriton.prototype.setLanguage = function (value) {
					return jspb.Message.setProto3StringField(this, 5, value);
				};

				/**
				 * optional string task = 6;
				 * @return {string}
				 */
				proto.ondewo.s2t.WhisperTriton.prototype.getTask = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.WhisperTriton} returns this
				 */
				proto.ondewo.s2t.WhisperTriton.prototype.setTask = function (value) {
					return jspb.Message.setProto3StringField(this, 6, value);
				};

				/**
				 * optional string triton_server_host = 7;
				 * @return {string}
				 */
				proto.ondewo.s2t.WhisperTriton.prototype.getTritonServerHost = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.WhisperTriton} returns this
				 */
				proto.ondewo.s2t.WhisperTriton.prototype.setTritonServerHost = function (value) {
					return jspb.Message.setProto3StringField(this, 7, value);
				};

				/**
				 * optional int64 triton_server_port = 8;
				 * @return {number}
				 */
				proto.ondewo.s2t.WhisperTriton.prototype.getTritonServerPort = function () {
					return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.WhisperTriton} returns this
				 */
				proto.ondewo.s2t.WhisperTriton.prototype.setTritonServerPort = function (value) {
					return jspb.Message.setProto3IntField(this, 8, value);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.Wav2Vec.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.Wav2Vec.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.Wav2Vec} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.Wav2Vec.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								modelPath: jspb.Message.getFieldWithDefault(msg, 1, ''),
								useGpu: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.Wav2Vec}
				 */
				proto.ondewo.s2t.Wav2Vec.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.Wav2Vec();
					return proto.ondewo.s2t.Wav2Vec.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.Wav2Vec} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.Wav2Vec}
				 */
				proto.ondewo.s2t.Wav2Vec.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setModelPath(value);
								break;
							case 2:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setUseGpu(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.Wav2Vec.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.Wav2Vec.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.Wav2Vec} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.Wav2Vec.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getModelPath();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
					f = message.getUseGpu();
					if (f) {
						writer.writeBool(2, f);
					}
				};

				/**
				 * optional string model_path = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.Wav2Vec.prototype.getModelPath = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.Wav2Vec} returns this
				 */
				proto.ondewo.s2t.Wav2Vec.prototype.setModelPath = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * optional bool use_gpu = 2;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.Wav2Vec.prototype.getUseGpu = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.Wav2Vec} returns this
				 */
				proto.ondewo.s2t.Wav2Vec.prototype.setUseGpu = function (value) {
					return jspb.Message.setProto3BooleanField(this, 2, value);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.Wav2VecTriton.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.Wav2VecTriton.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.Wav2VecTriton} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.Wav2VecTriton.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								processorPath: jspb.Message.getFieldWithDefault(msg, 1, ''),
								tritonModelName: jspb.Message.getFieldWithDefault(msg, 2, ''),
								tritonModelVersion: jspb.Message.getFieldWithDefault(msg, 3, ''),
								checkStatusTimeout: jspb.Message.getFieldWithDefault(msg, 4, 0),
								tritonServerHost: jspb.Message.getFieldWithDefault(msg, 5, ''),
								tritonServerPort: jspb.Message.getFieldWithDefault(msg, 6, 0)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.Wav2VecTriton}
				 */
				proto.ondewo.s2t.Wav2VecTriton.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.Wav2VecTriton();
					return proto.ondewo.s2t.Wav2VecTriton.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.Wav2VecTriton} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.Wav2VecTriton}
				 */
				proto.ondewo.s2t.Wav2VecTriton.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setProcessorPath(value);
								break;
							case 2:
								var value = /** @type {string} */ (reader.readString());
								msg.setTritonModelName(value);
								break;
							case 3:
								var value = /** @type {string} */ (reader.readString());
								msg.setTritonModelVersion(value);
								break;
							case 4:
								var value = /** @type {number} */ (reader.readInt64());
								msg.setCheckStatusTimeout(value);
								break;
							case 5:
								var value = /** @type {string} */ (reader.readString());
								msg.setTritonServerHost(value);
								break;
							case 6:
								var value = /** @type {number} */ (reader.readInt64());
								msg.setTritonServerPort(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.Wav2VecTriton.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.Wav2VecTriton.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.Wav2VecTriton} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.Wav2VecTriton.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getProcessorPath();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
					f = message.getTritonModelName();
					if (f.length > 0) {
						writer.writeString(2, f);
					}
					f = message.getTritonModelVersion();
					if (f.length > 0) {
						writer.writeString(3, f);
					}
					f = message.getCheckStatusTimeout();
					if (f !== 0) {
						writer.writeInt64(4, f);
					}
					f = message.getTritonServerHost();
					if (f.length > 0) {
						writer.writeString(5, f);
					}
					f = message.getTritonServerPort();
					if (f !== 0) {
						writer.writeInt64(6, f);
					}
				};

				/**
				 * optional string processor_path = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.Wav2VecTriton.prototype.getProcessorPath = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.Wav2VecTriton} returns this
				 */
				proto.ondewo.s2t.Wav2VecTriton.prototype.setProcessorPath = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * optional string triton_model_name = 2;
				 * @return {string}
				 */
				proto.ondewo.s2t.Wav2VecTriton.prototype.getTritonModelName = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.Wav2VecTriton} returns this
				 */
				proto.ondewo.s2t.Wav2VecTriton.prototype.setTritonModelName = function (value) {
					return jspb.Message.setProto3StringField(this, 2, value);
				};

				/**
				 * optional string triton_model_version = 3;
				 * @return {string}
				 */
				proto.ondewo.s2t.Wav2VecTriton.prototype.getTritonModelVersion = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.Wav2VecTriton} returns this
				 */
				proto.ondewo.s2t.Wav2VecTriton.prototype.setTritonModelVersion = function (value) {
					return jspb.Message.setProto3StringField(this, 3, value);
				};

				/**
				 * optional int64 check_status_timeout = 4;
				 * @return {number}
				 */
				proto.ondewo.s2t.Wav2VecTriton.prototype.getCheckStatusTimeout = function () {
					return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.Wav2VecTriton} returns this
				 */
				proto.ondewo.s2t.Wav2VecTriton.prototype.setCheckStatusTimeout = function (value) {
					return jspb.Message.setProto3IntField(this, 4, value);
				};

				/**
				 * optional string triton_server_host = 5;
				 * @return {string}
				 */
				proto.ondewo.s2t.Wav2VecTriton.prototype.getTritonServerHost = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.Wav2VecTriton} returns this
				 */
				proto.ondewo.s2t.Wav2VecTriton.prototype.setTritonServerHost = function (value) {
					return jspb.Message.setProto3StringField(this, 5, value);
				};

				/**
				 * optional int64 triton_server_port = 6;
				 * @return {number}
				 */
				proto.ondewo.s2t.Wav2VecTriton.prototype.getTritonServerPort = function () {
					return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.Wav2VecTriton} returns this
				 */
				proto.ondewo.s2t.Wav2VecTriton.prototype.setTritonServerPort = function (value) {
					return jspb.Message.setProto3IntField(this, 6, value);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.PtFiles.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.PtFiles.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.PtFiles} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.PtFiles.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								path: jspb.Message.getFieldWithDefault(msg, 1, ''),
								step: jspb.Message.getFieldWithDefault(msg, 2, '')
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.PtFiles}
				 */
				proto.ondewo.s2t.PtFiles.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.PtFiles();
					return proto.ondewo.s2t.PtFiles.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.PtFiles} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.PtFiles}
				 */
				proto.ondewo.s2t.PtFiles.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setPath(value);
								break;
							case 2:
								var value = /** @type {string} */ (reader.readString());
								msg.setStep(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.PtFiles.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.PtFiles.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.PtFiles} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.PtFiles.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getPath();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
					f = message.getStep();
					if (f.length > 0) {
						writer.writeString(2, f);
					}
				};

				/**
				 * optional string path = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.PtFiles.prototype.getPath = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.PtFiles} returns this
				 */
				proto.ondewo.s2t.PtFiles.prototype.setPath = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * optional string step = 2;
				 * @return {string}
				 */
				proto.ondewo.s2t.PtFiles.prototype.getStep = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.PtFiles} returns this
				 */
				proto.ondewo.s2t.PtFiles.prototype.setStep = function (value) {
					return jspb.Message.setProto3StringField(this, 2, value);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.CkptFile.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.CkptFile.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.CkptFile} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.CkptFile.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								path: jspb.Message.getFieldWithDefault(msg, 1, '')
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.CkptFile}
				 */
				proto.ondewo.s2t.CkptFile.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.CkptFile();
					return proto.ondewo.s2t.CkptFile.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.CkptFile} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.CkptFile}
				 */
				proto.ondewo.s2t.CkptFile.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setPath(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.CkptFile.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.CkptFile.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.CkptFile} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.CkptFile.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getPath();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
				};

				/**
				 * optional string path = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.CkptFile.prototype.getPath = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.CkptFile} returns this
				 */
				proto.ondewo.s2t.CkptFile.prototype.setPath = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.LanguageModels.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.LanguageModels.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.LanguageModels} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.LanguageModels.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								path: jspb.Message.getFieldWithDefault(msg, 1, ''),
								beamSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
								defaultLm: jspb.Message.getFieldWithDefault(msg, 3, ''),
								beamSearchScorerAlpha: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
								beamSearchScorerBeta: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.LanguageModels}
				 */
				proto.ondewo.s2t.LanguageModels.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.LanguageModels();
					return proto.ondewo.s2t.LanguageModels.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.LanguageModels} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.LanguageModels}
				 */
				proto.ondewo.s2t.LanguageModels.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setPath(value);
								break;
							case 2:
								var value = /** @type {number} */ (reader.readInt64());
								msg.setBeamSize(value);
								break;
							case 3:
								var value = /** @type {string} */ (reader.readString());
								msg.setDefaultLm(value);
								break;
							case 4:
								var value = /** @type {number} */ (reader.readFloat());
								msg.setBeamSearchScorerAlpha(value);
								break;
							case 5:
								var value = /** @type {number} */ (reader.readFloat());
								msg.setBeamSearchScorerBeta(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.LanguageModels.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.LanguageModels.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.LanguageModels} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.LanguageModels.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getPath();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
					f = message.getBeamSize();
					if (f !== 0) {
						writer.writeInt64(2, f);
					}
					f = message.getDefaultLm();
					if (f.length > 0) {
						writer.writeString(3, f);
					}
					f = message.getBeamSearchScorerAlpha();
					if (f !== 0.0) {
						writer.writeFloat(4, f);
					}
					f = message.getBeamSearchScorerBeta();
					if (f !== 0.0) {
						writer.writeFloat(5, f);
					}
				};

				/**
				 * optional string path = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.LanguageModels.prototype.getPath = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.LanguageModels} returns this
				 */
				proto.ondewo.s2t.LanguageModels.prototype.setPath = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * optional int64 beam_size = 2;
				 * @return {number}
				 */
				proto.ondewo.s2t.LanguageModels.prototype.getBeamSize = function () {
					return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.LanguageModels} returns this
				 */
				proto.ondewo.s2t.LanguageModels.prototype.setBeamSize = function (value) {
					return jspb.Message.setProto3IntField(this, 2, value);
				};

				/**
				 * optional string default_lm = 3;
				 * @return {string}
				 */
				proto.ondewo.s2t.LanguageModels.prototype.getDefaultLm = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.LanguageModels} returns this
				 */
				proto.ondewo.s2t.LanguageModels.prototype.setDefaultLm = function (value) {
					return jspb.Message.setProto3StringField(this, 3, value);
				};

				/**
				 * optional float beam_search_scorer_alpha = 4;
				 * @return {number}
				 */
				proto.ondewo.s2t.LanguageModels.prototype.getBeamSearchScorerAlpha = function () {
					return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.LanguageModels} returns this
				 */
				proto.ondewo.s2t.LanguageModels.prototype.setBeamSearchScorerAlpha = function (value) {
					return jspb.Message.setProto3FloatField(this, 4, value);
				};

				/**
				 * optional float beam_search_scorer_beta = 5;
				 * @return {number}
				 */
				proto.ondewo.s2t.LanguageModels.prototype.getBeamSearchScorerBeta = function () {
					return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.LanguageModels} returns this
				 */
				proto.ondewo.s2t.LanguageModels.prototype.setBeamSearchScorerBeta = function (value) {
					return jspb.Message.setProto3FloatField(this, 5, value);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.StreamingServer.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.StreamingServer.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.StreamingServer} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.StreamingServer.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								host: jspb.Message.getFieldWithDefault(msg, 1, ''),
								port: jspb.Message.getFieldWithDefault(msg, 2, 0),
								outputStyle: jspb.Message.getFieldWithDefault(msg, 3, ''),
								streamingSpeechRecognition:
									(f = msg.getStreamingSpeechRecognition()) &&
									proto.ondewo.s2t.StreamingSpeechRecognition.toObject(includeInstance, f)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.StreamingServer}
				 */
				proto.ondewo.s2t.StreamingServer.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.StreamingServer();
					return proto.ondewo.s2t.StreamingServer.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.StreamingServer} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.StreamingServer}
				 */
				proto.ondewo.s2t.StreamingServer.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setHost(value);
								break;
							case 2:
								var value = /** @type {number} */ (reader.readInt64());
								msg.setPort(value);
								break;
							case 3:
								var value = /** @type {string} */ (reader.readString());
								msg.setOutputStyle(value);
								break;
							case 4:
								var value = new proto.ondewo.s2t.StreamingSpeechRecognition();
								reader.readMessage(value, proto.ondewo.s2t.StreamingSpeechRecognition.deserializeBinaryFromReader);
								msg.setStreamingSpeechRecognition(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.StreamingServer.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.StreamingServer.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.StreamingServer} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.StreamingServer.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getHost();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
					f = message.getPort();
					if (f !== 0) {
						writer.writeInt64(2, f);
					}
					f = message.getOutputStyle();
					if (f.length > 0) {
						writer.writeString(3, f);
					}
					f = message.getStreamingSpeechRecognition();
					if (f != null) {
						writer.writeMessage(4, f, proto.ondewo.s2t.StreamingSpeechRecognition.serializeBinaryToWriter);
					}
				};

				/**
				 * optional string host = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.StreamingServer.prototype.getHost = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.StreamingServer} returns this
				 */
				proto.ondewo.s2t.StreamingServer.prototype.setHost = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * optional int64 port = 2;
				 * @return {number}
				 */
				proto.ondewo.s2t.StreamingServer.prototype.getPort = function () {
					return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.StreamingServer} returns this
				 */
				proto.ondewo.s2t.StreamingServer.prototype.setPort = function (value) {
					return jspb.Message.setProto3IntField(this, 2, value);
				};

				/**
				 * optional string output_style = 3;
				 * @return {string}
				 */
				proto.ondewo.s2t.StreamingServer.prototype.getOutputStyle = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.StreamingServer} returns this
				 */
				proto.ondewo.s2t.StreamingServer.prototype.setOutputStyle = function (value) {
					return jspb.Message.setProto3StringField(this, 3, value);
				};

				/**
				 * optional StreamingSpeechRecognition streaming_speech_recognition = 4;
				 * @return {?proto.ondewo.s2t.StreamingSpeechRecognition}
				 */
				proto.ondewo.s2t.StreamingServer.prototype.getStreamingSpeechRecognition = function () {
					return /** @type{?proto.ondewo.s2t.StreamingSpeechRecognition} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.StreamingSpeechRecognition, 4)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.StreamingSpeechRecognition|undefined} value
				 * @return {!proto.ondewo.s2t.StreamingServer} returns this
				 */
				proto.ondewo.s2t.StreamingServer.prototype.setStreamingSpeechRecognition = function (value) {
					return jspb.Message.setWrapperField(this, 4, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.StreamingServer} returns this
				 */
				proto.ondewo.s2t.StreamingServer.prototype.clearStreamingSpeechRecognition = function () {
					return this.setStreamingSpeechRecognition(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.StreamingServer.prototype.hasStreamingSpeechRecognition = function () {
					return jspb.Message.getField(this, 4) != null;
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.StreamingSpeechRecognition.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.StreamingSpeechRecognition.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.StreamingSpeechRecognition} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.StreamingSpeechRecognition.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								transcribeNotFinal: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
								decodingMethod: jspb.Message.getFieldWithDefault(msg, 2, ''),
								samplingRate: jspb.Message.getFieldWithDefault(msg, 3, 0),
								minAudioChunkSize: jspb.Message.getFieldWithDefault(msg, 4, 0),
								nextChunkTimeout: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
								turnDetection:
									(f = msg.getTurnDetection()) && proto.ondewo.s2t.TurnDetectionOptions.toObject(includeInstance, f)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.StreamingSpeechRecognition}
				 */
				proto.ondewo.s2t.StreamingSpeechRecognition.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.StreamingSpeechRecognition();
					return proto.ondewo.s2t.StreamingSpeechRecognition.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.StreamingSpeechRecognition} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.StreamingSpeechRecognition}
				 */
				proto.ondewo.s2t.StreamingSpeechRecognition.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setTranscribeNotFinal(value);
								break;
							case 2:
								var value = /** @type {string} */ (reader.readString());
								msg.setDecodingMethod(value);
								break;
							case 3:
								var value = /** @type {number} */ (reader.readInt64());
								msg.setSamplingRate(value);
								break;
							case 4:
								var value = /** @type {number} */ (reader.readInt64());
								msg.setMinAudioChunkSize(value);
								break;
							case 5:
								var value = /** @type {number} */ (reader.readFloat());
								msg.setNextChunkTimeout(value);
								break;
							case 6:
								var value = new proto.ondewo.s2t.TurnDetectionOptions();
								reader.readMessage(value, proto.ondewo.s2t.TurnDetectionOptions.deserializeBinaryFromReader);
								msg.setTurnDetection(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.StreamingSpeechRecognition.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.StreamingSpeechRecognition.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.StreamingSpeechRecognition} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.StreamingSpeechRecognition.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getTranscribeNotFinal();
					if (f) {
						writer.writeBool(1, f);
					}
					f = message.getDecodingMethod();
					if (f.length > 0) {
						writer.writeString(2, f);
					}
					f = message.getSamplingRate();
					if (f !== 0) {
						writer.writeInt64(3, f);
					}
					f = message.getMinAudioChunkSize();
					if (f !== 0) {
						writer.writeInt64(4, f);
					}
					f = message.getNextChunkTimeout();
					if (f !== 0.0) {
						writer.writeFloat(5, f);
					}
					f = message.getTurnDetection();
					if (f != null) {
						writer.writeMessage(6, f, proto.ondewo.s2t.TurnDetectionOptions.serializeBinaryToWriter);
					}
				};

				/**
				 * optional bool transcribe_not_final = 1;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.StreamingSpeechRecognition.prototype.getTranscribeNotFinal = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.StreamingSpeechRecognition} returns this
				 */
				proto.ondewo.s2t.StreamingSpeechRecognition.prototype.setTranscribeNotFinal = function (value) {
					return jspb.Message.setProto3BooleanField(this, 1, value);
				};

				/**
				 * optional string decoding_method = 2;
				 * @return {string}
				 */
				proto.ondewo.s2t.StreamingSpeechRecognition.prototype.getDecodingMethod = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.StreamingSpeechRecognition} returns this
				 */
				proto.ondewo.s2t.StreamingSpeechRecognition.prototype.setDecodingMethod = function (value) {
					return jspb.Message.setProto3StringField(this, 2, value);
				};

				/**
				 * optional int64 sampling_rate = 3;
				 * @return {number}
				 */
				proto.ondewo.s2t.StreamingSpeechRecognition.prototype.getSamplingRate = function () {
					return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.StreamingSpeechRecognition} returns this
				 */
				proto.ondewo.s2t.StreamingSpeechRecognition.prototype.setSamplingRate = function (value) {
					return jspb.Message.setProto3IntField(this, 3, value);
				};

				/**
				 * optional int64 min_audio_chunk_size = 4;
				 * @return {number}
				 */
				proto.ondewo.s2t.StreamingSpeechRecognition.prototype.getMinAudioChunkSize = function () {
					return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.StreamingSpeechRecognition} returns this
				 */
				proto.ondewo.s2t.StreamingSpeechRecognition.prototype.setMinAudioChunkSize = function (value) {
					return jspb.Message.setProto3IntField(this, 4, value);
				};

				/**
				 * optional float next_chunk_timeout = 5;
				 * @return {number}
				 */
				proto.ondewo.s2t.StreamingSpeechRecognition.prototype.getNextChunkTimeout = function () {
					return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.StreamingSpeechRecognition} returns this
				 */
				proto.ondewo.s2t.StreamingSpeechRecognition.prototype.setNextChunkTimeout = function (value) {
					return jspb.Message.setProto3FloatField(this, 5, value);
				};

				/**
				 * optional TurnDetectionOptions turn_detection = 6;
				 * @return {?proto.ondewo.s2t.TurnDetectionOptions}
				 */
				proto.ondewo.s2t.StreamingSpeechRecognition.prototype.getTurnDetection = function () {
					return /** @type{?proto.ondewo.s2t.TurnDetectionOptions} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.TurnDetectionOptions, 6)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.TurnDetectionOptions|undefined} value
				 * @return {!proto.ondewo.s2t.StreamingSpeechRecognition} returns this
				 */
				proto.ondewo.s2t.StreamingSpeechRecognition.prototype.setTurnDetection = function (value) {
					return jspb.Message.setWrapperField(this, 6, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.StreamingSpeechRecognition} returns this
				 */
				proto.ondewo.s2t.StreamingSpeechRecognition.prototype.clearTurnDetection = function () {
					return this.setTurnDetection(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.StreamingSpeechRecognition.prototype.hasTurnDetection = function () {
					return jspb.Message.getField(this, 6) != null;
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.TurnDetectionOptions.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.TurnDetectionOptions.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.TurnDetectionOptions} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.TurnDetectionOptions.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								active: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
								fullUtteranceDeployment: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
								llmHost: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
								llmPort: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
								llmRequestTimeout: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.TurnDetectionOptions}
				 */
				proto.ondewo.s2t.TurnDetectionOptions.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.TurnDetectionOptions();
					return proto.ondewo.s2t.TurnDetectionOptions.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.TurnDetectionOptions} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.TurnDetectionOptions}
				 */
				proto.ondewo.s2t.TurnDetectionOptions.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setActive(value);
								break;
							case 2:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setFullUtteranceDeployment(value);
								break;
							case 3:
								var value = /** @type {string} */ (reader.readString());
								msg.setLlmHost(value);
								break;
							case 4:
								var value = /** @type {number} */ (reader.readInt32());
								msg.setLlmPort(value);
								break;
							case 5:
								var value = /** @type {number} */ (reader.readFloat());
								msg.setLlmRequestTimeout(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.TurnDetectionOptions.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.TurnDetectionOptions.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.TurnDetectionOptions} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.TurnDetectionOptions.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
					if (f != null) {
						writer.writeBool(1, f);
					}
					f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
					if (f != null) {
						writer.writeBool(2, f);
					}
					f = /** @type {string} */ (jspb.Message.getField(message, 3));
					if (f != null) {
						writer.writeString(3, f);
					}
					f = /** @type {number} */ (jspb.Message.getField(message, 4));
					if (f != null) {
						writer.writeInt32(4, f);
					}
					f = /** @type {number} */ (jspb.Message.getField(message, 5));
					if (f != null) {
						writer.writeFloat(5, f);
					}
				};

				/**
				 * optional bool active = 1;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TurnDetectionOptions.prototype.getActive = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.TurnDetectionOptions} returns this
				 */
				proto.ondewo.s2t.TurnDetectionOptions.prototype.setActive = function (value) {
					return jspb.Message.setField(this, 1, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.TurnDetectionOptions} returns this
				 */
				proto.ondewo.s2t.TurnDetectionOptions.prototype.clearActive = function () {
					return jspb.Message.setField(this, 1, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TurnDetectionOptions.prototype.hasActive = function () {
					return jspb.Message.getField(this, 1) != null;
				};

				/**
				 * optional bool full_utterance_deployment = 2;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TurnDetectionOptions.prototype.getFullUtteranceDeployment = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.TurnDetectionOptions} returns this
				 */
				proto.ondewo.s2t.TurnDetectionOptions.prototype.setFullUtteranceDeployment = function (value) {
					return jspb.Message.setField(this, 2, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.TurnDetectionOptions} returns this
				 */
				proto.ondewo.s2t.TurnDetectionOptions.prototype.clearFullUtteranceDeployment = function () {
					return jspb.Message.setField(this, 2, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TurnDetectionOptions.prototype.hasFullUtteranceDeployment = function () {
					return jspb.Message.getField(this, 2) != null;
				};

				/**
				 * optional string llm_host = 3;
				 * @return {string}
				 */
				proto.ondewo.s2t.TurnDetectionOptions.prototype.getLlmHost = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.TurnDetectionOptions} returns this
				 */
				proto.ondewo.s2t.TurnDetectionOptions.prototype.setLlmHost = function (value) {
					return jspb.Message.setField(this, 3, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.TurnDetectionOptions} returns this
				 */
				proto.ondewo.s2t.TurnDetectionOptions.prototype.clearLlmHost = function () {
					return jspb.Message.setField(this, 3, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TurnDetectionOptions.prototype.hasLlmHost = function () {
					return jspb.Message.getField(this, 3) != null;
				};

				/**
				 * optional int32 llm_port = 4;
				 * @return {number}
				 */
				proto.ondewo.s2t.TurnDetectionOptions.prototype.getLlmPort = function () {
					return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.TurnDetectionOptions} returns this
				 */
				proto.ondewo.s2t.TurnDetectionOptions.prototype.setLlmPort = function (value) {
					return jspb.Message.setField(this, 4, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.TurnDetectionOptions} returns this
				 */
				proto.ondewo.s2t.TurnDetectionOptions.prototype.clearLlmPort = function () {
					return jspb.Message.setField(this, 4, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TurnDetectionOptions.prototype.hasLlmPort = function () {
					return jspb.Message.getField(this, 4) != null;
				};

				/**
				 * optional float llm_request_timeout = 5;
				 * @return {number}
				 */
				proto.ondewo.s2t.TurnDetectionOptions.prototype.getLlmRequestTimeout = function () {
					return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.TurnDetectionOptions} returns this
				 */
				proto.ondewo.s2t.TurnDetectionOptions.prototype.setLlmRequestTimeout = function (value) {
					return jspb.Message.setField(this, 5, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.TurnDetectionOptions} returns this
				 */
				proto.ondewo.s2t.TurnDetectionOptions.prototype.clearLlmRequestTimeout = function () {
					return jspb.Message.setField(this, 5, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.TurnDetectionOptions.prototype.hasLlmRequestTimeout = function () {
					return jspb.Message.getField(this, 5) != null;
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.VoiceActivityDetection.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.VoiceActivityDetection.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.VoiceActivityDetection} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.VoiceActivityDetection.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								active: jspb.Message.getFieldWithDefault(msg, 1, ''),
								samplingRate: jspb.Message.getFieldWithDefault(msg, 2, 0),
								pyannote: (f = msg.getPyannote()) && proto.ondewo.s2t.Pyannote.toObject(includeInstance, f)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.VoiceActivityDetection}
				 */
				proto.ondewo.s2t.VoiceActivityDetection.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.VoiceActivityDetection();
					return proto.ondewo.s2t.VoiceActivityDetection.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.VoiceActivityDetection} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.VoiceActivityDetection}
				 */
				proto.ondewo.s2t.VoiceActivityDetection.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setActive(value);
								break;
							case 2:
								var value = /** @type {number} */ (reader.readInt64());
								msg.setSamplingRate(value);
								break;
							case 3:
								var value = new proto.ondewo.s2t.Pyannote();
								reader.readMessage(value, proto.ondewo.s2t.Pyannote.deserializeBinaryFromReader);
								msg.setPyannote(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.VoiceActivityDetection.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.VoiceActivityDetection.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.VoiceActivityDetection} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.VoiceActivityDetection.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getActive();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
					f = message.getSamplingRate();
					if (f !== 0) {
						writer.writeInt64(2, f);
					}
					f = message.getPyannote();
					if (f != null) {
						writer.writeMessage(3, f, proto.ondewo.s2t.Pyannote.serializeBinaryToWriter);
					}
				};

				/**
				 * optional string active = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.VoiceActivityDetection.prototype.getActive = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.VoiceActivityDetection} returns this
				 */
				proto.ondewo.s2t.VoiceActivityDetection.prototype.setActive = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * optional int64 sampling_rate = 2;
				 * @return {number}
				 */
				proto.ondewo.s2t.VoiceActivityDetection.prototype.getSamplingRate = function () {
					return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.VoiceActivityDetection} returns this
				 */
				proto.ondewo.s2t.VoiceActivityDetection.prototype.setSamplingRate = function (value) {
					return jspb.Message.setProto3IntField(this, 2, value);
				};

				/**
				 * optional Pyannote pyannote = 3;
				 * @return {?proto.ondewo.s2t.Pyannote}
				 */
				proto.ondewo.s2t.VoiceActivityDetection.prototype.getPyannote = function () {
					return /** @type{?proto.ondewo.s2t.Pyannote} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.Pyannote, 3)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.Pyannote|undefined} value
				 * @return {!proto.ondewo.s2t.VoiceActivityDetection} returns this
				 */
				proto.ondewo.s2t.VoiceActivityDetection.prototype.setPyannote = function (value) {
					return jspb.Message.setWrapperField(this, 3, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.VoiceActivityDetection} returns this
				 */
				proto.ondewo.s2t.VoiceActivityDetection.prototype.clearPyannote = function () {
					return this.setPyannote(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.VoiceActivityDetection.prototype.hasPyannote = function () {
					return jspb.Message.getField(this, 3) != null;
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.Pyannote.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.Pyannote.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.Pyannote} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.Pyannote.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								modelName: jspb.Message.getFieldWithDefault(msg, 1, ''),
								minAudioSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
								minDurationOff: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
								minDurationOn: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
								tritonServerHost: jspb.Message.getFieldWithDefault(msg, 5, ''),
								tritonServerPort: jspb.Message.getFieldWithDefault(msg, 6, 0)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.Pyannote}
				 */
				proto.ondewo.s2t.Pyannote.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.Pyannote();
					return proto.ondewo.s2t.Pyannote.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.Pyannote} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.Pyannote}
				 */
				proto.ondewo.s2t.Pyannote.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setModelName(value);
								break;
							case 2:
								var value = /** @type {number} */ (reader.readInt64());
								msg.setMinAudioSize(value);
								break;
							case 3:
								var value = /** @type {number} */ (reader.readFloat());
								msg.setMinDurationOff(value);
								break;
							case 4:
								var value = /** @type {number} */ (reader.readFloat());
								msg.setMinDurationOn(value);
								break;
							case 5:
								var value = /** @type {string} */ (reader.readString());
								msg.setTritonServerHost(value);
								break;
							case 6:
								var value = /** @type {number} */ (reader.readInt64());
								msg.setTritonServerPort(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.Pyannote.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.Pyannote.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.Pyannote} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.Pyannote.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getModelName();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
					f = message.getMinAudioSize();
					if (f !== 0) {
						writer.writeInt64(2, f);
					}
					f = message.getMinDurationOff();
					if (f !== 0.0) {
						writer.writeFloat(3, f);
					}
					f = message.getMinDurationOn();
					if (f !== 0.0) {
						writer.writeFloat(4, f);
					}
					f = message.getTritonServerHost();
					if (f.length > 0) {
						writer.writeString(5, f);
					}
					f = message.getTritonServerPort();
					if (f !== 0) {
						writer.writeInt64(6, f);
					}
				};

				/**
				 * optional string model_name = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.Pyannote.prototype.getModelName = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.Pyannote} returns this
				 */
				proto.ondewo.s2t.Pyannote.prototype.setModelName = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * optional int64 min_audio_size = 2;
				 * @return {number}
				 */
				proto.ondewo.s2t.Pyannote.prototype.getMinAudioSize = function () {
					return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.Pyannote} returns this
				 */
				proto.ondewo.s2t.Pyannote.prototype.setMinAudioSize = function (value) {
					return jspb.Message.setProto3IntField(this, 2, value);
				};

				/**
				 * optional float min_duration_off = 3;
				 * @return {number}
				 */
				proto.ondewo.s2t.Pyannote.prototype.getMinDurationOff = function () {
					return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.Pyannote} returns this
				 */
				proto.ondewo.s2t.Pyannote.prototype.setMinDurationOff = function (value) {
					return jspb.Message.setProto3FloatField(this, 3, value);
				};

				/**
				 * optional float min_duration_on = 4;
				 * @return {number}
				 */
				proto.ondewo.s2t.Pyannote.prototype.getMinDurationOn = function () {
					return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.Pyannote} returns this
				 */
				proto.ondewo.s2t.Pyannote.prototype.setMinDurationOn = function (value) {
					return jspb.Message.setProto3FloatField(this, 4, value);
				};

				/**
				 * optional string triton_server_host = 5;
				 * @return {string}
				 */
				proto.ondewo.s2t.Pyannote.prototype.getTritonServerHost = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.Pyannote} returns this
				 */
				proto.ondewo.s2t.Pyannote.prototype.setTritonServerHost = function (value) {
					return jspb.Message.setProto3StringField(this, 5, value);
				};

				/**
				 * optional int64 triton_server_port = 6;
				 * @return {number}
				 */
				proto.ondewo.s2t.Pyannote.prototype.getTritonServerPort = function () {
					return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.Pyannote} returns this
				 */
				proto.ondewo.s2t.Pyannote.prototype.setTritonServerPort = function (value) {
					return jspb.Message.setProto3IntField(this, 6, value);
				};

				/**
				 * List of repeated fields within this message type.
				 * @private {!Array<number>}
				 * @const
				 */
				proto.ondewo.s2t.PostProcessing.repeatedFields_ = [1];

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.PostProcessing.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.PostProcessing.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.PostProcessing} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.PostProcessing.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								pipelineList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
								postProcessors:
									(f = msg.getPostProcessors()) && proto.ondewo.s2t.PostProcessors.toObject(includeInstance, f)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.PostProcessing}
				 */
				proto.ondewo.s2t.PostProcessing.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.PostProcessing();
					return proto.ondewo.s2t.PostProcessing.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.PostProcessing} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.PostProcessing}
				 */
				proto.ondewo.s2t.PostProcessing.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.addPipeline(value);
								break;
							case 2:
								var value = new proto.ondewo.s2t.PostProcessors();
								reader.readMessage(value, proto.ondewo.s2t.PostProcessors.deserializeBinaryFromReader);
								msg.setPostProcessors(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.PostProcessing.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.PostProcessing.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.PostProcessing} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.PostProcessing.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getPipelineList();
					if (f.length > 0) {
						writer.writeRepeatedString(1, f);
					}
					f = message.getPostProcessors();
					if (f != null) {
						writer.writeMessage(2, f, proto.ondewo.s2t.PostProcessors.serializeBinaryToWriter);
					}
				};

				/**
				 * repeated string pipeline = 1;
				 * @return {!Array<string>}
				 */
				proto.ondewo.s2t.PostProcessing.prototype.getPipelineList = function () {
					return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
				};

				/**
				 * @param {!Array<string>} value
				 * @return {!proto.ondewo.s2t.PostProcessing} returns this
				 */
				proto.ondewo.s2t.PostProcessing.prototype.setPipelineList = function (value) {
					return jspb.Message.setField(this, 1, value || []);
				};

				/**
				 * @param {string} value
				 * @param {number=} opt_index
				 * @return {!proto.ondewo.s2t.PostProcessing} returns this
				 */
				proto.ondewo.s2t.PostProcessing.prototype.addPipeline = function (value, opt_index) {
					return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
				};

				/**
				 * Clears the list making it empty but non-null.
				 * @return {!proto.ondewo.s2t.PostProcessing} returns this
				 */
				proto.ondewo.s2t.PostProcessing.prototype.clearPipelineList = function () {
					return this.setPipelineList([]);
				};

				/**
				 * optional PostProcessors post_processors = 2;
				 * @return {?proto.ondewo.s2t.PostProcessors}
				 */
				proto.ondewo.s2t.PostProcessing.prototype.getPostProcessors = function () {
					return /** @type{?proto.ondewo.s2t.PostProcessors} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.PostProcessors, 2)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.PostProcessors|undefined} value
				 * @return {!proto.ondewo.s2t.PostProcessing} returns this
				 */
				proto.ondewo.s2t.PostProcessing.prototype.setPostProcessors = function (value) {
					return jspb.Message.setWrapperField(this, 2, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.PostProcessing} returns this
				 */
				proto.ondewo.s2t.PostProcessing.prototype.clearPostProcessors = function () {
					return this.setPostProcessors(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.PostProcessing.prototype.hasPostProcessors = function () {
					return jspb.Message.getField(this, 2) != null;
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.PostProcessors.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.PostProcessors.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.PostProcessors} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.PostProcessors.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								symSpell: (f = msg.getSymSpell()) && proto.ondewo.s2t.SymSpell.toObject(includeInstance, f),
								normalization:
									(f = msg.getNormalization()) && proto.ondewo.s2t.S2tNormalization.toObject(includeInstance, f),
								llmPostProcessing:
									(f = msg.getLlmPostProcessing()) && proto.ondewo.s2t.S2tLlmPostProcessing.toObject(includeInstance, f)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.PostProcessors}
				 */
				proto.ondewo.s2t.PostProcessors.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.PostProcessors();
					return proto.ondewo.s2t.PostProcessors.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.PostProcessors} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.PostProcessors}
				 */
				proto.ondewo.s2t.PostProcessors.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = new proto.ondewo.s2t.SymSpell();
								reader.readMessage(value, proto.ondewo.s2t.SymSpell.deserializeBinaryFromReader);
								msg.setSymSpell(value);
								break;
							case 2:
								var value = new proto.ondewo.s2t.S2tNormalization();
								reader.readMessage(value, proto.ondewo.s2t.S2tNormalization.deserializeBinaryFromReader);
								msg.setNormalization(value);
								break;
							case 3:
								var value = new proto.ondewo.s2t.S2tLlmPostProcessing();
								reader.readMessage(value, proto.ondewo.s2t.S2tLlmPostProcessing.deserializeBinaryFromReader);
								msg.setLlmPostProcessing(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.PostProcessors.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.PostProcessors.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.PostProcessors} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.PostProcessors.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getSymSpell();
					if (f != null) {
						writer.writeMessage(1, f, proto.ondewo.s2t.SymSpell.serializeBinaryToWriter);
					}
					f = message.getNormalization();
					if (f != null) {
						writer.writeMessage(2, f, proto.ondewo.s2t.S2tNormalization.serializeBinaryToWriter);
					}
					f = message.getLlmPostProcessing();
					if (f != null) {
						writer.writeMessage(3, f, proto.ondewo.s2t.S2tLlmPostProcessing.serializeBinaryToWriter);
					}
				};

				/**
				 * optional SymSpell sym_spell = 1;
				 * @return {?proto.ondewo.s2t.SymSpell}
				 */
				proto.ondewo.s2t.PostProcessors.prototype.getSymSpell = function () {
					return /** @type{?proto.ondewo.s2t.SymSpell} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.SymSpell, 1)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.SymSpell|undefined} value
				 * @return {!proto.ondewo.s2t.PostProcessors} returns this
				 */
				proto.ondewo.s2t.PostProcessors.prototype.setSymSpell = function (value) {
					return jspb.Message.setWrapperField(this, 1, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.PostProcessors} returns this
				 */
				proto.ondewo.s2t.PostProcessors.prototype.clearSymSpell = function () {
					return this.setSymSpell(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.PostProcessors.prototype.hasSymSpell = function () {
					return jspb.Message.getField(this, 1) != null;
				};

				/**
				 * optional S2tNormalization normalization = 2;
				 * @return {?proto.ondewo.s2t.S2tNormalization}
				 */
				proto.ondewo.s2t.PostProcessors.prototype.getNormalization = function () {
					return /** @type{?proto.ondewo.s2t.S2tNormalization} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.S2tNormalization, 2)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.S2tNormalization|undefined} value
				 * @return {!proto.ondewo.s2t.PostProcessors} returns this
				 */
				proto.ondewo.s2t.PostProcessors.prototype.setNormalization = function (value) {
					return jspb.Message.setWrapperField(this, 2, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.PostProcessors} returns this
				 */
				proto.ondewo.s2t.PostProcessors.prototype.clearNormalization = function () {
					return this.setNormalization(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.PostProcessors.prototype.hasNormalization = function () {
					return jspb.Message.getField(this, 2) != null;
				};

				/**
				 * optional S2tLlmPostProcessing llm_post_processing = 3;
				 * @return {?proto.ondewo.s2t.S2tLlmPostProcessing}
				 */
				proto.ondewo.s2t.PostProcessors.prototype.getLlmPostProcessing = function () {
					return /** @type{?proto.ondewo.s2t.S2tLlmPostProcessing} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.S2tLlmPostProcessing, 3)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.S2tLlmPostProcessing|undefined} value
				 * @return {!proto.ondewo.s2t.PostProcessors} returns this
				 */
				proto.ondewo.s2t.PostProcessors.prototype.setLlmPostProcessing = function (value) {
					return jspb.Message.setWrapperField(this, 3, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.PostProcessors} returns this
				 */
				proto.ondewo.s2t.PostProcessors.prototype.clearLlmPostProcessing = function () {
					return this.setLlmPostProcessing(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.PostProcessors.prototype.hasLlmPostProcessing = function () {
					return jspb.Message.getField(this, 3) != null;
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.SymSpell.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.SymSpell.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.SymSpell} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.SymSpell.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								dictPath: jspb.Message.getFieldWithDefault(msg, 1, ''),
								maxDictionaryEditDistance: jspb.Message.getFieldWithDefault(msg, 2, 0),
								prefixLength: jspb.Message.getFieldWithDefault(msg, 3, 0)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.SymSpell}
				 */
				proto.ondewo.s2t.SymSpell.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.SymSpell();
					return proto.ondewo.s2t.SymSpell.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.SymSpell} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.SymSpell}
				 */
				proto.ondewo.s2t.SymSpell.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setDictPath(value);
								break;
							case 2:
								var value = /** @type {number} */ (reader.readInt64());
								msg.setMaxDictionaryEditDistance(value);
								break;
							case 3:
								var value = /** @type {number} */ (reader.readInt64());
								msg.setPrefixLength(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.SymSpell.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.SymSpell.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.SymSpell} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.SymSpell.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getDictPath();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
					f = message.getMaxDictionaryEditDistance();
					if (f !== 0) {
						writer.writeInt64(2, f);
					}
					f = message.getPrefixLength();
					if (f !== 0) {
						writer.writeInt64(3, f);
					}
				};

				/**
				 * optional string dict_path = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.SymSpell.prototype.getDictPath = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.SymSpell} returns this
				 */
				proto.ondewo.s2t.SymSpell.prototype.setDictPath = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * optional int64 max_dictionary_edit_distance = 2;
				 * @return {number}
				 */
				proto.ondewo.s2t.SymSpell.prototype.getMaxDictionaryEditDistance = function () {
					return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.SymSpell} returns this
				 */
				proto.ondewo.s2t.SymSpell.prototype.setMaxDictionaryEditDistance = function (value) {
					return jspb.Message.setProto3IntField(this, 2, value);
				};

				/**
				 * optional int64 prefix_length = 3;
				 * @return {number}
				 */
				proto.ondewo.s2t.SymSpell.prototype.getPrefixLength = function () {
					return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.SymSpell} returns this
				 */
				proto.ondewo.s2t.SymSpell.prototype.setPrefixLength = function (value) {
					return jspb.Message.setProto3IntField(this, 3, value);
				};

				/**
				 * List of repeated fields within this message type.
				 * @private {!Array<number>}
				 * @const
				 */
				proto.ondewo.s2t.S2tNormalization.repeatedFields_ = [2];

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.S2tNormalization.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.S2tNormalization.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.S2tNormalization} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.S2tNormalization.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								language: jspb.Message.getFieldWithDefault(msg, 1, ''),
								pipelineList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.S2tNormalization}
				 */
				proto.ondewo.s2t.S2tNormalization.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.S2tNormalization();
					return proto.ondewo.s2t.S2tNormalization.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.S2tNormalization} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.S2tNormalization}
				 */
				proto.ondewo.s2t.S2tNormalization.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setLanguage(value);
								break;
							case 2:
								var value = /** @type {string} */ (reader.readString());
								msg.addPipeline(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.S2tNormalization.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.S2tNormalization.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.S2tNormalization} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.S2tNormalization.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getLanguage();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
					f = message.getPipelineList();
					if (f.length > 0) {
						writer.writeRepeatedString(2, f);
					}
				};

				/**
				 * optional string language = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.S2tNormalization.prototype.getLanguage = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.S2tNormalization} returns this
				 */
				proto.ondewo.s2t.S2tNormalization.prototype.setLanguage = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * repeated string pipeline = 2;
				 * @return {!Array<string>}
				 */
				proto.ondewo.s2t.S2tNormalization.prototype.getPipelineList = function () {
					return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
				};

				/**
				 * @param {!Array<string>} value
				 * @return {!proto.ondewo.s2t.S2tNormalization} returns this
				 */
				proto.ondewo.s2t.S2tNormalization.prototype.setPipelineList = function (value) {
					return jspb.Message.setField(this, 2, value || []);
				};

				/**
				 * @param {string} value
				 * @param {number=} opt_index
				 * @return {!proto.ondewo.s2t.S2tNormalization} returns this
				 */
				proto.ondewo.s2t.S2tNormalization.prototype.addPipeline = function (value, opt_index) {
					return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
				};

				/**
				 * Clears the list making it empty but non-null.
				 * @return {!proto.ondewo.s2t.S2tNormalization} returns this
				 */
				proto.ondewo.s2t.S2tNormalization.prototype.clearPipelineList = function () {
					return this.setPipelineList([]);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.S2tLlmPostProcessing.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.S2tLlmPostProcessing.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.S2tLlmPostProcessing} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.S2tLlmPostProcessing.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								llmHost: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
								llmPort: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
								llmRequestTimeout: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
								s2tLlmPostProcessingCasingOptions:
									(f = msg.getS2tLlmPostProcessingCasingOptions()) &&
									proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions.toObject(includeInstance, f),
								s2tLlmPostProcessingPunctuationOptions:
									(f = msg.getS2tLlmPostProcessingPunctuationOptions()) &&
									proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions.toObject(includeInstance, f),
								s2tLlmPostProcessingSpellingCorrectionOptions:
									(f = msg.getS2tLlmPostProcessingSpellingCorrectionOptions()) &&
									proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions.toObject(includeInstance, f),
								s2tLlmPostProcessingSemanticCorrectionOptions:
									(f = msg.getS2tLlmPostProcessingSemanticCorrectionOptions()) &&
									proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions.toObject(includeInstance, f),
								s2tLlmPostProcessingTranslationOptions:
									(f = msg.getS2tLlmPostProcessingTranslationOptions()) &&
									proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions.toObject(includeInstance, f),
								s2tLlmPostProcessingInverseNormalizationOptions:
									(f = msg.getS2tLlmPostProcessingInverseNormalizationOptions()) &&
									proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.toObject(includeInstance, f),
								s2tLlmPostProcessingNormalizationOptions:
									(f = msg.getS2tLlmPostProcessingNormalizationOptions()) &&
									proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.toObject(includeInstance, f),
								s2tLlmPostProcessingSummarizationOptions:
									(f = msg.getS2tLlmPostProcessingSummarizationOptions()) &&
									proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions.toObject(includeInstance, f),
								s2tLlmPostProcessingUserPromptOptions:
									(f = msg.getS2tLlmPostProcessingUserPromptOptions()) &&
									proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions.toObject(includeInstance, f)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessing}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.S2tLlmPostProcessing();
					return proto.ondewo.s2t.S2tLlmPostProcessing.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.S2tLlmPostProcessing} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessing}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setLlmHost(value);
								break;
							case 2:
								var value = /** @type {number} */ (reader.readInt32());
								msg.setLlmPort(value);
								break;
							case 3:
								var value = /** @type {number} */ (reader.readFloat());
								msg.setLlmRequestTimeout(value);
								break;
							case 4:
								var value = new proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions();
								reader.readMessage(
									value,
									proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions.deserializeBinaryFromReader
								);
								msg.setS2tLlmPostProcessingCasingOptions(value);
								break;
							case 5:
								var value = new proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions();
								reader.readMessage(
									value,
									proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions.deserializeBinaryFromReader
								);
								msg.setS2tLlmPostProcessingPunctuationOptions(value);
								break;
							case 6:
								var value = new proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions();
								reader.readMessage(
									value,
									proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions.deserializeBinaryFromReader
								);
								msg.setS2tLlmPostProcessingSpellingCorrectionOptions(value);
								break;
							case 7:
								var value = new proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions();
								reader.readMessage(
									value,
									proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions.deserializeBinaryFromReader
								);
								msg.setS2tLlmPostProcessingSemanticCorrectionOptions(value);
								break;
							case 8:
								var value = new proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions();
								reader.readMessage(
									value,
									proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions.deserializeBinaryFromReader
								);
								msg.setS2tLlmPostProcessingTranslationOptions(value);
								break;
							case 9:
								var value = new proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions();
								reader.readMessage(
									value,
									proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.deserializeBinaryFromReader
								);
								msg.setS2tLlmPostProcessingInverseNormalizationOptions(value);
								break;
							case 10:
								var value = new proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions();
								reader.readMessage(
									value,
									proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.deserializeBinaryFromReader
								);
								msg.setS2tLlmPostProcessingNormalizationOptions(value);
								break;
							case 11:
								var value = new proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions();
								reader.readMessage(
									value,
									proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions.deserializeBinaryFromReader
								);
								msg.setS2tLlmPostProcessingSummarizationOptions(value);
								break;
							case 12:
								var value = new proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions();
								reader.readMessage(
									value,
									proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions.deserializeBinaryFromReader
								);
								msg.setS2tLlmPostProcessingUserPromptOptions(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.S2tLlmPostProcessing.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.S2tLlmPostProcessing} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = /** @type {string} */ (jspb.Message.getField(message, 1));
					if (f != null) {
						writer.writeString(1, f);
					}
					f = /** @type {number} */ (jspb.Message.getField(message, 2));
					if (f != null) {
						writer.writeInt32(2, f);
					}
					f = /** @type {number} */ (jspb.Message.getField(message, 3));
					if (f != null) {
						writer.writeFloat(3, f);
					}
					f = message.getS2tLlmPostProcessingCasingOptions();
					if (f != null) {
						writer.writeMessage(4, f, proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions.serializeBinaryToWriter);
					}
					f = message.getS2tLlmPostProcessingPunctuationOptions();
					if (f != null) {
						writer.writeMessage(5, f, proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions.serializeBinaryToWriter);
					}
					f = message.getS2tLlmPostProcessingSpellingCorrectionOptions();
					if (f != null) {
						writer.writeMessage(
							6,
							f,
							proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions.serializeBinaryToWriter
						);
					}
					f = message.getS2tLlmPostProcessingSemanticCorrectionOptions();
					if (f != null) {
						writer.writeMessage(
							7,
							f,
							proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions.serializeBinaryToWriter
						);
					}
					f = message.getS2tLlmPostProcessingTranslationOptions();
					if (f != null) {
						writer.writeMessage(8, f, proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions.serializeBinaryToWriter);
					}
					f = message.getS2tLlmPostProcessingInverseNormalizationOptions();
					if (f != null) {
						writer.writeMessage(
							9,
							f,
							proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.serializeBinaryToWriter
						);
					}
					f = message.getS2tLlmPostProcessingNormalizationOptions();
					if (f != null) {
						writer.writeMessage(
							10,
							f,
							proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.serializeBinaryToWriter
						);
					}
					f = message.getS2tLlmPostProcessingSummarizationOptions();
					if (f != null) {
						writer.writeMessage(
							11,
							f,
							proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions.serializeBinaryToWriter
						);
					}
					f = message.getS2tLlmPostProcessingUserPromptOptions();
					if (f != null) {
						writer.writeMessage(12, f, proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions.serializeBinaryToWriter);
					}
				};

				/**
				 * optional string llm_host = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.getLlmHost = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessing} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.setLlmHost = function (value) {
					return jspb.Message.setField(this, 1, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessing} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.clearLlmHost = function () {
					return jspb.Message.setField(this, 1, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.hasLlmHost = function () {
					return jspb.Message.getField(this, 1) != null;
				};

				/**
				 * optional int32 llm_port = 2;
				 * @return {number}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.getLlmPort = function () {
					return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessing} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.setLlmPort = function (value) {
					return jspb.Message.setField(this, 2, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessing} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.clearLlmPort = function () {
					return jspb.Message.setField(this, 2, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.hasLlmPort = function () {
					return jspb.Message.getField(this, 2) != null;
				};

				/**
				 * optional float llm_request_timeout = 3;
				 * @return {number}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.getLlmRequestTimeout = function () {
					return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessing} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.setLlmRequestTimeout = function (value) {
					return jspb.Message.setField(this, 3, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessing} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.clearLlmRequestTimeout = function () {
					return jspb.Message.setField(this, 3, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.hasLlmRequestTimeout = function () {
					return jspb.Message.getField(this, 3) != null;
				};

				/**
				 * optional S2tLlmPostProcessingCasingOptions s2t_llm_post_processing_casing_options = 4;
				 * @return {?proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.getS2tLlmPostProcessingCasingOptions = function () {
					return /** @type{?proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions, 4)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions|undefined} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessing} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.setS2tLlmPostProcessingCasingOptions = function (value) {
					return jspb.Message.setWrapperField(this, 4, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessing} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.clearS2tLlmPostProcessingCasingOptions = function () {
					return this.setS2tLlmPostProcessingCasingOptions(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.hasS2tLlmPostProcessingCasingOptions = function () {
					return jspb.Message.getField(this, 4) != null;
				};

				/**
				 * optional S2tLlmPostProcessingPunctuationOptions s2t_llm_post_processing_punctuation_options = 5;
				 * @return {?proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.getS2tLlmPostProcessingPunctuationOptions = function () {
					return /** @type{?proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions, 5)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions|undefined} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessing} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.setS2tLlmPostProcessingPunctuationOptions = function (value) {
					return jspb.Message.setWrapperField(this, 5, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessing} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.clearS2tLlmPostProcessingPunctuationOptions = function () {
					return this.setS2tLlmPostProcessingPunctuationOptions(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.hasS2tLlmPostProcessingPunctuationOptions = function () {
					return jspb.Message.getField(this, 5) != null;
				};

				/**
				 * optional S2tLlmPostProcessingSpellCorrectionOptions s2t_llm_post_processing_spelling_correction_options = 6;
				 * @return {?proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.getS2tLlmPostProcessingSpellingCorrectionOptions = function () {
					return /** @type{?proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions, 6)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions|undefined} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessing} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.setS2tLlmPostProcessingSpellingCorrectionOptions = function (
					value
				) {
					return jspb.Message.setWrapperField(this, 6, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessing} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.clearS2tLlmPostProcessingSpellingCorrectionOptions =
					function () {
						return this.setS2tLlmPostProcessingSpellingCorrectionOptions(undefined);
					};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.hasS2tLlmPostProcessingSpellingCorrectionOptions = function () {
					return jspb.Message.getField(this, 6) != null;
				};

				/**
				 * optional S2tLlmPostProcessingSemanticCorrectionOptions s2t_llm_post_processing_semantic_correction_options = 7;
				 * @return {?proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.getS2tLlmPostProcessingSemanticCorrectionOptions = function () {
					return /** @type{?proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions, 7)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions|undefined} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessing} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.setS2tLlmPostProcessingSemanticCorrectionOptions = function (
					value
				) {
					return jspb.Message.setWrapperField(this, 7, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessing} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.clearS2tLlmPostProcessingSemanticCorrectionOptions =
					function () {
						return this.setS2tLlmPostProcessingSemanticCorrectionOptions(undefined);
					};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.hasS2tLlmPostProcessingSemanticCorrectionOptions = function () {
					return jspb.Message.getField(this, 7) != null;
				};

				/**
				 * optional S2tLlmPostProcessingTranslationOptions s2t_llm_post_processing_translation_options = 8;
				 * @return {?proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.getS2tLlmPostProcessingTranslationOptions = function () {
					return /** @type{?proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions, 8)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions|undefined} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessing} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.setS2tLlmPostProcessingTranslationOptions = function (value) {
					return jspb.Message.setWrapperField(this, 8, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessing} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.clearS2tLlmPostProcessingTranslationOptions = function () {
					return this.setS2tLlmPostProcessingTranslationOptions(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.hasS2tLlmPostProcessingTranslationOptions = function () {
					return jspb.Message.getField(this, 8) != null;
				};

				/**
				 * optional S2tLlmPostProcessingInverseNormalizationOptions s2t_llm_post_processing_inverse_normalization_options = 9;
				 * @return {?proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.getS2tLlmPostProcessingInverseNormalizationOptions =
					function () {
						return /** @type{?proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions} */ (
							jspb.Message.getWrapperField(this, proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions, 9)
						);
					};

				/**
				 * @param {?proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions|undefined} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessing} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.setS2tLlmPostProcessingInverseNormalizationOptions = function (
					value
				) {
					return jspb.Message.setWrapperField(this, 9, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessing} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.clearS2tLlmPostProcessingInverseNormalizationOptions =
					function () {
						return this.setS2tLlmPostProcessingInverseNormalizationOptions(undefined);
					};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.hasS2tLlmPostProcessingInverseNormalizationOptions =
					function () {
						return jspb.Message.getField(this, 9) != null;
					};

				/**
				 * optional S2tLlmPostProcessingNormalizationOptions s2t_llm_post_processing_normalization_options = 10;
				 * @return {?proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.getS2tLlmPostProcessingNormalizationOptions = function () {
					return /** @type{?proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions, 10)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions|undefined} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessing} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.setS2tLlmPostProcessingNormalizationOptions = function (value) {
					return jspb.Message.setWrapperField(this, 10, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessing} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.clearS2tLlmPostProcessingNormalizationOptions = function () {
					return this.setS2tLlmPostProcessingNormalizationOptions(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.hasS2tLlmPostProcessingNormalizationOptions = function () {
					return jspb.Message.getField(this, 10) != null;
				};

				/**
				 * optional S2tLlmPostProcessingSummarizationOptions s2t_llm_post_processing_summarization_options = 11;
				 * @return {?proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.getS2tLlmPostProcessingSummarizationOptions = function () {
					return /** @type{?proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions, 11)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions|undefined} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessing} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.setS2tLlmPostProcessingSummarizationOptions = function (value) {
					return jspb.Message.setWrapperField(this, 11, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessing} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.clearS2tLlmPostProcessingSummarizationOptions = function () {
					return this.setS2tLlmPostProcessingSummarizationOptions(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.hasS2tLlmPostProcessingSummarizationOptions = function () {
					return jspb.Message.getField(this, 11) != null;
				};

				/**
				 * optional S2tLlmPostProcessingUserPromptOptions s2t_llm_post_processing_user_prompt_options = 12;
				 * @return {?proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.getS2tLlmPostProcessingUserPromptOptions = function () {
					return /** @type{?proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions} */ (
						jspb.Message.getWrapperField(this, proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions, 12)
					);
				};

				/**
				 * @param {?proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions|undefined} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessing} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.setS2tLlmPostProcessingUserPromptOptions = function (value) {
					return jspb.Message.setWrapperField(this, 12, value);
				};

				/**
				 * Clears the message field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessing} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.clearS2tLlmPostProcessingUserPromptOptions = function () {
					return this.setS2tLlmPostProcessingUserPromptOptions(undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessing.prototype.hasS2tLlmPostProcessingUserPromptOptions = function () {
					return jspb.Message.getField(this, 12) != null;
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								active: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions();
					return proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setActive(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
					if (f != null) {
						writer.writeBool(1, f);
					}
				};

				/**
				 * optional bool active = 1;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions.prototype.getActive = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions.prototype.setActive = function (value) {
					return jspb.Message.setField(this, 1, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions.prototype.clearActive = function () {
					return jspb.Message.setField(this, 1, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingCasingOptions.prototype.hasActive = function () {
					return jspb.Message.getField(this, 1) != null;
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								active: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions();
					return proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setActive(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
					if (f != null) {
						writer.writeBool(1, f);
					}
				};

				/**
				 * optional bool active = 1;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions.prototype.getActive = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions.prototype.setActive = function (value) {
					return jspb.Message.setField(this, 1, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions.prototype.clearActive = function () {
					return jspb.Message.setField(this, 1, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingPunctuationOptions.prototype.hasActive = function () {
					return jspb.Message.getField(this, 1) != null;
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions.prototype.toObject = function (
						opt_includeInstance
					) {
						return proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								active: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions();
					return proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions.deserializeBinaryFromReader = function (
					msg,
					reader
				) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setActive(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions.serializeBinaryToWriter = function (
					message,
					writer
				) {
					var f = undefined;
					f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
					if (f != null) {
						writer.writeBool(1, f);
					}
				};

				/**
				 * optional bool active = 1;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions.prototype.getActive = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions.prototype.setActive = function (value) {
					return jspb.Message.setField(this, 1, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions.prototype.clearActive = function () {
					return jspb.Message.setField(this, 1, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSpellCorrectionOptions.prototype.hasActive = function () {
					return jspb.Message.getField(this, 1) != null;
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions.prototype.toObject = function (
						opt_includeInstance
					) {
						return proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								active: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions();
					return proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions.deserializeBinaryFromReader(
						msg,
						reader
					);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions.deserializeBinaryFromReader = function (
					msg,
					reader
				) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setActive(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions.serializeBinaryToWriter = function (
					message,
					writer
				) {
					var f = undefined;
					f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
					if (f != null) {
						writer.writeBool(1, f);
					}
				};

				/**
				 * optional bool active = 1;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions.prototype.getActive = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions.prototype.setActive = function (value) {
					return jspb.Message.setField(this, 1, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions.prototype.clearActive = function () {
					return jspb.Message.setField(this, 1, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSemanticCorrectionOptions.prototype.hasActive = function () {
					return jspb.Message.getField(this, 1) != null;
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								active: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
								language: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions();
					return proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setActive(value);
								break;
							case 2:
								var value = /** @type {string} */ (reader.readString());
								msg.setLanguage(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
					if (f != null) {
						writer.writeBool(1, f);
					}
					f = /** @type {string} */ (jspb.Message.getField(message, 2));
					if (f != null) {
						writer.writeString(2, f);
					}
				};

				/**
				 * optional bool active = 1;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions.prototype.getActive = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions.prototype.setActive = function (value) {
					return jspb.Message.setField(this, 1, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions.prototype.clearActive = function () {
					return jspb.Message.setField(this, 1, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions.prototype.hasActive = function () {
					return jspb.Message.getField(this, 1) != null;
				};

				/**
				 * optional string language = 2;
				 * @return {string}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions.prototype.getLanguage = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions.prototype.setLanguage = function (value) {
					return jspb.Message.setField(this, 2, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions.prototype.clearLanguage = function () {
					return jspb.Message.setField(this, 2, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingTranslationOptions.prototype.hasLanguage = function () {
					return jspb.Message.getField(this, 2) != null;
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.toObject = function (
						opt_includeInstance
					) {
						return proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								active: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
								email: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
								phoneNumber: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
								dateAndTime: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f,
								creditCardNumber: (f = jspb.Message.getBooleanField(msg, 5)) == null ? undefined : f,
								socialSecurityNumber: (f = jspb.Message.getBooleanField(msg, 6)) == null ? undefined : f,
								timeZone: (f = jspb.Message.getBooleanField(msg, 7)) == null ? undefined : f
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions();
					return proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.deserializeBinaryFromReader(
						msg,
						reader
					);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.deserializeBinaryFromReader = function (
					msg,
					reader
				) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setActive(value);
								break;
							case 2:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setEmail(value);
								break;
							case 3:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setPhoneNumber(value);
								break;
							case 4:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setDateAndTime(value);
								break;
							case 5:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setCreditCardNumber(value);
								break;
							case 6:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setSocialSecurityNumber(value);
								break;
							case 7:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setTimeZone(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.serializeBinaryToWriter = function (
					message,
					writer
				) {
					var f = undefined;
					f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
					if (f != null) {
						writer.writeBool(1, f);
					}
					f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
					if (f != null) {
						writer.writeBool(2, f);
					}
					f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
					if (f != null) {
						writer.writeBool(3, f);
					}
					f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
					if (f != null) {
						writer.writeBool(4, f);
					}
					f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
					if (f != null) {
						writer.writeBool(5, f);
					}
					f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
					if (f != null) {
						writer.writeBool(6, f);
					}
					f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
					if (f != null) {
						writer.writeBool(7, f);
					}
				};

				/**
				 * optional bool active = 1;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.getActive = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.setActive = function (value) {
					return jspb.Message.setField(this, 1, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.clearActive = function () {
					return jspb.Message.setField(this, 1, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.hasActive = function () {
					return jspb.Message.getField(this, 1) != null;
				};

				/**
				 * optional bool email = 2;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.getEmail = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.setEmail = function (value) {
					return jspb.Message.setField(this, 2, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.clearEmail = function () {
					return jspb.Message.setField(this, 2, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.hasEmail = function () {
					return jspb.Message.getField(this, 2) != null;
				};

				/**
				 * optional bool phone_number = 3;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.getPhoneNumber = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.setPhoneNumber = function (value) {
					return jspb.Message.setField(this, 3, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.clearPhoneNumber = function () {
					return jspb.Message.setField(this, 3, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.hasPhoneNumber = function () {
					return jspb.Message.getField(this, 3) != null;
				};

				/**
				 * optional bool date_and_time = 4;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.getDateAndTime = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.setDateAndTime = function (value) {
					return jspb.Message.setField(this, 4, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.clearDateAndTime = function () {
					return jspb.Message.setField(this, 4, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.hasDateAndTime = function () {
					return jspb.Message.getField(this, 4) != null;
				};

				/**
				 * optional bool credit_card_number = 5;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.getCreditCardNumber = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.setCreditCardNumber = function (
					value
				) {
					return jspb.Message.setField(this, 5, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.clearCreditCardNumber = function () {
					return jspb.Message.setField(this, 5, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.hasCreditCardNumber = function () {
					return jspb.Message.getField(this, 5) != null;
				};

				/**
				 * optional bool social_security_number = 6;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.getSocialSecurityNumber =
					function () {
						return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
					};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.setSocialSecurityNumber = function (
					value
				) {
					return jspb.Message.setField(this, 6, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.clearSocialSecurityNumber =
					function () {
						return jspb.Message.setField(this, 6, undefined);
					};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.hasSocialSecurityNumber =
					function () {
						return jspb.Message.getField(this, 6) != null;
					};

				/**
				 * optional bool time_zone = 7;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.getTimeZone = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.setTimeZone = function (value) {
					return jspb.Message.setField(this, 7, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.clearTimeZone = function () {
					return jspb.Message.setField(this, 7, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingInverseNormalizationOptions.prototype.hasTimeZone = function () {
					return jspb.Message.getField(this, 7) != null;
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.toObject = function (
						opt_includeInstance
					) {
						return proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								active: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
								email: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
								phoneNumber: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
								dateAndTime: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f,
								creditCardNumber: (f = jspb.Message.getBooleanField(msg, 5)) == null ? undefined : f,
								socialSecurityNumber: (f = jspb.Message.getBooleanField(msg, 6)) == null ? undefined : f,
								timeZone: (f = jspb.Message.getBooleanField(msg, 7)) == null ? undefined : f
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions();
					return proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setActive(value);
								break;
							case 2:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setEmail(value);
								break;
							case 3:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setPhoneNumber(value);
								break;
							case 4:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setDateAndTime(value);
								break;
							case 5:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setCreditCardNumber(value);
								break;
							case 6:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setSocialSecurityNumber(value);
								break;
							case 7:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setTimeZone(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
					if (f != null) {
						writer.writeBool(1, f);
					}
					f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
					if (f != null) {
						writer.writeBool(2, f);
					}
					f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
					if (f != null) {
						writer.writeBool(3, f);
					}
					f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
					if (f != null) {
						writer.writeBool(4, f);
					}
					f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
					if (f != null) {
						writer.writeBool(5, f);
					}
					f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
					if (f != null) {
						writer.writeBool(6, f);
					}
					f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
					if (f != null) {
						writer.writeBool(7, f);
					}
				};

				/**
				 * optional bool active = 1;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.getActive = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.setActive = function (value) {
					return jspb.Message.setField(this, 1, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.clearActive = function () {
					return jspb.Message.setField(this, 1, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.hasActive = function () {
					return jspb.Message.getField(this, 1) != null;
				};

				/**
				 * optional bool email = 2;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.getEmail = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.setEmail = function (value) {
					return jspb.Message.setField(this, 2, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.clearEmail = function () {
					return jspb.Message.setField(this, 2, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.hasEmail = function () {
					return jspb.Message.getField(this, 2) != null;
				};

				/**
				 * optional bool phone_number = 3;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.getPhoneNumber = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.setPhoneNumber = function (value) {
					return jspb.Message.setField(this, 3, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.clearPhoneNumber = function () {
					return jspb.Message.setField(this, 3, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.hasPhoneNumber = function () {
					return jspb.Message.getField(this, 3) != null;
				};

				/**
				 * optional bool date_and_time = 4;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.getDateAndTime = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.setDateAndTime = function (value) {
					return jspb.Message.setField(this, 4, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.clearDateAndTime = function () {
					return jspb.Message.setField(this, 4, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.hasDateAndTime = function () {
					return jspb.Message.getField(this, 4) != null;
				};

				/**
				 * optional bool credit_card_number = 5;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.getCreditCardNumber = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.setCreditCardNumber = function (value) {
					return jspb.Message.setField(this, 5, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.clearCreditCardNumber = function () {
					return jspb.Message.setField(this, 5, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.hasCreditCardNumber = function () {
					return jspb.Message.getField(this, 5) != null;
				};

				/**
				 * optional bool social_security_number = 6;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.getSocialSecurityNumber = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.setSocialSecurityNumber = function (value) {
					return jspb.Message.setField(this, 6, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.clearSocialSecurityNumber = function () {
					return jspb.Message.setField(this, 6, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.hasSocialSecurityNumber = function () {
					return jspb.Message.getField(this, 6) != null;
				};

				/**
				 * optional bool time_zone = 7;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.getTimeZone = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.setTimeZone = function (value) {
					return jspb.Message.setField(this, 7, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.clearTimeZone = function () {
					return jspb.Message.setField(this, 7, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingNormalizationOptions.prototype.hasTimeZone = function () {
					return jspb.Message.getField(this, 7) != null;
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions.prototype.toObject = function (
						opt_includeInstance
					) {
						return proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								active: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
								minChars: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
								maxChars: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions();
					return proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setActive(value);
								break;
							case 2:
								var value = /** @type {number} */ (reader.readInt32());
								msg.setMinChars(value);
								break;
							case 3:
								var value = /** @type {number} */ (reader.readInt32());
								msg.setMaxChars(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
					if (f != null) {
						writer.writeBool(1, f);
					}
					f = /** @type {number} */ (jspb.Message.getField(message, 2));
					if (f != null) {
						writer.writeInt32(2, f);
					}
					f = /** @type {number} */ (jspb.Message.getField(message, 3));
					if (f != null) {
						writer.writeInt32(3, f);
					}
				};

				/**
				 * optional bool active = 1;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions.prototype.getActive = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions.prototype.setActive = function (value) {
					return jspb.Message.setField(this, 1, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions.prototype.clearActive = function () {
					return jspb.Message.setField(this, 1, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions.prototype.hasActive = function () {
					return jspb.Message.getField(this, 1) != null;
				};

				/**
				 * optional int32 min_chars = 2;
				 * @return {number}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions.prototype.getMinChars = function () {
					return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions.prototype.setMinChars = function (value) {
					return jspb.Message.setField(this, 2, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions.prototype.clearMinChars = function () {
					return jspb.Message.setField(this, 2, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions.prototype.hasMinChars = function () {
					return jspb.Message.getField(this, 2) != null;
				};

				/**
				 * optional int32 max_chars = 3;
				 * @return {number}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions.prototype.getMaxChars = function () {
					return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions.prototype.setMaxChars = function (value) {
					return jspb.Message.setField(this, 3, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions.prototype.clearMaxChars = function () {
					return jspb.Message.setField(this, 3, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingSummarizationOptions.prototype.hasMaxChars = function () {
					return jspb.Message.getField(this, 3) != null;
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								active: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
								prompt: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions();
					return proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {boolean} */ (reader.readBool());
								msg.setActive(value);
								break;
							case 2:
								var value = /** @type {string} */ (reader.readString());
								msg.setPrompt(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
					if (f != null) {
						writer.writeBool(1, f);
					}
					f = /** @type {string} */ (jspb.Message.getField(message, 2));
					if (f != null) {
						writer.writeString(2, f);
					}
				};

				/**
				 * optional bool active = 1;
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions.prototype.getActive = function () {
					return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
				};

				/**
				 * @param {boolean} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions.prototype.setActive = function (value) {
					return jspb.Message.setField(this, 1, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions.prototype.clearActive = function () {
					return jspb.Message.setField(this, 1, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions.prototype.hasActive = function () {
					return jspb.Message.getField(this, 1) != null;
				};

				/**
				 * optional string prompt = 2;
				 * @return {string}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions.prototype.getPrompt = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions.prototype.setPrompt = function (value) {
					return jspb.Message.setField(this, 2, value);
				};

				/**
				 * Clears the field making it undefined.
				 * @return {!proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions} returns this
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions.prototype.clearPrompt = function () {
					return jspb.Message.setField(this, 2, undefined);
				};

				/**
				 * Returns whether this field is set.
				 * @return {boolean}
				 */
				proto.ondewo.s2t.S2tLlmPostProcessingUserPromptOptions.prototype.hasPrompt = function () {
					return jspb.Message.getField(this, 2) != null;
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.Logging.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.Logging.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.Logging} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.Logging.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								type: jspb.Message.getFieldWithDefault(msg, 1, ''),
								path: jspb.Message.getFieldWithDefault(msg, 2, '')
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.Logging}
				 */
				proto.ondewo.s2t.Logging.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.Logging();
					return proto.ondewo.s2t.Logging.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.Logging} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.Logging}
				 */
				proto.ondewo.s2t.Logging.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setType(value);
								break;
							case 2:
								var value = /** @type {string} */ (reader.readString());
								msg.setPath(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.Logging.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.Logging.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.Logging} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.Logging.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getType();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
					f = message.getPath();
					if (f.length > 0) {
						writer.writeString(2, f);
					}
				};

				/**
				 * optional string type = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.Logging.prototype.getType = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.Logging} returns this
				 */
				proto.ondewo.s2t.Logging.prototype.setType = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * optional string path = 2;
				 * @return {string}
				 */
				proto.ondewo.s2t.Logging.prototype.getPath = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.Logging} returns this
				 */
				proto.ondewo.s2t.Logging.prototype.setPath = function (value) {
					return jspb.Message.setProto3StringField(this, 2, value);
				};

				/**
				 * List of repeated fields within this message type.
				 * @private {!Array<number>}
				 * @const
				 */
				proto.ondewo.s2t.ListS2tLanguageModelsRequest.repeatedFields_ = [1];

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.ListS2tLanguageModelsRequest.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.ListS2tLanguageModelsRequest.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.ListS2tLanguageModelsRequest} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.ListS2tLanguageModelsRequest.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								idsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.ListS2tLanguageModelsRequest}
				 */
				proto.ondewo.s2t.ListS2tLanguageModelsRequest.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.ListS2tLanguageModelsRequest();
					return proto.ondewo.s2t.ListS2tLanguageModelsRequest.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.ListS2tLanguageModelsRequest} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.ListS2tLanguageModelsRequest}
				 */
				proto.ondewo.s2t.ListS2tLanguageModelsRequest.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.addIds(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.ListS2tLanguageModelsRequest.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.ListS2tLanguageModelsRequest.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.ListS2tLanguageModelsRequest} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.ListS2tLanguageModelsRequest.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getIdsList();
					if (f.length > 0) {
						writer.writeRepeatedString(1, f);
					}
				};

				/**
				 * repeated string ids = 1;
				 * @return {!Array<string>}
				 */
				proto.ondewo.s2t.ListS2tLanguageModelsRequest.prototype.getIdsList = function () {
					return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
				};

				/**
				 * @param {!Array<string>} value
				 * @return {!proto.ondewo.s2t.ListS2tLanguageModelsRequest} returns this
				 */
				proto.ondewo.s2t.ListS2tLanguageModelsRequest.prototype.setIdsList = function (value) {
					return jspb.Message.setField(this, 1, value || []);
				};

				/**
				 * @param {string} value
				 * @param {number=} opt_index
				 * @return {!proto.ondewo.s2t.ListS2tLanguageModelsRequest} returns this
				 */
				proto.ondewo.s2t.ListS2tLanguageModelsRequest.prototype.addIds = function (value, opt_index) {
					return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
				};

				/**
				 * Clears the list making it empty but non-null.
				 * @return {!proto.ondewo.s2t.ListS2tLanguageModelsRequest} returns this
				 */
				proto.ondewo.s2t.ListS2tLanguageModelsRequest.prototype.clearIdsList = function () {
					return this.setIdsList([]);
				};

				/**
				 * List of repeated fields within this message type.
				 * @private {!Array<number>}
				 * @const
				 */
				proto.ondewo.s2t.LanguageModelPipelineId.repeatedFields_ = [2];

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.LanguageModelPipelineId.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.LanguageModelPipelineId.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.LanguageModelPipelineId} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.LanguageModelPipelineId.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								pipelineId: jspb.Message.getFieldWithDefault(msg, 1, ''),
								modelNamesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.LanguageModelPipelineId}
				 */
				proto.ondewo.s2t.LanguageModelPipelineId.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.LanguageModelPipelineId();
					return proto.ondewo.s2t.LanguageModelPipelineId.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.LanguageModelPipelineId} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.LanguageModelPipelineId}
				 */
				proto.ondewo.s2t.LanguageModelPipelineId.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setPipelineId(value);
								break;
							case 2:
								var value = /** @type {string} */ (reader.readString());
								msg.addModelNames(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.LanguageModelPipelineId.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.LanguageModelPipelineId.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.LanguageModelPipelineId} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.LanguageModelPipelineId.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getPipelineId();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
					f = message.getModelNamesList();
					if (f.length > 0) {
						writer.writeRepeatedString(2, f);
					}
				};

				/**
				 * optional string pipeline_id = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.LanguageModelPipelineId.prototype.getPipelineId = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.LanguageModelPipelineId} returns this
				 */
				proto.ondewo.s2t.LanguageModelPipelineId.prototype.setPipelineId = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * repeated string model_names = 2;
				 * @return {!Array<string>}
				 */
				proto.ondewo.s2t.LanguageModelPipelineId.prototype.getModelNamesList = function () {
					return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
				};

				/**
				 * @param {!Array<string>} value
				 * @return {!proto.ondewo.s2t.LanguageModelPipelineId} returns this
				 */
				proto.ondewo.s2t.LanguageModelPipelineId.prototype.setModelNamesList = function (value) {
					return jspb.Message.setField(this, 2, value || []);
				};

				/**
				 * @param {string} value
				 * @param {number=} opt_index
				 * @return {!proto.ondewo.s2t.LanguageModelPipelineId} returns this
				 */
				proto.ondewo.s2t.LanguageModelPipelineId.prototype.addModelNames = function (value, opt_index) {
					return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
				};

				/**
				 * Clears the list making it empty but non-null.
				 * @return {!proto.ondewo.s2t.LanguageModelPipelineId} returns this
				 */
				proto.ondewo.s2t.LanguageModelPipelineId.prototype.clearModelNamesList = function () {
					return this.setModelNamesList([]);
				};

				/**
				 * List of repeated fields within this message type.
				 * @private {!Array<number>}
				 * @const
				 */
				proto.ondewo.s2t.ListS2tLanguageModelsResponse.repeatedFields_ = [1];

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.ListS2tLanguageModelsResponse.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.ListS2tLanguageModelsResponse.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.ListS2tLanguageModelsResponse} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.ListS2tLanguageModelsResponse.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								lmPipelineIdsList: jspb.Message.toObjectList(
									msg.getLmPipelineIdsList(),
									proto.ondewo.s2t.LanguageModelPipelineId.toObject,
									includeInstance
								)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.ListS2tLanguageModelsResponse}
				 */
				proto.ondewo.s2t.ListS2tLanguageModelsResponse.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.ListS2tLanguageModelsResponse();
					return proto.ondewo.s2t.ListS2tLanguageModelsResponse.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.ListS2tLanguageModelsResponse} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.ListS2tLanguageModelsResponse}
				 */
				proto.ondewo.s2t.ListS2tLanguageModelsResponse.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = new proto.ondewo.s2t.LanguageModelPipelineId();
								reader.readMessage(value, proto.ondewo.s2t.LanguageModelPipelineId.deserializeBinaryFromReader);
								msg.addLmPipelineIds(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.ListS2tLanguageModelsResponse.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.ListS2tLanguageModelsResponse.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.ListS2tLanguageModelsResponse} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.ListS2tLanguageModelsResponse.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getLmPipelineIdsList();
					if (f.length > 0) {
						writer.writeRepeatedMessage(1, f, proto.ondewo.s2t.LanguageModelPipelineId.serializeBinaryToWriter);
					}
				};

				/**
				 * repeated LanguageModelPipelineId lm_pipeline_ids = 1;
				 * @return {!Array<!proto.ondewo.s2t.LanguageModelPipelineId>}
				 */
				proto.ondewo.s2t.ListS2tLanguageModelsResponse.prototype.getLmPipelineIdsList = function () {
					return /** @type{!Array<!proto.ondewo.s2t.LanguageModelPipelineId>} */ (
						jspb.Message.getRepeatedWrapperField(this, proto.ondewo.s2t.LanguageModelPipelineId, 1)
					);
				};

				/**
				 * @param {!Array<!proto.ondewo.s2t.LanguageModelPipelineId>} value
				 * @return {!proto.ondewo.s2t.ListS2tLanguageModelsResponse} returns this
				 */
				proto.ondewo.s2t.ListS2tLanguageModelsResponse.prototype.setLmPipelineIdsList = function (value) {
					return jspb.Message.setRepeatedWrapperField(this, 1, value);
				};

				/**
				 * @param {!proto.ondewo.s2t.LanguageModelPipelineId=} opt_value
				 * @param {number=} opt_index
				 * @return {!proto.ondewo.s2t.LanguageModelPipelineId}
				 */
				proto.ondewo.s2t.ListS2tLanguageModelsResponse.prototype.addLmPipelineIds = function (opt_value, opt_index) {
					return jspb.Message.addToRepeatedWrapperField(
						this,
						1,
						opt_value,
						proto.ondewo.s2t.LanguageModelPipelineId,
						opt_index
					);
				};

				/**
				 * Clears the list making it empty but non-null.
				 * @return {!proto.ondewo.s2t.ListS2tLanguageModelsResponse} returns this
				 */
				proto.ondewo.s2t.ListS2tLanguageModelsResponse.prototype.clearLmPipelineIdsList = function () {
					return this.setLmPipelineIdsList([]);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.CreateUserLanguageModelRequest.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.CreateUserLanguageModelRequest.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.CreateUserLanguageModelRequest} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.CreateUserLanguageModelRequest.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								languageModelName: jspb.Message.getFieldWithDefault(msg, 1, '')
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.CreateUserLanguageModelRequest}
				 */
				proto.ondewo.s2t.CreateUserLanguageModelRequest.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.CreateUserLanguageModelRequest();
					return proto.ondewo.s2t.CreateUserLanguageModelRequest.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.CreateUserLanguageModelRequest} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.CreateUserLanguageModelRequest}
				 */
				proto.ondewo.s2t.CreateUserLanguageModelRequest.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setLanguageModelName(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.CreateUserLanguageModelRequest.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.CreateUserLanguageModelRequest.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.CreateUserLanguageModelRequest} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.CreateUserLanguageModelRequest.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getLanguageModelName();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
				};

				/**
				 * optional string language_model_name = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.CreateUserLanguageModelRequest.prototype.getLanguageModelName = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.CreateUserLanguageModelRequest} returns this
				 */
				proto.ondewo.s2t.CreateUserLanguageModelRequest.prototype.setLanguageModelName = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.DeleteUserLanguageModelRequest.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.DeleteUserLanguageModelRequest.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.DeleteUserLanguageModelRequest} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.DeleteUserLanguageModelRequest.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								languageModelName: jspb.Message.getFieldWithDefault(msg, 1, '')
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.DeleteUserLanguageModelRequest}
				 */
				proto.ondewo.s2t.DeleteUserLanguageModelRequest.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.DeleteUserLanguageModelRequest();
					return proto.ondewo.s2t.DeleteUserLanguageModelRequest.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.DeleteUserLanguageModelRequest} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.DeleteUserLanguageModelRequest}
				 */
				proto.ondewo.s2t.DeleteUserLanguageModelRequest.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setLanguageModelName(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.DeleteUserLanguageModelRequest.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.DeleteUserLanguageModelRequest.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.DeleteUserLanguageModelRequest} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.DeleteUserLanguageModelRequest.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getLanguageModelName();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
				};

				/**
				 * optional string language_model_name = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.DeleteUserLanguageModelRequest.prototype.getLanguageModelName = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.DeleteUserLanguageModelRequest} returns this
				 */
				proto.ondewo.s2t.DeleteUserLanguageModelRequest.prototype.setLanguageModelName = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.AddDataToUserLanguageModelRequest.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.AddDataToUserLanguageModelRequest.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.AddDataToUserLanguageModelRequest} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.AddDataToUserLanguageModelRequest.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								languageModelName: jspb.Message.getFieldWithDefault(msg, 1, ''),
								zippedData: msg.getZippedData_asB64()
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.AddDataToUserLanguageModelRequest}
				 */
				proto.ondewo.s2t.AddDataToUserLanguageModelRequest.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.AddDataToUserLanguageModelRequest();
					return proto.ondewo.s2t.AddDataToUserLanguageModelRequest.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.AddDataToUserLanguageModelRequest} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.AddDataToUserLanguageModelRequest}
				 */
				proto.ondewo.s2t.AddDataToUserLanguageModelRequest.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setLanguageModelName(value);
								break;
							case 2:
								var value = /** @type {!Uint8Array} */ (reader.readBytes());
								msg.setZippedData(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.AddDataToUserLanguageModelRequest.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.AddDataToUserLanguageModelRequest.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.AddDataToUserLanguageModelRequest} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.AddDataToUserLanguageModelRequest.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getLanguageModelName();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
					f = message.getZippedData_asU8();
					if (f.length > 0) {
						writer.writeBytes(2, f);
					}
				};

				/**
				 * optional string language_model_name = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.AddDataToUserLanguageModelRequest.prototype.getLanguageModelName = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.AddDataToUserLanguageModelRequest} returns this
				 */
				proto.ondewo.s2t.AddDataToUserLanguageModelRequest.prototype.setLanguageModelName = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * optional bytes zipped_data = 2;
				 * @return {!(string|Uint8Array)}
				 */
				proto.ondewo.s2t.AddDataToUserLanguageModelRequest.prototype.getZippedData = function () {
					return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
				};

				/**
				 * optional bytes zipped_data = 2;
				 * This is a type-conversion wrapper around `getZippedData()`
				 * @return {string}
				 */
				proto.ondewo.s2t.AddDataToUserLanguageModelRequest.prototype.getZippedData_asB64 = function () {
					return /** @type {string} */ (jspb.Message.bytesAsB64(this.getZippedData()));
				};

				/**
				 * optional bytes zipped_data = 2;
				 * Note that Uint8Array is not supported on all browsers.
				 * @see http://caniuse.com/Uint8Array
				 * This is a type-conversion wrapper around `getZippedData()`
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.AddDataToUserLanguageModelRequest.prototype.getZippedData_asU8 = function () {
					return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getZippedData()));
				};

				/**
				 * @param {!(string|Uint8Array)} value
				 * @return {!proto.ondewo.s2t.AddDataToUserLanguageModelRequest} returns this
				 */
				proto.ondewo.s2t.AddDataToUserLanguageModelRequest.prototype.setZippedData = function (value) {
					return jspb.Message.setProto3BytesField(this, 2, value);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.TrainUserLanguageModelRequest.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.TrainUserLanguageModelRequest.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.TrainUserLanguageModelRequest} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.TrainUserLanguageModelRequest.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								languageModelName: jspb.Message.getFieldWithDefault(msg, 1, ''),
								order: jspb.Message.getFieldWithDefault(msg, 2, 0)
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.TrainUserLanguageModelRequest}
				 */
				proto.ondewo.s2t.TrainUserLanguageModelRequest.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.TrainUserLanguageModelRequest();
					return proto.ondewo.s2t.TrainUserLanguageModelRequest.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.TrainUserLanguageModelRequest} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.TrainUserLanguageModelRequest}
				 */
				proto.ondewo.s2t.TrainUserLanguageModelRequest.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setLanguageModelName(value);
								break;
							case 2:
								var value = /** @type {number} */ (reader.readInt64());
								msg.setOrder(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.TrainUserLanguageModelRequest.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.TrainUserLanguageModelRequest.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.TrainUserLanguageModelRequest} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.TrainUserLanguageModelRequest.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getLanguageModelName();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
					f = message.getOrder();
					if (f !== 0) {
						writer.writeInt64(2, f);
					}
				};

				/**
				 * optional string language_model_name = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.TrainUserLanguageModelRequest.prototype.getLanguageModelName = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.TrainUserLanguageModelRequest} returns this
				 */
				proto.ondewo.s2t.TrainUserLanguageModelRequest.prototype.setLanguageModelName = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * optional int64 order = 2;
				 * @return {number}
				 */
				proto.ondewo.s2t.TrainUserLanguageModelRequest.prototype.getOrder = function () {
					return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
				};

				/**
				 * @param {number} value
				 * @return {!proto.ondewo.s2t.TrainUserLanguageModelRequest} returns this
				 */
				proto.ondewo.s2t.TrainUserLanguageModelRequest.prototype.setOrder = function (value) {
					return jspb.Message.setProto3IntField(this, 2, value);
				};

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								language: jspb.Message.getFieldWithDefault(msg, 1, '')
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest}
				 */
				proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest();
					return proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest}
				 */
				proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.setLanguage(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getLanguage();
					if (f.length > 0) {
						writer.writeString(1, f);
					}
				};

				/**
				 * optional string language = 1;
				 * @return {string}
				 */
				proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest.prototype.getLanguage = function () {
					return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
				};

				/**
				 * @param {string} value
				 * @return {!proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest} returns this
				 */
				proto.ondewo.s2t.ListS2tNormalizationPipelinesRequest.prototype.setLanguage = function (value) {
					return jspb.Message.setProto3StringField(this, 1, value);
				};

				/**
				 * List of repeated fields within this message type.
				 * @private {!Array<number>}
				 * @const
				 */
				proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse.repeatedFields_ = [1];

				if (jspb.Message.GENERATE_TO_OBJECT) {
					/**
					 * Creates an object representation of this proto.
					 * Field names that are reserved in JavaScript and will be renamed to pb_name.
					 * Optional fields that are not set will be set to undefined.
					 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
					 * For the list of reserved names please see:
					 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
					 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
					 *     JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @return {!Object}
					 */
					proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse.prototype.toObject = function (opt_includeInstance) {
						return proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse.toObject(opt_includeInstance, this);
					};

					/**
					 * Static version of the {@see toObject} method.
					 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
					 *     the JSPB instance for transitional soy proto support:
					 *     http://goto/soy-param-migration
					 * @param {!proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse} msg The msg instance to transform.
					 * @return {!Object}
					 * @suppress {unusedLocalVariables} f is only used for nested messages
					 */
					proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse.toObject = function (includeInstance, msg) {
						var f,
							obj = {
								s2tNormalizationPipelinesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
							};

						if (includeInstance) {
							obj.$jspbMessageInstance = msg;
						}
						return obj;
					};
				}

				/**
				 * Deserializes binary data (in protobuf wire format).
				 * @param {jspb.ByteSource} bytes The bytes to deserialize.
				 * @return {!proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse}
				 */
				proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse.deserializeBinary = function (bytes) {
					var reader = new jspb.BinaryReader(bytes);
					var msg = new proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse();
					return proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse.deserializeBinaryFromReader(msg, reader);
				};

				/**
				 * Deserializes binary data (in protobuf wire format) from the
				 * given reader into the given message object.
				 * @param {!proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse} msg The message object to deserialize into.
				 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
				 * @return {!proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse}
				 */
				proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse.deserializeBinaryFromReader = function (msg, reader) {
					while (reader.nextField()) {
						if (reader.isEndGroup()) {
							break;
						}
						var field = reader.getFieldNumber();
						switch (field) {
							case 1:
								var value = /** @type {string} */ (reader.readString());
								msg.addS2tNormalizationPipelines(value);
								break;
							default:
								reader.skipField();
								break;
						}
					}
					return msg;
				};

				/**
				 * Serializes the message to binary data (in protobuf wire format).
				 * @return {!Uint8Array}
				 */
				proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse.prototype.serializeBinary = function () {
					var writer = new jspb.BinaryWriter();
					proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse.serializeBinaryToWriter(this, writer);
					return writer.getResultBuffer();
				};

				/**
				 * Serializes the given message to binary data (in protobuf wire
				 * format), writing to the given BinaryWriter.
				 * @param {!proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse} message
				 * @param {!jspb.BinaryWriter} writer
				 * @suppress {unusedLocalVariables} f is only used for nested messages
				 */
				proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse.serializeBinaryToWriter = function (message, writer) {
					var f = undefined;
					f = message.getS2tNormalizationPipelinesList();
					if (f.length > 0) {
						writer.writeRepeatedString(1, f);
					}
				};

				/**
				 * repeated string s2t_normalization_pipelines = 1;
				 * @return {!Array<string>}
				 */
				proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse.prototype.getS2tNormalizationPipelinesList =
					function () {
						return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
					};

				/**
				 * @param {!Array<string>} value
				 * @return {!proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse} returns this
				 */
				proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse.prototype.setS2tNormalizationPipelinesList = function (
					value
				) {
					return jspb.Message.setField(this, 1, value || []);
				};

				/**
				 * @param {string} value
				 * @param {number=} opt_index
				 * @return {!proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse} returns this
				 */
				proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse.prototype.addS2tNormalizationPipelines = function (
					value,
					opt_index
				) {
					return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
				};

				/**
				 * Clears the list making it empty but non-null.
				 * @return {!proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse} returns this
				 */
				proto.ondewo.s2t.ListS2tNormalizationPipelinesResponse.prototype.clearS2tNormalizationPipelinesList =
					function () {
						return this.setS2tNormalizationPipelinesList([]);
					};

				/**
				 * @enum {number}
				 */
				proto.ondewo.s2t.Decoding = {
					DEFAULT: 0,
					GREEDY: 1,
					BEAM_SEARCH_WITH_LM: 2,
					BEAM_SEARCH: 3
				};

				/**
				 * @enum {number}
				 */
				proto.ondewo.s2t.InferenceBackend = {
					INFERENCE_BACKEND_UNKNOWN: 0,
					INFERENCE_BACKEND_PYTORCH: 1,
					INFERENCE_BACKEND_FLAX: 2,
					INFERENCE_BACKEND_CLOUD_SERVICE_AMAZON: 3,
					INFERENCE_BACKEND_CLOUD_SERVICE_DEEPGRAM: 4,
					INFERENCE_BACKEND_CLOUD_SERVICE_GOOGLE: 5,
					INFERENCE_BACKEND_CLOUD_SERVICE_MICROSOFT: 6
				};

				goog.object.extend(exports, proto.ondewo.s2t);

				/***/
			},

		/***/ './public-api.js':
			/*!***********************!*\
  !*** ./public-api.js ***!
  \***********************/
			/***/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
				'use strict';
				__webpack_require__.r(__webpack_exports__);
				/* harmony import */ var _ondewo_s2t_speech_to_text_pb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
					/*! ././ondewo/s2t/speech-to-text_pb */ './ondewo/s2t/speech-to-text_pb.js'
				);
				/* harmony import */ var _ondewo_s2t_speech_to_text_pb__WEBPACK_IMPORTED_MODULE_0___default =
					/*#__PURE__*/ __webpack_require__.n(_ondewo_s2t_speech_to_text_pb__WEBPACK_IMPORTED_MODULE_0__);
				/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
				/* harmony reexport (unknown) */ for (const __WEBPACK_IMPORT_KEY__ in _ondewo_s2t_speech_to_text_pb__WEBPACK_IMPORTED_MODULE_0__)
					if (__WEBPACK_IMPORT_KEY__ !== 'default')
						__WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () =>
							_ondewo_s2t_speech_to_text_pb__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__];
				/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
				/* harmony import */ var _ondewo_s2t_speech_to_text_grpc_web_pb__WEBPACK_IMPORTED_MODULE_1__ =
					__webpack_require__(
						/*! ././ondewo/s2t/speech-to-text_grpc_web_pb */ './ondewo/s2t/speech-to-text_grpc_web_pb.js'
					);
				/* harmony import */ var _ondewo_s2t_speech_to_text_grpc_web_pb__WEBPACK_IMPORTED_MODULE_1___default =
					/*#__PURE__*/ __webpack_require__.n(_ondewo_s2t_speech_to_text_grpc_web_pb__WEBPACK_IMPORTED_MODULE_1__);
				/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
				/* harmony reexport (unknown) */ for (const __WEBPACK_IMPORT_KEY__ in _ondewo_s2t_speech_to_text_grpc_web_pb__WEBPACK_IMPORTED_MODULE_1__)
					if (__WEBPACK_IMPORT_KEY__ !== 'default')
						__WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () =>
							_ondewo_s2t_speech_to_text_grpc_web_pb__WEBPACK_IMPORTED_MODULE_1__[__WEBPACK_IMPORT_KEY__];
				/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
				/* harmony import */ var _public_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
					/*! ././public-api */ './public-api.js'
				);
				/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
				/* harmony reexport (unknown) */ for (const __WEBPACK_IMPORT_KEY__ in _public_api__WEBPACK_IMPORTED_MODULE_2__)
					if (__WEBPACK_IMPORT_KEY__ !== 'default')
						__WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () =>
							_public_api__WEBPACK_IMPORTED_MODULE_2__[__WEBPACK_IMPORT_KEY__];
				/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);

				/***/
			}

		/******/
	};
	/************************************************************************/
	/******/ // The module cache
	/******/ var __webpack_module_cache__ = {};
	/******/
	/******/ // The require function
	/******/ function __webpack_require__(moduleId) {
		/******/ // Check if module is in cache
		/******/ var cachedModule = __webpack_module_cache__[moduleId];
		/******/ if (cachedModule !== undefined) {
			/******/ return cachedModule.exports;
			/******/
		}
		/******/ // Create a new module (and put it into the cache)
		/******/ var module = (__webpack_module_cache__[moduleId] = {
			/******/ // no module.id needed
			/******/ // no module.loaded needed
			/******/ exports: {}
			/******/
		});
		/******/
		/******/ // Execute the module function
		/******/ __webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
		/******/
		/******/ // Return the exports of the module
		/******/ return module.exports;
		/******/
	}
	/******/
	/************************************************************************/
	/******/ /* webpack/runtime/compat get default export */
	/******/ (() => {
		/******/ // getDefaultExport function for compatibility with non-harmony modules
		/******/ __webpack_require__.n = (module) => {
			/******/ var getter = module && module.__esModule ? /******/ () => module['default'] : /******/ () => module;
			/******/ __webpack_require__.d(getter, { a: getter });
			/******/ return getter;
			/******/
		};
		/******/
	})();
	/******/
	/******/ /* webpack/runtime/define property getters */
	/******/ (() => {
		/******/ // define getter functions for harmony exports
		/******/ __webpack_require__.d = (exports, definition) => {
			/******/ for (var key in definition) {
				/******/ if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
					/******/ Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
					/******/
				}
				/******/
			}
			/******/
		};
		/******/
	})();
	/******/
	/******/ /* webpack/runtime/global */
	/******/ (() => {
		/******/ __webpack_require__.g = (function () {
			/******/ if (typeof globalThis === 'object') return globalThis;
			/******/ try {
				/******/ return this || new Function('return this')();
				/******/
			} catch (e) {
				/******/ if (typeof window === 'object') return window;
				/******/
			}
			/******/
		})();
		/******/
	})();
	/******/
	/******/ /* webpack/runtime/hasOwnProperty shorthand */
	/******/ (() => {
		/******/ __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);
		/******/
	})();
	/******/
	/******/ /* webpack/runtime/make namespace object */
	/******/ (() => {
		/******/ // define __esModule on exports
		/******/ __webpack_require__.r = (exports) => {
			/******/ if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
				/******/ Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
				/******/
			}
			/******/ Object.defineProperty(exports, '__esModule', { value: true });
			/******/
		};
		/******/
	})();
	/******/
	/************************************************************************/
	/******/
	/******/ // startup
	/******/ // Load entry module and return exports
	/******/ // This entry module is referenced by other modules so it can't be inlined
	/******/ var __webpack_exports__ = __webpack_require__('./public-api.js');
	/******/ ondewo_s2t_api = __webpack_exports__;
	/******/
	/******/
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
